// <auto-generated>
// DO NOT EDIT
// </auto-generated>

using System.CodeDom.Compiler;
using System.Collections;
using System.Linq;
using WowPacketParser.Enums;
using WowPacketParser.Misc;
using WowPacketParser.Parsing.Parsers;
using WowPacketParser.Store.Objects.UpdateFields;

namespace WowPacketParserModule.V11_0_0_55666.UpdateFields.V11_2_5_63506
{
    [GeneratedCode("UpdateFieldCodeGenerator.Formats.WowPacketParserHandler", "1.0.0.0")]
    public class UpdateFieldHandler : UpdateFieldsHandlerBase
    {
        public override IObjectData ReadCreateObjectData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new ObjectData();
            packet.ResetBitReader();
            data.EntryID = packet.ReadInt32("EntryID", indexes);
            data.DynamicFlags = packet.ReadUInt32("DynamicFlags", indexes);
            data.Scale = packet.ReadSingle("Scale", indexes);
            return data;
        }

        public override IObjectData ReadUpdateObjectData(Packet packet, params object[] indexes)
        {
            var data = new ObjectData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(4);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.EntryID = packet.ReadInt32("EntryID", indexes);
                }
                if (changesMask[2])
                {
                    data.DynamicFlags = packet.ReadUInt32("DynamicFlags", indexes);
                }
                if (changesMask[3])
                {
                    data.Scale = packet.ReadSingle("Scale", indexes);
                }
            }
            return data;
        }

        public static IItemEnchantment ReadCreateItemEnchantment(Packet packet, params object[] indexes)
        {
            var data = new ItemEnchantment();
            packet.ResetBitReader();
            data.ID = packet.ReadInt32("ID", indexes);
            data.Duration = packet.ReadUInt32("Duration", indexes);
            data.Charges = packet.ReadInt16("Charges", indexes);
            data.Inactive = packet.ReadUInt16("Inactive", indexes);
            return data;
        }

        public static IItemEnchantment ReadUpdateItemEnchantment(Packet packet, params object[] indexes)
        {
            var data = new ItemEnchantment();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(5);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.ID = packet.ReadInt32("ID", indexes);
                }
                if (changesMask[2])
                {
                    data.Duration = packet.ReadUInt32("Duration", indexes);
                }
                if (changesMask[3])
                {
                    data.Charges = packet.ReadInt16("Charges", indexes);
                }
                if (changesMask[4])
                {
                    data.Inactive = packet.ReadUInt16("Inactive", indexes);
                }
            }
            return data;
        }

        public static IItemMod ReadCreateItemMod(Packet packet, params object[] indexes)
        {
            var data = new ItemMod();
            packet.ResetBitReader();
            data.Type = packet.ReadByte("Type", indexes);
            data.Value = packet.ReadInt32("Value", indexes);
            return data;
        }

        public static IItemMod ReadUpdateItemMod(Packet packet, params object[] indexes)
        {
            var data = new ItemMod();
            packet.ResetBitReader();
            data.Type = packet.ReadByte("Type", indexes);
            data.Value = packet.ReadInt32("Value", indexes);
            return data;
        }

        public static IItemModList ReadCreateItemModList(Packet packet, params object[] indexes)
        {
            var data = new ItemModList();
            packet.ResetBitReader();
            data.Values.Resize(packet.ReadBits(6));
            for (var i = 0; i < data.Values.Count; ++i)
            {
                data.Values[i] = ReadCreateItemMod(packet, indexes, "Values", i);
            }
            return data;
        }

        public static IItemModList ReadUpdateItemModList(Packet packet, params object[] indexes)
        {
            var data = new ItemModList();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(1);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                data.Values.ReadUpdateMask(packet, 6);
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                for (var i = 0; i < data.Values.Count; ++i)
                {
                    if (data.Values.UpdateMask[i])
                    {
                        data.Values[i] = ReadUpdateItemMod(packet, indexes, "Values", i);
                    }
                }
            }
            return data;
        }

        public static IArtifactPower ReadCreateArtifactPower(Packet packet, params object[] indexes)
        {
            var data = new ArtifactPower();
            packet.ResetBitReader();
            data.ArtifactPowerID = packet.ReadInt16("ArtifactPowerID", indexes);
            data.PurchasedRank = packet.ReadByte("PurchasedRank", indexes);
            data.CurrentRankWithBonus = packet.ReadByte("CurrentRankWithBonus", indexes);
            return data;
        }

        public static IArtifactPower ReadUpdateArtifactPower(Packet packet, params object[] indexes)
        {
            var data = new ArtifactPower();
            packet.ResetBitReader();
            data.ArtifactPowerID = packet.ReadInt16("ArtifactPowerID", indexes);
            data.PurchasedRank = packet.ReadByte("PurchasedRank", indexes);
            data.CurrentRankWithBonus = packet.ReadByte("CurrentRankWithBonus", indexes);
            return data;
        }

        public static ISocketedGem ReadCreateSocketedGem(Packet packet, params object[] indexes)
        {
            var data = new SocketedGem();
            packet.ResetBitReader();
            data.ItemID = packet.ReadInt32("ItemID", indexes);
            for (var i = 0; i < 16; ++i)
            {
                data.BonusListIDs[i] = packet.ReadUInt16("BonusListIDs", indexes, i);
            }
            data.Context = packet.ReadByte("Context", indexes);
            return data;
        }

        public static ISocketedGem ReadUpdateSocketedGem(Packet packet, params object[] indexes)
        {
            var data = new SocketedGem();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(1);
            var maskMask = new BitArray(rawMaskMask);
            if (maskMask[0])
                rawChangesMask[0] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.ItemID = packet.ReadInt32("ItemID", indexes);
                }
                if (changesMask[2])
                {
                    data.Context = packet.ReadByte("Context", indexes);
                }
            }
            if (changesMask[3])
            {
                for (var i = 0; i < 16; ++i)
                {
                    if (changesMask[4 + i])
                    {
                        data.BonusListIDs[i] = packet.ReadUInt16("BonusListIDs", indexes, i);
                    }
                }
            }
            return data;
        }

        public override IItemData ReadCreateItemData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new ItemData();
            packet.ResetBitReader();
            data.Owner = packet.ReadPackedGuid128("Owner", indexes);
            data.ContainedIn = packet.ReadPackedGuid128("ContainedIn", indexes);
            data.Creator = packet.ReadPackedGuid128("Creator", indexes);
            data.GiftCreator = packet.ReadPackedGuid128("GiftCreator", indexes);
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.StackCount = packet.ReadUInt32("StackCount", indexes);
                data.Expiration = packet.ReadUInt32("Expiration", indexes);
                for (var i = 0; i < 5; ++i)
                {
                    data.SpellCharges[i] = packet.ReadInt32("SpellCharges", indexes, i);
                }
            }
            data.DynamicFlags = packet.ReadUInt32("DynamicFlags", indexes);
            for (var i = 0; i < 13; ++i)
            {
                data.Enchantment[i] = ReadCreateItemEnchantment(packet, indexes, "Enchantment", i);
            }
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.Durability = packet.ReadUInt32("Durability", indexes);
                data.MaxDurability = packet.ReadUInt32("MaxDurability", indexes);
            }
            data.CreatePlayedTime = packet.ReadUInt32("CreatePlayedTime", indexes);
            data.Context = packet.ReadByte("Context", indexes);
            data.CreateTime = packet.ReadInt64("CreateTime", indexes);
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.ArtifactXP = packet.ReadUInt64("ArtifactXP", indexes);
                data.ItemAppearanceModID = packet.ReadByte("ItemAppearanceModID", indexes);
            }
            data.ArtifactPowers.Resize(packet.ReadUInt32());
            data.Gems.Resize(packet.ReadUInt32());
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.ZoneFlags = packet.ReadUInt32("ZoneFlags", indexes);
            }
            Substructures.ItemHandler.ReadItemBonusKey(packet, indexes, "ItemBonusKey");
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.DEBUGItemLevel = packet.ReadUInt16("DEBUGItemLevel", indexes);
            }
            for (var i = 0; i < data.ArtifactPowers.Count; ++i)
            {
                data.ArtifactPowers[i] = ReadCreateArtifactPower(packet, indexes, "ArtifactPowers", i);
            }
            for (var i = 0; i < data.Gems.Count; ++i)
            {
                data.Gems[i] = ReadCreateSocketedGem(packet, indexes, "Gems", i);
            }
            data.Modifiers = ReadCreateItemModList(packet, indexes, "Modifiers");
            return data;
        }

        public override IItemData ReadUpdateItemData(Packet packet, params object[] indexes)
        {
            var data = new ItemData();
            packet.ResetBitReader();
            var rawChangesMask = new int[2];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(2);
            var maskMask = new BitArray(rawMaskMask);
            for (var i = 0; i < 2; ++i)
                if (maskMask[i])
                    rawChangesMask[i] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.ArtifactPowers.ReadUpdateMask(packet);
                }
                if (changesMask[2])
                {
                    data.Gems.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    for (var i = 0; i < data.ArtifactPowers.Count; ++i)
                    {
                        if (data.ArtifactPowers.UpdateMask[i])
                        {
                            data.ArtifactPowers[i] = ReadUpdateArtifactPower(packet, indexes, "ArtifactPowers", i);
                        }
                    }
                }
                if (changesMask[2])
                {
                    for (var i = 0; i < data.Gems.Count; ++i)
                    {
                        if (data.Gems.UpdateMask[i])
                        {
                            data.Gems[i] = ReadUpdateSocketedGem(packet, indexes, "Gems", i);
                        }
                    }
                }
                if (changesMask[3])
                {
                    data.Owner = packet.ReadPackedGuid128("Owner", indexes);
                }
                if (changesMask[4])
                {
                    data.ContainedIn = packet.ReadPackedGuid128("ContainedIn", indexes);
                }
                if (changesMask[5])
                {
                    data.Creator = packet.ReadPackedGuid128("Creator", indexes);
                }
                if (changesMask[6])
                {
                    data.GiftCreator = packet.ReadPackedGuid128("GiftCreator", indexes);
                }
                if (changesMask[7])
                {
                    data.StackCount = packet.ReadUInt32("StackCount", indexes);
                }
                if (changesMask[8])
                {
                    data.Expiration = packet.ReadUInt32("Expiration", indexes);
                }
                if (changesMask[9])
                {
                    data.DynamicFlags = packet.ReadUInt32("DynamicFlags", indexes);
                }
                if (changesMask[10])
                {
                    data.Durability = packet.ReadUInt32("Durability", indexes);
                }
                if (changesMask[11])
                {
                    data.MaxDurability = packet.ReadUInt32("MaxDurability", indexes);
                }
                if (changesMask[12])
                {
                    data.CreatePlayedTime = packet.ReadUInt32("CreatePlayedTime", indexes);
                }
                if (changesMask[13])
                {
                    data.Context = packet.ReadByte("Context", indexes);
                }
                if (changesMask[14])
                {
                    data.CreateTime = packet.ReadInt64("CreateTime", indexes);
                }
                if (changesMask[15])
                {
                    data.ArtifactXP = packet.ReadUInt64("ArtifactXP", indexes);
                }
                if (changesMask[16])
                {
                    data.ItemAppearanceModID = packet.ReadByte("ItemAppearanceModID", indexes);
                }
                if (changesMask[18])
                {
                    data.ZoneFlags = packet.ReadUInt32("ZoneFlags", indexes);
                }
                if (changesMask[19])
                {
                    Substructures.ItemHandler.ReadItemBonusKey(packet, indexes, "ItemBonusKey");
                }
                if (changesMask[20])
                {
                    data.DEBUGItemLevel = packet.ReadUInt16("DEBUGItemLevel", indexes);
                }
                if (changesMask[17])
                {
                    data.Modifiers = ReadUpdateItemModList(packet, indexes, "Modifiers");
                }
            }
            if (changesMask[21])
            {
                for (var i = 0; i < 5; ++i)
                {
                    if (changesMask[22 + i])
                    {
                        data.SpellCharges[i] = packet.ReadInt32("SpellCharges", indexes, i);
                    }
                }
            }
            if (changesMask[27])
            {
                for (var i = 0; i < 13; ++i)
                {
                    if (changesMask[28 + i])
                    {
                        data.Enchantment[i] = ReadUpdateItemEnchantment(packet, indexes, "Enchantment", i);
                    }
                }
            }
            return data;
        }

        public override IContainerData ReadCreateContainerData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new ContainerData();
            packet.ResetBitReader();
            for (var i = 0; i < 98; ++i)
            {
                data.Slots[i] = packet.ReadPackedGuid128("Slots", indexes, i);
            }
            data.NumSlots = packet.ReadUInt32("NumSlots", indexes);
            return data;
        }

        public override IContainerData ReadUpdateContainerData(Packet packet, params object[] indexes)
        {
            var data = new ContainerData();
            packet.ResetBitReader();
            var rawChangesMask = new int[4];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(4);
            var maskMask = new BitArray(rawMaskMask);
            for (var i = 0; i < 4; ++i)
                if (maskMask[i])
                    rawChangesMask[i] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.NumSlots = packet.ReadUInt32("NumSlots", indexes);
                }
            }
            if (changesMask[2])
            {
                for (var i = 0; i < 98; ++i)
                {
                    if (changesMask[3 + i])
                    {
                        data.Slots[i] = packet.ReadPackedGuid128("Slots", indexes, i);
                    }
                }
            }
            return data;
        }

        public override IAzeriteEmpoweredItemData ReadCreateAzeriteEmpoweredItemData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new AzeriteEmpoweredItemData();
            packet.ResetBitReader();
            for (var i = 0; i < 5; ++i)
            {
                data.Selections[i] = packet.ReadInt32("Selections", indexes, i);
            }
            return data;
        }

        public override IAzeriteEmpoweredItemData ReadUpdateAzeriteEmpoweredItemData(Packet packet, params object[] indexes)
        {
            var data = new AzeriteEmpoweredItemData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(1);
            var maskMask = new BitArray(rawMaskMask);
            if (maskMask[0])
                rawChangesMask[0] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                for (var i = 0; i < 5; ++i)
                {
                    if (changesMask[1 + i])
                    {
                        data.Selections[i] = packet.ReadInt32("Selections", indexes, i);
                    }
                }
            }
            return data;
        }

        public static IUnlockedAzeriteEssence ReadCreateUnlockedAzeriteEssence(Packet packet, params object[] indexes)
        {
            var data = new UnlockedAzeriteEssence();
            packet.ResetBitReader();
            data.AzeriteEssenceID = packet.ReadUInt32("AzeriteEssenceID", indexes);
            data.Rank = packet.ReadUInt32("Rank", indexes);
            return data;
        }

        public static IUnlockedAzeriteEssence ReadUpdateUnlockedAzeriteEssence(Packet packet, params object[] indexes)
        {
            var data = new UnlockedAzeriteEssence();
            packet.ResetBitReader();
            data.AzeriteEssenceID = packet.ReadUInt32("AzeriteEssenceID", indexes);
            data.Rank = packet.ReadUInt32("Rank", indexes);
            return data;
        }

        public static ISelectedAzeriteEssences ReadCreateSelectedAzeriteEssences(Packet packet, params object[] indexes)
        {
            var data = new SelectedAzeriteEssences();
            packet.ResetBitReader();
            for (var i = 0; i < 4; ++i)
            {
                data.AzeriteEssenceID[i] = packet.ReadUInt32("AzeriteEssenceID", indexes, i);
            }
            data.SpecializationID = packet.ReadUInt32("SpecializationID", indexes);
            data.Enabled = packet.ReadBit("Enabled", indexes);
            return data;
        }

        public static ISelectedAzeriteEssences ReadUpdateSelectedAzeriteEssences(Packet packet, params object[] indexes)
        {
            var data = new SelectedAzeriteEssences();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(1);
            var maskMask = new BitArray(rawMaskMask);
            if (maskMask[0])
                rawChangesMask[0] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Enabled = packet.ReadBit("Enabled", indexes);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[2])
                {
                    data.SpecializationID = packet.ReadUInt32("SpecializationID", indexes);
                }
            }
            if (changesMask[3])
            {
                for (var i = 0; i < 4; ++i)
                {
                    if (changesMask[4 + i])
                    {
                        data.AzeriteEssenceID[i] = packet.ReadUInt32("AzeriteEssenceID", indexes, i);
                    }
                }
            }
            return data;
        }

        public override IAzeriteItemData ReadCreateAzeriteItemData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new AzeriteItemData();
            packet.ResetBitReader();
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.Xp = packet.ReadUInt64("Xp", indexes);
                data.Level = packet.ReadUInt32("Level", indexes);
                data.AuraLevel = packet.ReadUInt32("AuraLevel", indexes);
                data.KnowledgeLevel = packet.ReadUInt32("KnowledgeLevel", indexes);
                data.DEBUGknowledgeWeek = packet.ReadInt32("DEBUGknowledgeWeek", indexes);
            }
            data.UnlockedEssences.Resize(packet.ReadUInt32());
            data.SelectedEssences.Resize(packet.ReadUInt32());
            data.UnlockedEssenceMilestones.Resize(packet.ReadUInt32());
            for (var i = 0; i < data.UnlockedEssences.Count; ++i)
            {
                data.UnlockedEssences[i] = ReadCreateUnlockedAzeriteEssence(packet, indexes, "UnlockedEssences", i);
            }
            for (var i = 0; i < data.UnlockedEssenceMilestones.Count; ++i)
            {
                data.UnlockedEssenceMilestones[i] = packet.ReadUInt32("UnlockedEssenceMilestones", indexes, i);
            }
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.Enabled = packet.ReadBit("Enabled", indexes);
            }
            for (var i = 0; i < data.SelectedEssences.Count; ++i)
            {
                data.SelectedEssences[i] = ReadCreateSelectedAzeriteEssences(packet, indexes, "SelectedEssences", i);
            }
            return data;
        }

        public override IAzeriteItemData ReadUpdateAzeriteItemData(Packet packet, params object[] indexes)
        {
            var data = new AzeriteItemData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(10);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Enabled = packet.ReadBit("Enabled", indexes);
                }
                if (changesMask[2])
                {
                    data.UnlockedEssences.ReadUpdateMask(packet);
                }
                if (changesMask[3])
                {
                    data.SelectedEssences.ReadUpdateMask(packet);
                }
                if (changesMask[4])
                {
                    data.UnlockedEssenceMilestones.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[2])
                {
                    for (var i = 0; i < data.UnlockedEssences.Count; ++i)
                    {
                        if (data.UnlockedEssences.UpdateMask[i])
                        {
                            data.UnlockedEssences[i] = ReadUpdateUnlockedAzeriteEssence(packet, indexes, "UnlockedEssences", i);
                        }
                    }
                }
                if (changesMask[4])
                {
                    for (var i = 0; i < data.UnlockedEssenceMilestones.Count; ++i)
                    {
                        if (data.UnlockedEssenceMilestones.UpdateMask[i])
                        {
                            data.UnlockedEssenceMilestones[i] = packet.ReadUInt32("UnlockedEssenceMilestones", indexes, i);
                        }
                    }
                }
                if (changesMask[3])
                {
                    for (var i = 0; i < data.SelectedEssences.Count; ++i)
                    {
                        if (data.SelectedEssences.UpdateMask[i])
                        {
                            data.SelectedEssences[i] = ReadUpdateSelectedAzeriteEssences(packet, indexes, "SelectedEssences", i);
                        }
                    }
                }
                if (changesMask[5])
                {
                    data.Xp = packet.ReadUInt64("Xp", indexes);
                }
                if (changesMask[6])
                {
                    data.Level = packet.ReadUInt32("Level", indexes);
                }
                if (changesMask[7])
                {
                    data.AuraLevel = packet.ReadUInt32("AuraLevel", indexes);
                }
                if (changesMask[8])
                {
                    data.KnowledgeLevel = packet.ReadUInt32("KnowledgeLevel", indexes);
                }
                if (changesMask[9])
                {
                    data.DEBUGknowledgeWeek = packet.ReadInt32("DEBUGknowledgeWeek", indexes);
                }
            }
            return data;
        }

        public static ISpellCastVisual ReadCreateSpellCastVisual(Packet packet, params object[] indexes)
        {
            var data = new SpellCastVisual();
            packet.ResetBitReader();
            data.SpellXSpellVisualID = packet.ReadInt32("SpellXSpellVisualID", indexes);
            data.ScriptVisualID = packet.ReadInt32("ScriptVisualID", indexes);
            return data;
        }

        public static ISpellCastVisual ReadUpdateSpellCastVisual(Packet packet, params object[] indexes)
        {
            var data = new SpellCastVisual();
            packet.ResetBitReader();
            data.SpellXSpellVisualID = packet.ReadInt32("SpellXSpellVisualID", indexes);
            data.ScriptVisualID = packet.ReadInt32("ScriptVisualID", indexes);
            return data;
        }

        public static IUnitChannel ReadCreateUnitChannel(Packet packet, params object[] indexes)
        {
            var data = new UnitChannel();
            packet.ResetBitReader();
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.SpellVisual = ReadCreateSpellCastVisual(packet, indexes, "SpellVisual");
            data.StartTimeMs = packet.ReadUInt32("StartTimeMs", indexes);
            data.Duration = packet.ReadUInt32("Duration", indexes);
            return data;
        }

        public static IUnitChannel ReadUpdateUnitChannel(Packet packet, params object[] indexes)
        {
            var data = new UnitChannel();
            packet.ResetBitReader();
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.SpellVisual = ReadUpdateSpellCastVisual(packet, indexes, "SpellVisual");
            data.StartTimeMs = packet.ReadUInt32("StartTimeMs", indexes);
            data.Duration = packet.ReadUInt32("Duration", indexes);
            return data;
        }

        public static IVisibleItem ReadCreateVisibleItem(Packet packet, params object[] indexes)
        {
            var data = new VisibleItem();
            packet.ResetBitReader();
            data.ItemID = packet.ReadInt32("ItemID", indexes);
            data.SecondaryItemModifiedAppearanceID = packet.ReadInt32("SecondaryItemModifiedAppearanceID", indexes);
            data.ConditionalItemAppearanceID = packet.ReadInt32("ConditionalItemAppearanceID", indexes);
            data.ItemAppearanceModID = packet.ReadUInt16("ItemAppearanceModID", indexes);
            data.ItemVisual = packet.ReadUInt16("ItemVisual", indexes);
            return data;
        }

        public static IVisibleItem ReadUpdateVisibleItem(Packet packet, params object[] indexes)
        {
            var data = new VisibleItem();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(6);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.ItemID = packet.ReadInt32("ItemID", indexes);
                }
                if (changesMask[2])
                {
                    data.SecondaryItemModifiedAppearanceID = packet.ReadInt32("SecondaryItemModifiedAppearanceID", indexes);
                }
                if (changesMask[3])
                {
                    data.ConditionalItemAppearanceID = packet.ReadInt32("ConditionalItemAppearanceID", indexes);
                }
                if (changesMask[4])
                {
                    data.ItemAppearanceModID = packet.ReadUInt16("ItemAppearanceModID", indexes);
                }
                if (changesMask[5])
                {
                    data.ItemVisual = packet.ReadUInt16("ItemVisual", indexes);
                }
            }
            return data;
        }

        public static IPassiveSpellHistory ReadCreatePassiveSpellHistory(Packet packet, params object[] indexes)
        {
            var data = new PassiveSpellHistory();
            packet.ResetBitReader();
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.AuraSpellID = packet.ReadInt32("AuraSpellID", indexes);
            return data;
        }

        public static IPassiveSpellHistory ReadUpdatePassiveSpellHistory(Packet packet, params object[] indexes)
        {
            var data = new PassiveSpellHistory();
            packet.ResetBitReader();
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.AuraSpellID = packet.ReadInt32("AuraSpellID", indexes);
            return data;
        }

        public static IUnitAssistActionData ReadCreateUnitAssistActionData(Packet packet, params object[] indexes)
        {
            var data = new UnitAssistActionData();
            packet.ResetBitReader();
            data.Type = packet.ReadByte("Type", indexes);
            data.VirtualRealmAddress = packet.ReadUInt32("VirtualRealmAddress", indexes);
            data.PlayerName = new string('*', (int)packet.ReadBits(6));
            packet.ResetBitReader();
            data.PlayerName = packet.ReadWoWString("PlayerName", data.PlayerName.Length, indexes);
            return data;
        }

        public static IUnitAssistActionData ReadUpdateUnitAssistActionData(Packet packet, params object[] indexes)
        {
            var data = new UnitAssistActionData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(4);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Type = packet.ReadByte("Type", indexes);
                }
                if (changesMask[3])
                {
                    data.VirtualRealmAddress = packet.ReadUInt32("VirtualRealmAddress", indexes);
                }
                if (changesMask[2])
                {
                    data.PlayerName = new string('*', (int)packet.ReadBits(6));
            packet.ResetBitReader();
                    data.PlayerName = packet.ReadWoWString("PlayerName", data.PlayerName.Length, indexes);
                }
            }
            return data;
        }

        public override IUnitData ReadCreateUnitData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new UnitData();
            packet.ResetBitReader();
            var hasAssistActionData = false;
            data.DisplayID = packet.ReadInt32("DisplayID", indexes);
            data.NpcFlags = packet.ReadUInt32("NpcFlags", indexes);
            data.NpcFlags2 = packet.ReadUInt32("NpcFlags2", indexes);
            data.StateSpellVisualID = packet.ReadUInt32("StateSpellVisualID", indexes);
            data.StateAnimID = packet.ReadUInt32("StateAnimID", indexes);
            data.StateAnimKitID = packet.ReadUInt32("StateAnimKitID", indexes);
            data.StateWorldEffectIDs = new System.Nullable<uint>[packet.ReadUInt32()];
            data.StateWorldEffectsQuestObjectiveID = packet.ReadUInt32("StateWorldEffectsQuestObjectiveID", indexes);
            data.SpellOverrideNameID = packet.ReadInt32("SpellOverrideNameID", indexes);
            for (var i = 0; i < data.StateWorldEffectIDs.Length; ++i)
            {
                data.StateWorldEffectIDs[i] = packet.ReadUInt32("StateWorldEffectIDs", indexes, i);
            }
            data.Charm = packet.ReadPackedGuid128("Charm", indexes);
            data.Summon = packet.ReadPackedGuid128("Summon", indexes);
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.Critter = packet.ReadPackedGuid128("Critter", indexes);
            }
            data.CharmedBy = packet.ReadPackedGuid128("CharmedBy", indexes);
            data.SummonedBy = packet.ReadPackedGuid128("SummonedBy", indexes);
            data.CreatedBy = packet.ReadPackedGuid128("CreatedBy", indexes);
            data.DemonCreator = packet.ReadPackedGuid128("DemonCreator", indexes);
            data.LookAtControllerTarget = packet.ReadPackedGuid128("LookAtControllerTarget", indexes);
            data.Target = packet.ReadPackedGuid128("Target", indexes);
            data.BattlePetCompanionGUID = packet.ReadPackedGuid128("BattlePetCompanionGUID", indexes);
            data.BattlePetDBID = packet.ReadUInt64("BattlePetDBID", indexes);
            data.ChannelData = ReadCreateUnitChannel(packet, indexes, "ChannelData");
            data.SpellEmpowerStage = packet.ReadSByte("SpellEmpowerStage", indexes);
            data.SummonedByHomeRealm = packet.ReadUInt32("SummonedByHomeRealm", indexes);
            data.Race = packet.ReadByte("Race", indexes);
            data.ClassId = packet.ReadByte("ClassId", indexes);
            data.PlayerClassId = packet.ReadByte("PlayerClassId", indexes);
            data.Sex = packet.ReadByte("Sex", indexes);
            data.DisplayPower = packet.ReadByte("DisplayPower", indexes);
            data.OverrideDisplayPowerID = packet.ReadUInt32("OverrideDisplayPowerID", indexes);
            data.Health = packet.ReadInt64("Health", indexes);
            for (var i = 0; i < 10; ++i)
            {
                data.Power[i] = packet.ReadInt32("Power", indexes, i);
                data.MaxPower[i] = packet.ReadInt32("MaxPower", indexes, i);
            }
            if ((flags & (UpdateFieldFlag.Owner | UpdateFieldFlag.UnitAll)) != UpdateFieldFlag.None)
            {
                for (var i = 0; i < 10; ++i)
                {
                    data.PowerRegenFlatModifier[i] = packet.ReadSingle("PowerRegenFlatModifier", indexes, i);
                    data.PowerRegenInterruptedFlatModifier[i] = packet.ReadSingle("PowerRegenInterruptedFlatModifier", indexes, i);
                }
            }
            data.MaxHealth = packet.ReadInt64("MaxHealth", indexes);
            data.Level = packet.ReadInt32("Level", indexes);
            data.EffectiveLevel = packet.ReadInt32("EffectiveLevel", indexes);
            data.ContentTuningID = packet.ReadInt32("ContentTuningID", indexes);
            data.ScalingLevelMin = packet.ReadInt32("ScalingLevelMin", indexes);
            data.ScalingLevelMax = packet.ReadInt32("ScalingLevelMax", indexes);
            data.ScalingLevelDelta = packet.ReadInt32("ScalingLevelDelta", indexes);
            data.ScalingFactionGroup = packet.ReadByte("ScalingFactionGroup", indexes);
            data.FactionTemplate = packet.ReadInt32("FactionTemplate", indexes);
            for (var i = 0; i < 3; ++i)
            {
                data.VirtualItems[i] = ReadCreateVisibleItem(packet, indexes, "VirtualItems", i);
            }
            data.Flags = packet.ReadUInt32("Flags", indexes);
            data.Flags2 = packet.ReadUInt32("Flags2", indexes);
            data.Flags3 = packet.ReadUInt32("Flags3", indexes);
            data.Flags4 = packet.ReadUInt32("Flags4", indexes);
            data.AuraState = packet.ReadUInt32("AuraState", indexes);
            for (var i = 0; i < 2; ++i)
            {
                data.AttackRoundBaseTime[i] = packet.ReadUInt32("AttackRoundBaseTime", indexes, i);
            }
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.RangedAttackRoundBaseTime = packet.ReadUInt32("RangedAttackRoundBaseTime", indexes);
            }
            data.BoundingRadius = packet.ReadSingle("BoundingRadius", indexes);
            data.CombatReach = packet.ReadSingle("CombatReach", indexes);
            data.DisplayScale = packet.ReadSingle("DisplayScale", indexes);
            data.CreatureFamily = packet.ReadInt32("CreatureFamily", indexes);
            data.CreatureType = packet.ReadByte("CreatureType", indexes);
            data.NativeDisplayID = packet.ReadInt32("NativeDisplayID", indexes);
            data.NativeXDisplayScale = packet.ReadSingle("NativeXDisplayScale", indexes);
            data.MountDisplayID = packet.ReadInt32("MountDisplayID", indexes);
            data.CosmeticMountDisplayID = packet.ReadInt32("CosmeticMountDisplayID", indexes);
            if ((flags & (UpdateFieldFlag.Owner | UpdateFieldFlag.Empath)) != UpdateFieldFlag.None)
            {
                data.MinDamage = packet.ReadSingle("MinDamage", indexes);
                data.MaxDamage = packet.ReadSingle("MaxDamage", indexes);
                data.MinOffHandDamage = packet.ReadSingle("MinOffHandDamage", indexes);
                data.MaxOffHandDamage = packet.ReadSingle("MaxOffHandDamage", indexes);
            }
            data.StandState = packet.ReadByte("StandState", indexes);
            data.PetTalentPoints = packet.ReadByte("PetTalentPoints", indexes);
            data.VisFlags = packet.ReadByte("VisFlags", indexes);
            data.AnimTier = packet.ReadByte("AnimTier", indexes);
            data.PetNumber = packet.ReadUInt32("PetNumber", indexes);
            data.PetNameTimestamp = packet.ReadUInt32("PetNameTimestamp", indexes);
            data.PetExperience = packet.ReadUInt32("PetExperience", indexes);
            data.PetNextLevelExperience = packet.ReadUInt32("PetNextLevelExperience", indexes);
            data.ModCastingSpeed = packet.ReadSingle("ModCastingSpeed", indexes);
            data.ModCastingSpeedNeg = packet.ReadSingle("ModCastingSpeedNeg", indexes);
            data.ModSpellHaste = packet.ReadSingle("ModSpellHaste", indexes);
            data.ModHaste = packet.ReadSingle("ModHaste", indexes);
            data.ModRangedHaste = packet.ReadSingle("ModRangedHaste", indexes);
            data.ModHasteRegen = packet.ReadSingle("ModHasteRegen", indexes);
            data.ModTimeRate = packet.ReadSingle("ModTimeRate", indexes);
            data.CreatedBySpell = packet.ReadInt32("CreatedBySpell", indexes);
            data.EmoteState = packet.ReadInt32("EmoteState", indexes);
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                for (var i = 0; i < 4; ++i)
                {
                    data.Stats[i] = packet.ReadInt32("Stats", indexes, i);
                    data.StatPosBuff[i] = packet.ReadInt32("StatPosBuff", indexes, i);
                    data.StatNegBuff[i] = packet.ReadInt32("StatNegBuff", indexes, i);
                    data.StatSupportBuff[i] = packet.ReadInt32("StatSupportBuff", indexes, i);
                }
            }
            if ((flags & (UpdateFieldFlag.Owner | UpdateFieldFlag.Empath)) != UpdateFieldFlag.None)
            {
                for (var i = 0; i < 7; ++i)
                {
                    data.Resistances[i] = packet.ReadInt32("Resistances", indexes, i);
                }
            }
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                for (var i = 0; i < 7; ++i)
                {
                    data.BonusResistanceMods[i] = packet.ReadInt32("BonusResistanceMods", indexes, i);
                    data.ManaCostModifier[i] = packet.ReadInt32("ManaCostModifier", indexes, i);
                }
            }
            data.BaseMana = packet.ReadInt32("BaseMana", indexes);
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.BaseHealth = packet.ReadInt32("BaseHealth", indexes);
            }
            data.SheatheState = packet.ReadByte("SheatheState", indexes);
            data.PvpFlags = packet.ReadByte("PvpFlags", indexes);
            data.PetFlags = packet.ReadByte("PetFlags", indexes);
            data.ShapeshiftForm = packet.ReadByte("ShapeshiftForm", indexes);
            if ((flags & UpdateFieldFlag.Owner) != UpdateFieldFlag.None)
            {
                data.AttackPower = packet.ReadInt32("AttackPower", indexes);
                data.AttackPowerModPos = packet.ReadInt32("AttackPowerModPos", indexes);
                data.AttackPowerModNeg = packet.ReadInt32("AttackPowerModNeg", indexes);
                data.AttackPowerMultiplier = packet.ReadSingle("AttackPowerMultiplier", indexes);
                data.AttackPowerModSupport = packet.ReadInt32("AttackPowerModSupport", indexes);
                data.RangedAttackPower = packet.ReadInt32("RangedAttackPower", indexes);
                data.RangedAttackPowerModPos = packet.ReadInt32("RangedAttackPowerModPos", indexes);
                data.RangedAttackPowerModNeg = packet.ReadInt32("RangedAttackPowerModNeg", indexes);
                data.RangedAttackPowerMultiplier = packet.ReadSingle("RangedAttackPowerMultiplier", indexes);
                data.RangedAttackPowerModSupport = packet.ReadInt32("RangedAttackPowerModSupport", indexes);
                data.MainHandWeaponAttackPower = packet.ReadInt32("MainHandWeaponAttackPower", indexes);
                data.OffHandWeaponAttackPower = packet.ReadInt32("OffHandWeaponAttackPower", indexes);
                data.RangedWeaponAttackPower = packet.ReadInt32("RangedWeaponAttackPower", indexes);
                data.SetAttackSpeedAura = packet.ReadInt32("SetAttackSpeedAura", indexes);
                data.Lifesteal = packet.ReadSingle("Lifesteal", indexes);
                data.MinRangedDamage = packet.ReadSingle("MinRangedDamage", indexes);
                data.MaxRangedDamage = packet.ReadSingle("MaxRangedDamage", indexes);
                data.ManaCostMultiplier = packet.ReadSingle("ManaCostMultiplier", indexes);
            }
            data.MaxHealthModifier = packet.ReadSingle("MaxHealthModifier", indexes);
            data.HoverHeight = packet.ReadSingle("HoverHeight", indexes);
            data.MinItemLevelCutoff = packet.ReadInt32("MinItemLevelCutoff", indexes);
            data.MinItemLevel = packet.ReadInt32("MinItemLevel", indexes);
            data.MaxItemLevel = packet.ReadInt32("MaxItemLevel", indexes);
            data.AzeriteItemLevel = packet.ReadInt32("AzeriteItemLevel", indexes);
            data.WildBattlePetLevel = packet.ReadInt32("WildBattlePetLevel", indexes);
            data.BattlePetCompanionExperience = packet.ReadInt32("BattlePetCompanionExperience", indexes);
            data.BattlePetCompanionNameTimestamp = packet.ReadUInt32("BattlePetCompanionNameTimestamp", indexes);
            data.InteractSpellID = packet.ReadInt32("InteractSpellID", indexes);
            data.ScaleDuration = packet.ReadInt32("ScaleDuration", indexes);
            data.LooksLikeMountID = packet.ReadInt32("LooksLikeMountID", indexes);
            data.LooksLikeCreatureID = packet.ReadInt32("LooksLikeCreatureID", indexes);
            data.LookAtControllerID = packet.ReadInt32("LookAtControllerID", indexes);
            data.PerksVendorItemID = packet.ReadInt32("PerksVendorItemID", indexes);
            data.TaxiNodesID = packet.ReadInt32("TaxiNodesID", indexes);
            data.GuildGUID = packet.ReadPackedGuid128("GuildGUID", indexes);
            data.PassiveSpells.Resize(packet.ReadUInt32());
            data.WorldEffects.Resize(packet.ReadUInt32());
            data.ChannelObjects.Resize(packet.ReadUInt32());
            data.FlightCapabilityID = packet.ReadInt32("FlightCapabilityID", indexes);
            data.GlideEventSpeedDivisor = packet.ReadSingle("GlideEventSpeedDivisor", indexes);
            data.DriveCapabilityID = packet.ReadInt32("DriveCapabilityID", indexes);
            data.MaxHealthModifierFlatNeg = packet.ReadInt32("MaxHealthModifierFlatNeg", indexes);
            data.MaxHealthModifierFlatPos = packet.ReadInt32("MaxHealthModifierFlatPos", indexes);
            data.SilencedSchoolMask = packet.ReadUInt32("SilencedSchoolMask", indexes);
            data.CurrentAreaID = packet.ReadUInt32("CurrentAreaID", indexes);
            data.Field_31C = packet.ReadSingle("Field_31C", indexes);
            data.Field_320 = packet.ReadSingle("Field_320", indexes);
            data.NameplateAttachToGUID = packet.ReadPackedGuid128("NameplateAttachToGUID", indexes);
            for (var i = 0; i < data.PassiveSpells.Count; ++i)
            {
                data.PassiveSpells[i] = ReadCreatePassiveSpellHistory(packet, indexes, "PassiveSpells", i);
            }
            for (var i = 0; i < data.WorldEffects.Count; ++i)
            {
                data.WorldEffects[i] = packet.ReadInt32("WorldEffects", indexes, i);
            }
            for (var i = 0; i < data.ChannelObjects.Count; ++i)
            {
                data.ChannelObjects[i] = packet.ReadPackedGuid128("ChannelObjects", indexes, i);
            }
            packet.ResetBitReader();
            data.Field_314 = packet.ReadBit("Field_314", indexes);
            hasAssistActionData = packet.ReadBit("HasAssistActionData", indexes);
            if (hasAssistActionData)
            {
                data.AssistActionData = ReadCreateUnitAssistActionData(packet, indexes, "AssistActionData");
            }
            return data;
        }

        public override IUnitData ReadUpdateUnitData(Packet packet, params object[] indexes)
        {
            var data = new UnitData();
            packet.ResetBitReader();
            var rawChangesMask = new int[7];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(7);
            var maskMask = new BitArray(rawMaskMask);
            for (var i = 0; i < 7; ++i)
                if (maskMask[i])
                    rawChangesMask[i] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            var hasAssistActionData = false;
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Field_314 = packet.ReadBit("Field_314", indexes);
                }
                if (changesMask[2])
                {
                    data.StateWorldEffectIDs = Enumerable.Range(0, (int)packet.ReadBits(32)).Select(x => new uint()).Cast<System.Nullable<uint>>().ToArray();
                    for (var i = 0; i < data.StateWorldEffectIDs.Length; ++i)
                    {
                        data.StateWorldEffectIDs[i] = packet.ReadUInt32("StateWorldEffectIDs", indexes, i);
                    }
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[3])
                {
                    data.PassiveSpells.ReadUpdateMask(packet);
                }
                if (changesMask[4])
                {
                    data.WorldEffects.ReadUpdateMask(packet);
                }
                if (changesMask[5])
                {
                    data.ChannelObjects.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[3])
                {
                    for (var i = 0; i < data.PassiveSpells.Count; ++i)
                    {
                        if (data.PassiveSpells.UpdateMask[i])
                        {
                            data.PassiveSpells[i] = ReadUpdatePassiveSpellHistory(packet, indexes, "PassiveSpells", i);
                        }
                    }
                }
                if (changesMask[4])
                {
                    for (var i = 0; i < data.WorldEffects.Count; ++i)
                    {
                        if (data.WorldEffects.UpdateMask[i])
                        {
                            data.WorldEffects[i] = packet.ReadInt32("WorldEffects", indexes, i);
                        }
                    }
                }
                if (changesMask[5])
                {
                    for (var i = 0; i < data.ChannelObjects.Count; ++i)
                    {
                        if (data.ChannelObjects.UpdateMask[i])
                        {
                            data.ChannelObjects[i] = packet.ReadPackedGuid128("ChannelObjects", indexes, i);
                        }
                    }
                }
                if (changesMask[6])
                {
                    data.DisplayID = packet.ReadInt32("DisplayID", indexes);
                }
                if (changesMask[7])
                {
                    data.NpcFlags = packet.ReadUInt32("NpcFlags", indexes);
                }
                if (changesMask[8])
                {
                    data.NpcFlags2 = packet.ReadUInt32("NpcFlags2", indexes);
                }
                if (changesMask[9])
                {
                    data.StateSpellVisualID = packet.ReadUInt32("StateSpellVisualID", indexes);
                }
                if (changesMask[10])
                {
                    data.StateAnimID = packet.ReadUInt32("StateAnimID", indexes);
                }
                if (changesMask[11])
                {
                    data.StateAnimKitID = packet.ReadUInt32("StateAnimKitID", indexes);
                }
                if (changesMask[12])
                {
                    data.StateWorldEffectsQuestObjectiveID = packet.ReadUInt32("StateWorldEffectsQuestObjectiveID", indexes);
                }
                if (changesMask[13])
                {
                    data.SpellOverrideNameID = packet.ReadInt32("SpellOverrideNameID", indexes);
                }
                if (changesMask[14])
                {
                    data.Charm = packet.ReadPackedGuid128("Charm", indexes);
                }
                if (changesMask[15])
                {
                    data.Summon = packet.ReadPackedGuid128("Summon", indexes);
                }
                if (changesMask[16])
                {
                    data.Critter = packet.ReadPackedGuid128("Critter", indexes);
                }
                if (changesMask[17])
                {
                    data.CharmedBy = packet.ReadPackedGuid128("CharmedBy", indexes);
                }
                if (changesMask[18])
                {
                    data.SummonedBy = packet.ReadPackedGuid128("SummonedBy", indexes);
                }
                if (changesMask[19])
                {
                    data.CreatedBy = packet.ReadPackedGuid128("CreatedBy", indexes);
                }
                if (changesMask[20])
                {
                    data.DemonCreator = packet.ReadPackedGuid128("DemonCreator", indexes);
                }
                if (changesMask[21])
                {
                    data.LookAtControllerTarget = packet.ReadPackedGuid128("LookAtControllerTarget", indexes);
                }
                if (changesMask[22])
                {
                    data.Target = packet.ReadPackedGuid128("Target", indexes);
                }
                if (changesMask[23])
                {
                    data.BattlePetCompanionGUID = packet.ReadPackedGuid128("BattlePetCompanionGUID", indexes);
                }
                if (changesMask[24])
                {
                    data.BattlePetDBID = packet.ReadUInt64("BattlePetDBID", indexes);
                }
                if (changesMask[25])
                {
                    data.ChannelData = ReadUpdateUnitChannel(packet, indexes, "ChannelData");
                }
                if (changesMask[26])
                {
                    data.SpellEmpowerStage = packet.ReadSByte("SpellEmpowerStage", indexes);
                }
                if (changesMask[27])
                {
                    data.SummonedByHomeRealm = packet.ReadUInt32("SummonedByHomeRealm", indexes);
                }
                if (changesMask[28])
                {
                    data.Race = packet.ReadByte("Race", indexes);
                }
                if (changesMask[29])
                {
                    data.ClassId = packet.ReadByte("ClassId", indexes);
                }
                if (changesMask[30])
                {
                    data.PlayerClassId = packet.ReadByte("PlayerClassId", indexes);
                }
                if (changesMask[31])
                {
                    data.Sex = packet.ReadByte("Sex", indexes);
                }
            }
            if (changesMask[32])
            {
                if (changesMask[33])
                {
                    data.DisplayPower = packet.ReadByte("DisplayPower", indexes);
                }
                if (changesMask[34])
                {
                    data.OverrideDisplayPowerID = packet.ReadUInt32("OverrideDisplayPowerID", indexes);
                }
                if (changesMask[35])
                {
                    data.Health = packet.ReadInt64("Health", indexes);
                }
                if (changesMask[36])
                {
                    data.MaxHealth = packet.ReadInt64("MaxHealth", indexes);
                }
                if (changesMask[37])
                {
                    data.Level = packet.ReadInt32("Level", indexes);
                }
                if (changesMask[38])
                {
                    data.EffectiveLevel = packet.ReadInt32("EffectiveLevel", indexes);
                }
                if (changesMask[39])
                {
                    data.ContentTuningID = packet.ReadInt32("ContentTuningID", indexes);
                }
                if (changesMask[40])
                {
                    data.ScalingLevelMin = packet.ReadInt32("ScalingLevelMin", indexes);
                }
                if (changesMask[41])
                {
                    data.ScalingLevelMax = packet.ReadInt32("ScalingLevelMax", indexes);
                }
                if (changesMask[42])
                {
                    data.ScalingLevelDelta = packet.ReadInt32("ScalingLevelDelta", indexes);
                }
                if (changesMask[43])
                {
                    data.ScalingFactionGroup = packet.ReadByte("ScalingFactionGroup", indexes);
                }
                if (changesMask[44])
                {
                    data.FactionTemplate = packet.ReadInt32("FactionTemplate", indexes);
                }
                if (changesMask[45])
                {
                    data.Flags = packet.ReadUInt32("Flags", indexes);
                }
                if (changesMask[46])
                {
                    data.Flags2 = packet.ReadUInt32("Flags2", indexes);
                }
                if (changesMask[47])
                {
                    data.Flags3 = packet.ReadUInt32("Flags3", indexes);
                }
                if (changesMask[48])
                {
                    data.Flags4 = packet.ReadUInt32("Flags4", indexes);
                }
                if (changesMask[49])
                {
                    data.AuraState = packet.ReadUInt32("AuraState", indexes);
                }
                if (changesMask[50])
                {
                    data.RangedAttackRoundBaseTime = packet.ReadUInt32("RangedAttackRoundBaseTime", indexes);
                }
                if (changesMask[51])
                {
                    data.BoundingRadius = packet.ReadSingle("BoundingRadius", indexes);
                }
                if (changesMask[52])
                {
                    data.CombatReach = packet.ReadSingle("CombatReach", indexes);
                }
                if (changesMask[53])
                {
                    data.DisplayScale = packet.ReadSingle("DisplayScale", indexes);
                }
                if (changesMask[54])
                {
                    data.CreatureFamily = packet.ReadInt32("CreatureFamily", indexes);
                }
                if (changesMask[55])
                {
                    data.CreatureType = packet.ReadByte("CreatureType", indexes);
                }
                if (changesMask[56])
                {
                    data.NativeDisplayID = packet.ReadInt32("NativeDisplayID", indexes);
                }
                if (changesMask[57])
                {
                    data.NativeXDisplayScale = packet.ReadSingle("NativeXDisplayScale", indexes);
                }
                if (changesMask[58])
                {
                    data.MountDisplayID = packet.ReadInt32("MountDisplayID", indexes);
                }
                if (changesMask[59])
                {
                    data.CosmeticMountDisplayID = packet.ReadInt32("CosmeticMountDisplayID", indexes);
                }
                if (changesMask[60])
                {
                    data.MinDamage = packet.ReadSingle("MinDamage", indexes);
                }
                if (changesMask[61])
                {
                    data.MaxDamage = packet.ReadSingle("MaxDamage", indexes);
                }
                if (changesMask[62])
                {
                    data.MinOffHandDamage = packet.ReadSingle("MinOffHandDamage", indexes);
                }
                if (changesMask[63])
                {
                    data.MaxOffHandDamage = packet.ReadSingle("MaxOffHandDamage", indexes);
                }
            }
            if (changesMask[64])
            {
                if (changesMask[65])
                {
                    data.StandState = packet.ReadByte("StandState", indexes);
                }
                if (changesMask[66])
                {
                    data.PetTalentPoints = packet.ReadByte("PetTalentPoints", indexes);
                }
                if (changesMask[67])
                {
                    data.VisFlags = packet.ReadByte("VisFlags", indexes);
                }
                if (changesMask[68])
                {
                    data.AnimTier = packet.ReadByte("AnimTier", indexes);
                }
                if (changesMask[69])
                {
                    data.PetNumber = packet.ReadUInt32("PetNumber", indexes);
                }
                if (changesMask[70])
                {
                    data.PetNameTimestamp = packet.ReadUInt32("PetNameTimestamp", indexes);
                }
                if (changesMask[71])
                {
                    data.PetExperience = packet.ReadUInt32("PetExperience", indexes);
                }
                if (changesMask[72])
                {
                    data.PetNextLevelExperience = packet.ReadUInt32("PetNextLevelExperience", indexes);
                }
                if (changesMask[73])
                {
                    data.ModCastingSpeed = packet.ReadSingle("ModCastingSpeed", indexes);
                }
                if (changesMask[74])
                {
                    data.ModCastingSpeedNeg = packet.ReadSingle("ModCastingSpeedNeg", indexes);
                }
                if (changesMask[75])
                {
                    data.ModSpellHaste = packet.ReadSingle("ModSpellHaste", indexes);
                }
                if (changesMask[76])
                {
                    data.ModHaste = packet.ReadSingle("ModHaste", indexes);
                }
                if (changesMask[77])
                {
                    data.ModRangedHaste = packet.ReadSingle("ModRangedHaste", indexes);
                }
                if (changesMask[78])
                {
                    data.ModHasteRegen = packet.ReadSingle("ModHasteRegen", indexes);
                }
                if (changesMask[79])
                {
                    data.ModTimeRate = packet.ReadSingle("ModTimeRate", indexes);
                }
                if (changesMask[80])
                {
                    data.CreatedBySpell = packet.ReadInt32("CreatedBySpell", indexes);
                }
                if (changesMask[81])
                {
                    data.EmoteState = packet.ReadInt32("EmoteState", indexes);
                }
                if (changesMask[82])
                {
                    data.BaseMana = packet.ReadInt32("BaseMana", indexes);
                }
                if (changesMask[83])
                {
                    data.BaseHealth = packet.ReadInt32("BaseHealth", indexes);
                }
                if (changesMask[84])
                {
                    data.SheatheState = packet.ReadByte("SheatheState", indexes);
                }
                if (changesMask[85])
                {
                    data.PvpFlags = packet.ReadByte("PvpFlags", indexes);
                }
                if (changesMask[86])
                {
                    data.PetFlags = packet.ReadByte("PetFlags", indexes);
                }
                if (changesMask[87])
                {
                    data.ShapeshiftForm = packet.ReadByte("ShapeshiftForm", indexes);
                }
                if (changesMask[88])
                {
                    data.AttackPower = packet.ReadInt32("AttackPower", indexes);
                }
                if (changesMask[89])
                {
                    data.AttackPowerModPos = packet.ReadInt32("AttackPowerModPos", indexes);
                }
                if (changesMask[90])
                {
                    data.AttackPowerModNeg = packet.ReadInt32("AttackPowerModNeg", indexes);
                }
                if (changesMask[91])
                {
                    data.AttackPowerMultiplier = packet.ReadSingle("AttackPowerMultiplier", indexes);
                }
                if (changesMask[92])
                {
                    data.AttackPowerModSupport = packet.ReadInt32("AttackPowerModSupport", indexes);
                }
                if (changesMask[93])
                {
                    data.RangedAttackPower = packet.ReadInt32("RangedAttackPower", indexes);
                }
                if (changesMask[94])
                {
                    data.RangedAttackPowerModPos = packet.ReadInt32("RangedAttackPowerModPos", indexes);
                }
                if (changesMask[95])
                {
                    data.RangedAttackPowerModNeg = packet.ReadInt32("RangedAttackPowerModNeg", indexes);
                }
            }
            if (changesMask[96])
            {
                if (changesMask[97])
                {
                    data.RangedAttackPowerMultiplier = packet.ReadSingle("RangedAttackPowerMultiplier", indexes);
                }
                if (changesMask[98])
                {
                    data.RangedAttackPowerModSupport = packet.ReadInt32("RangedAttackPowerModSupport", indexes);
                }
                if (changesMask[99])
                {
                    data.MainHandWeaponAttackPower = packet.ReadInt32("MainHandWeaponAttackPower", indexes);
                }
                if (changesMask[100])
                {
                    data.OffHandWeaponAttackPower = packet.ReadInt32("OffHandWeaponAttackPower", indexes);
                }
                if (changesMask[101])
                {
                    data.RangedWeaponAttackPower = packet.ReadInt32("RangedWeaponAttackPower", indexes);
                }
                if (changesMask[102])
                {
                    data.SetAttackSpeedAura = packet.ReadInt32("SetAttackSpeedAura", indexes);
                }
                if (changesMask[103])
                {
                    data.Lifesteal = packet.ReadSingle("Lifesteal", indexes);
                }
                if (changesMask[104])
                {
                    data.MinRangedDamage = packet.ReadSingle("MinRangedDamage", indexes);
                }
                if (changesMask[105])
                {
                    data.MaxRangedDamage = packet.ReadSingle("MaxRangedDamage", indexes);
                }
                if (changesMask[106])
                {
                    data.ManaCostMultiplier = packet.ReadSingle("ManaCostMultiplier", indexes);
                }
                if (changesMask[107])
                {
                    data.MaxHealthModifier = packet.ReadSingle("MaxHealthModifier", indexes);
                }
                if (changesMask[108])
                {
                    data.HoverHeight = packet.ReadSingle("HoverHeight", indexes);
                }
                if (changesMask[109])
                {
                    data.MinItemLevelCutoff = packet.ReadInt32("MinItemLevelCutoff", indexes);
                }
                if (changesMask[110])
                {
                    data.MinItemLevel = packet.ReadInt32("MinItemLevel", indexes);
                }
                if (changesMask[111])
                {
                    data.MaxItemLevel = packet.ReadInt32("MaxItemLevel", indexes);
                }
                if (changesMask[112])
                {
                    data.AzeriteItemLevel = packet.ReadInt32("AzeriteItemLevel", indexes);
                }
                if (changesMask[113])
                {
                    data.WildBattlePetLevel = packet.ReadInt32("WildBattlePetLevel", indexes);
                }
                if (changesMask[114])
                {
                    data.BattlePetCompanionExperience = packet.ReadInt32("BattlePetCompanionExperience", indexes);
                }
                if (changesMask[115])
                {
                    data.BattlePetCompanionNameTimestamp = packet.ReadUInt32("BattlePetCompanionNameTimestamp", indexes);
                }
                if (changesMask[116])
                {
                    data.InteractSpellID = packet.ReadInt32("InteractSpellID", indexes);
                }
                if (changesMask[117])
                {
                    data.ScaleDuration = packet.ReadInt32("ScaleDuration", indexes);
                }
                if (changesMask[118])
                {
                    data.LooksLikeMountID = packet.ReadInt32("LooksLikeMountID", indexes);
                }
                if (changesMask[119])
                {
                    data.LooksLikeCreatureID = packet.ReadInt32("LooksLikeCreatureID", indexes);
                }
                if (changesMask[120])
                {
                    data.LookAtControllerID = packet.ReadInt32("LookAtControllerID", indexes);
                }
                if (changesMask[121])
                {
                    data.PerksVendorItemID = packet.ReadInt32("PerksVendorItemID", indexes);
                }
                if (changesMask[122])
                {
                    data.TaxiNodesID = packet.ReadInt32("TaxiNodesID", indexes);
                }
                if (changesMask[123])
                {
                    data.GuildGUID = packet.ReadPackedGuid128("GuildGUID", indexes);
                }
                if (changesMask[124])
                {
                    data.FlightCapabilityID = packet.ReadInt32("FlightCapabilityID", indexes);
                }
                if (changesMask[125])
                {
                    data.GlideEventSpeedDivisor = packet.ReadSingle("GlideEventSpeedDivisor", indexes);
                }
                if (changesMask[126])
                {
                    data.DriveCapabilityID = packet.ReadInt32("DriveCapabilityID", indexes);
                }
                if (changesMask[127])
                {
                    data.MaxHealthModifierFlatNeg = packet.ReadInt32("MaxHealthModifierFlatNeg", indexes);
                }
            }
            if (changesMask[128])
            {
                if (changesMask[129])
                {
                    data.MaxHealthModifierFlatPos = packet.ReadInt32("MaxHealthModifierFlatPos", indexes);
                }
                if (changesMask[130])
                {
                    data.SilencedSchoolMask = packet.ReadUInt32("SilencedSchoolMask", indexes);
                }
                if (changesMask[131])
                {
                    data.CurrentAreaID = packet.ReadUInt32("CurrentAreaID", indexes);
                }
                if (changesMask[132])
                {
                    data.Field_31C = packet.ReadSingle("Field_31C", indexes);
                }
                if (changesMask[133])
                {
                    data.Field_320 = packet.ReadSingle("Field_320", indexes);
                }
                if (changesMask[134])
                {
                    data.NameplateAttachToGUID = packet.ReadPackedGuid128("NameplateAttachToGUID", indexes);
                }
            }
            packet.ResetBitReader();
            if (changesMask[128])
            {
                hasAssistActionData = packet.ReadBit("HasAssistActionData", indexes);
                if (changesMask[135])
                {
                    if (hasAssistActionData)
                    {
                        data.AssistActionData = ReadUpdateUnitAssistActionData(packet, indexes, "AssistActionData");
                    }
                }
            }
            if (changesMask[136])
            {
                for (var i = 0; i < 10; ++i)
                {
                    if (changesMask[137 + i])
                    {
                        data.Power[i] = packet.ReadInt32("Power", indexes, i);
                    }
                    if (changesMask[147 + i])
                    {
                        data.MaxPower[i] = packet.ReadInt32("MaxPower", indexes, i);
                    }
                    if (changesMask[157 + i])
                    {
                        data.PowerRegenFlatModifier[i] = packet.ReadSingle("PowerRegenFlatModifier", indexes, i);
                    }
                    if (changesMask[167 + i])
                    {
                        data.PowerRegenInterruptedFlatModifier[i] = packet.ReadSingle("PowerRegenInterruptedFlatModifier", indexes, i);
                    }
                }
            }
            if (changesMask[177])
            {
                for (var i = 0; i < 3; ++i)
                {
                    if (changesMask[178 + i])
                    {
                        data.VirtualItems[i] = ReadUpdateVisibleItem(packet, indexes, "VirtualItems", i);
                    }
                }
            }
            if (changesMask[181])
            {
                for (var i = 0; i < 2; ++i)
                {
                    if (changesMask[182 + i])
                    {
                        data.AttackRoundBaseTime[i] = packet.ReadUInt32("AttackRoundBaseTime", indexes, i);
                    }
                }
            }
            if (changesMask[184])
            {
                for (var i = 0; i < 4; ++i)
                {
                    if (changesMask[185 + i])
                    {
                        data.Stats[i] = packet.ReadInt32("Stats", indexes, i);
                    }
                    if (changesMask[189 + i])
                    {
                        data.StatPosBuff[i] = packet.ReadInt32("StatPosBuff", indexes, i);
                    }
                    if (changesMask[193 + i])
                    {
                        data.StatNegBuff[i] = packet.ReadInt32("StatNegBuff", indexes, i);
                    }
                    if (changesMask[197 + i])
                    {
                        data.StatSupportBuff[i] = packet.ReadInt32("StatSupportBuff", indexes, i);
                    }
                }
            }
            if (changesMask[201])
            {
                for (var i = 0; i < 7; ++i)
                {
                    if (changesMask[202 + i])
                    {
                        data.Resistances[i] = packet.ReadInt32("Resistances", indexes, i);
                    }
                    if (changesMask[209 + i])
                    {
                        data.BonusResistanceMods[i] = packet.ReadInt32("BonusResistanceMods", indexes, i);
                    }
                    if (changesMask[216 + i])
                    {
                        data.ManaCostModifier[i] = packet.ReadInt32("ManaCostModifier", indexes, i);
                    }
                }
            }
            return data;
        }

        public static IChrCustomizationChoice ReadCreateChrCustomizationChoice(Packet packet, params object[] indexes)
        {
            var data = new ChrCustomizationChoice();
            packet.ResetBitReader();
            data.ChrCustomizationOptionID = packet.ReadUInt32("ChrCustomizationOptionID", indexes);
            data.ChrCustomizationChoiceID = packet.ReadUInt32("ChrCustomizationChoiceID", indexes);
            return data;
        }

        public static IChrCustomizationChoice ReadUpdateChrCustomizationChoice(Packet packet, params object[] indexes)
        {
            var data = new ChrCustomizationChoice();
            packet.ResetBitReader();
            data.ChrCustomizationOptionID = packet.ReadUInt32("ChrCustomizationOptionID", indexes);
            data.ChrCustomizationChoiceID = packet.ReadUInt32("ChrCustomizationChoiceID", indexes);
            return data;
        }

        public static IQuestLog ReadCreateQuestLog(Packet packet, params object[] indexes)
        {
            var data = new QuestLog();
            packet.ResetBitReader();
            data.QuestID = packet.ReadInt32("QuestID", indexes);
            data.StateFlags = packet.ReadUInt16("StateFlags", indexes);
            for (var i = 0; i < 24; ++i)
            {
                data.ObjectiveProgress[i] = packet.ReadInt16("ObjectiveProgress", indexes, i);
            }
            data.EndTime = packet.ReadInt64("EndTime", indexes);
            data.ObjectiveFlags = packet.ReadUInt32("ObjectiveFlags", indexes);
            return data;
        }

        public static IQuestLog ReadUpdateQuestLog(Packet packet, params object[] indexes)
        {
            var data = new QuestLog();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(1);
            var maskMask = new BitArray(rawMaskMask);
            if (maskMask[0])
                rawChangesMask[0] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.QuestID = packet.ReadInt32("QuestID", indexes);
                }
                if (changesMask[2])
                {
                    data.StateFlags = packet.ReadUInt16("StateFlags", indexes);
                }
                if (changesMask[3])
                {
                    data.EndTime = packet.ReadInt64("EndTime", indexes);
                }
                if (changesMask[4])
                {
                    data.ObjectiveFlags = packet.ReadUInt32("ObjectiveFlags", indexes);
                }
            }
            if (changesMask[5])
            {
                for (var i = 0; i < 24; ++i)
                {
                    if (changesMask[6 + i])
                    {
                        data.ObjectiveProgress[i] = packet.ReadInt16("ObjectiveProgress", indexes, i);
                    }
                }
            }
            return data;
        }

        public static IArenaCooldown ReadCreateArenaCooldown(Packet packet, params object[] indexes)
        {
            var data = new ArenaCooldown();
            packet.ResetBitReader();
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.Charges = packet.ReadInt32("Charges", indexes);
            data.Flags = packet.ReadUInt32("Flags", indexes);
            data.StartTime = packet.ReadUInt32("StartTime", indexes);
            data.EndTime = packet.ReadUInt32("EndTime", indexes);
            data.NextChargeTime = packet.ReadUInt32("NextChargeTime", indexes);
            data.MaxCharges = packet.ReadByte("MaxCharges", indexes);
            return data;
        }

        public static IArenaCooldown ReadUpdateArenaCooldown(Packet packet, params object[] indexes)
        {
            var data = new ArenaCooldown();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(8);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.SpellID = packet.ReadInt32("SpellID", indexes);
                }
                if (changesMask[2])
                {
                    data.Charges = packet.ReadInt32("Charges", indexes);
                }
                if (changesMask[3])
                {
                    data.Flags = packet.ReadUInt32("Flags", indexes);
                }
                if (changesMask[4])
                {
                    data.StartTime = packet.ReadUInt32("StartTime", indexes);
                }
                if (changesMask[5])
                {
                    data.EndTime = packet.ReadUInt32("EndTime", indexes);
                }
                if (changesMask[6])
                {
                    data.NextChargeTime = packet.ReadUInt32("NextChargeTime", indexes);
                }
                if (changesMask[7])
                {
                    data.MaxCharges = packet.ReadByte("MaxCharges", indexes);
                }
            }
            return data;
        }

        public static IZonePlayerForcedReaction ReadCreateZonePlayerForcedReaction(Packet packet, params object[] indexes)
        {
            var data = new ZonePlayerForcedReaction();
            packet.ResetBitReader();
            data.FactionID = packet.ReadInt32("FactionID", indexes);
            data.Reaction = packet.ReadInt32("Reaction", indexes);
            return data;
        }

        public static IZonePlayerForcedReaction ReadUpdateZonePlayerForcedReaction(Packet packet, params object[] indexes)
        {
            var data = new ZonePlayerForcedReaction();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.FactionID = packet.ReadInt32("FactionID", indexes);
                }
                if (changesMask[2])
                {
                    data.Reaction = packet.ReadInt32("Reaction", indexes);
                }
            }
            return data;
        }

        public static IPetCreatureName ReadCreatePetCreatureName(Packet packet, params object[] indexes)
        {
            var data = new PetCreatureName();
            packet.ResetBitReader();
            data.CreatureID = packet.ReadUInt32("CreatureID", indexes);
            data.Name = new string('*', (int)packet.ReadBits(8));
            data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
            return data;
        }

        public static IPetCreatureName ReadUpdatePetCreatureName(Packet packet, params object[] indexes)
        {
            var data = new PetCreatureName();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.CreatureID = packet.ReadUInt32("CreatureID", indexes);
                }
                if (changesMask[2])
                {
                    data.Name = new string('*', (int)packet.ReadBits(8));
                    data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
                }
            }
            return data;
        }

        public static ICTROptions ReadCreateCTROptions(Packet packet, params object[] indexes)
        {
            var data = new CTROptions();
            packet.ResetBitReader();
            data.ConditionalFlags = packet.ReadUInt32("ConditionalFlags", indexes);
            data.FactionGroup = packet.ReadByte("FactionGroup", indexes);
            data.ChromieTimeExpansionMask = packet.ReadUInt32("ChromieTimeExpansionMask", indexes);
            return data;
        }

        public static ICTROptions ReadUpdateCTROptions(Packet packet, params object[] indexes)
        {
            var data = new CTROptions();
            packet.ResetBitReader();
            data.ConditionalFlags = packet.ReadUInt32("ConditionalFlags", indexes);
            data.FactionGroup = packet.ReadByte("FactionGroup", indexes);
            data.ChromieTimeExpansionMask = packet.ReadUInt32("ChromieTimeExpansionMask", indexes);
            return data;
        }

        public static ILeaverInfo ReadCreateLeaverInfo(Packet packet, params object[] indexes)
        {
            var data = new LeaverInfo();
            packet.ResetBitReader();
            data.BnetAccountGUID = packet.ReadPackedGuid128("BnetAccountGUID", indexes);
            data.LeaveScore = packet.ReadSingle("LeaveScore", indexes);
            data.SeasonID = packet.ReadUInt32("SeasonID", indexes);
            data.TotalLeaves = packet.ReadUInt32("TotalLeaves", indexes);
            data.TotalSuccesses = packet.ReadUInt32("TotalSuccesses", indexes);
            data.ConsecutiveSuccesses = packet.ReadInt32("ConsecutiveSuccesses", indexes);
            data.LastPenaltyTime = packet.ReadInt64("LastPenaltyTime", indexes);
            data.LeaverExpirationTime = packet.ReadInt64("LeaverExpirationTime", indexes);
            data.Unknown_1120 = packet.ReadInt32("Unknown_1120", indexes);
            data.LeaverStatus = packet.ReadBits("LeaverStatus", 1, indexes);
            return data;
        }

        public static ILeaverInfo ReadUpdateLeaverInfo(Packet packet, params object[] indexes)
        {
            var data = new LeaverInfo();
            packet.ResetBitReader();
            data.BnetAccountGUID = packet.ReadPackedGuid128("BnetAccountGUID", indexes);
            data.LeaveScore = packet.ReadSingle("LeaveScore", indexes);
            data.SeasonID = packet.ReadUInt32("SeasonID", indexes);
            data.TotalLeaves = packet.ReadUInt32("TotalLeaves", indexes);
            data.TotalSuccesses = packet.ReadUInt32("TotalSuccesses", indexes);
            data.ConsecutiveSuccesses = packet.ReadInt32("ConsecutiveSuccesses", indexes);
            data.LastPenaltyTime = packet.ReadInt64("LastPenaltyTime", indexes);
            data.LeaverExpirationTime = packet.ReadInt64("LeaverExpirationTime", indexes);
            data.Unknown_1120 = packet.ReadInt32("Unknown_1120", indexes);
            data.LeaverStatus = packet.ReadBits("LeaverStatus", 1, indexes);
            return data;
        }

        public static IDeclinedNames ReadCreateDeclinedNames(Packet packet, params object[] indexes)
        {
            var data = new DeclinedNames();
            packet.ResetBitReader();
            for (var i = 0; i < 5; ++i)
            {
                data.Name[i] = new string('*', (int)packet.ReadBits(10));
            }
            for (var i = 0; i < 5; ++i)
            {
                data.Name[i] = packet.ReadWoWString("Name", data.Name[i].Length, indexes, i);
            }
            return data;
        }

        public static IDeclinedNames ReadUpdateDeclinedNames(Packet packet, params object[] indexes)
        {
            var data = new DeclinedNames();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(1);
            var maskMask = new BitArray(rawMaskMask);
            if (maskMask[0])
                rawChangesMask[0] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                for (var i = 0; i < 5; ++i)
                {
                    if (changesMask[1 + i])
                    {
                        data.Name[i] = new string('*', (int)packet.ReadBits(10));
                    }
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                for (var i = 0; i < 5; ++i)
                {
                    if (changesMask[1 + i])
                    {
                        data.Name[i] = packet.ReadWoWString("Name", data.Name[i].Length, indexes, i);
                    }
                }
            }
            return data;
        }

        public static ICustomTabardInfo ReadCreateCustomTabardInfo(Packet packet, params object[] indexes)
        {
            var data = new CustomTabardInfo();
            packet.ResetBitReader();
            data.EmblemStyle = packet.ReadInt32("EmblemStyle", indexes);
            data.EmblemColor = packet.ReadInt32("EmblemColor", indexes);
            data.BorderStyle = packet.ReadInt32("BorderStyle", indexes);
            data.BorderColor = packet.ReadInt32("BorderColor", indexes);
            data.BackgroundColor = packet.ReadInt32("BackgroundColor", indexes);
            return data;
        }

        public static ICustomTabardInfo ReadUpdateCustomTabardInfo(Packet packet, params object[] indexes)
        {
            var data = new CustomTabardInfo();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(6);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.EmblemStyle = packet.ReadInt32("EmblemStyle", indexes);
                }
                if (changesMask[2])
                {
                    data.EmblemColor = packet.ReadInt32("EmblemColor", indexes);
                }
                if (changesMask[3])
                {
                    data.BorderStyle = packet.ReadInt32("BorderStyle", indexes);
                }
                if (changesMask[4])
                {
                    data.BorderColor = packet.ReadInt32("BorderColor", indexes);
                }
                if (changesMask[5])
                {
                    data.BackgroundColor = packet.ReadInt32("BackgroundColor", indexes);
                }
            }
            return data;
        }

        public override IPlayerData ReadCreatePlayerData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new PlayerData();
            packet.ResetBitReader();
            var hasDeclinedNames = false;
            data.DuelArbiter = packet.ReadPackedGuid128("DuelArbiter", indexes);
            data.WowAccount = packet.ReadPackedGuid128("WowAccount", indexes);
            data.BnetAccount = packet.ReadPackedGuid128("BnetAccount", indexes);
            data.GuildClubMemberID = packet.ReadUInt64("GuildClubMemberID", indexes);
            data.LootTargetGUID = packet.ReadPackedGuid128("LootTargetGUID", indexes);
            data.PlayerFlags = packet.ReadUInt32("PlayerFlags", indexes);
            data.PlayerFlagsEx = packet.ReadUInt32("PlayerFlagsEx", indexes);
            data.GuildRankID = packet.ReadUInt32("GuildRankID", indexes);
            data.GuildDeleteDate = packet.ReadUInt32("GuildDeleteDate", indexes);
            data.GuildLevel = packet.ReadInt32("GuildLevel", indexes);
            data.Customizations.Resize(packet.ReadUInt32());
            data.QaCustomizations.Resize(packet.ReadUInt32());
            for (var i = 0; i < 2; ++i)
            {
                data.PartyType[i] = packet.ReadByte("PartyType", indexes, i);
            }
            data.NativeSex = packet.ReadByte("NativeSex", indexes);
            data.Inebriation = packet.ReadByte("Inebriation", indexes);
            data.PvpTitle = packet.ReadByte("PvpTitle", indexes);
            data.ArenaFaction = packet.ReadByte("ArenaFaction", indexes);
            data.DuelTeam = packet.ReadUInt32("DuelTeam", indexes);
            data.GuildTimeStamp = packet.ReadInt32("GuildTimeStamp", indexes);
            if ((flags & UpdateFieldFlag.PartyMember) != UpdateFieldFlag.None)
            {
                for (var i = 0; i < 175; ++i)
                {
                    data.QuestLog[i] = ReadCreateQuestLog(packet, indexes, "QuestLog", i);
                }
                data.QuestSessionQuestLog.Resize(packet.ReadUInt32());
            }
            for (var i = 0; i < 19; ++i)
            {
                data.VisibleItems[i] = ReadCreateVisibleItem(packet, indexes, "VisibleItems", i);
            }
            data.PlayerTitle = packet.ReadInt32("PlayerTitle", indexes);
            data.FakeInebriation = packet.ReadInt32("FakeInebriation", indexes);
            data.VirtualPlayerRealm = packet.ReadUInt32("VirtualPlayerRealm", indexes);
            data.CurrentSpecID = packet.ReadUInt32("CurrentSpecID", indexes);
            data.CurrentCombatTraitConfigSubTreeID = packet.ReadInt32("CurrentCombatTraitConfigSubTreeID", indexes);
            data.TaxiMountAnimKitID = packet.ReadInt32("TaxiMountAnimKitID", indexes);
            for (var i = 0; i < 6; ++i)
            {
                data.AvgItemLevel[i] = packet.ReadSingle("AvgItemLevel", indexes, i);
            }
            data.CurrentBattlePetBreedQuality = packet.ReadByte("CurrentBattlePetBreedQuality", indexes);
            data.HonorLevel = packet.ReadInt32("HonorLevel", indexes);
            data.LogoutTime = packet.ReadInt64("LogoutTime", indexes);
            data.ArenaCooldowns.Resize(packet.ReadUInt32());
            for (var i = 0; i < 32; ++i)
            {
                data.ForcedReactions[i] = ReadCreateZonePlayerForcedReaction(packet, indexes, "ForcedReactions", i);
            }
            data.Field_1AC = packet.ReadInt32("Field_1AC", indexes);
            data.Field_1B0 = packet.ReadInt32("Field_1B0", indexes);
            data.CurrentBattlePetSpeciesID = packet.ReadInt32("CurrentBattlePetSpeciesID", indexes);
            data.PetNames.Resize(packet.ReadUInt32());
            data.CtrOptions = ReadCreateCTROptions(packet, indexes, "CtrOptions");
            data.CovenantID = packet.ReadInt32("CovenantID", indexes);
            data.SoulbindID = packet.ReadInt32("SoulbindID", indexes);
            data.SpectateTarget = packet.ReadPackedGuid128("SpectateTarget", indexes);
            data.Field_200 = packet.ReadInt32("Field_200", indexes);
            data.VisualItemReplacements.Resize(packet.ReadUInt32());
            for (var i = 0; i < 19; ++i)
            {
                data.Field_3120[i] = packet.ReadUInt32("Field_3120", indexes, i);
            }
            data.PersonalTabard = ReadCreateCustomTabardInfo(packet, indexes, "PersonalTabard");
            for (var i = 0; i < data.Customizations.Count; ++i)
            {
                data.Customizations[i] = ReadCreateChrCustomizationChoice(packet, indexes, "Customizations", i);
            }
            for (var i = 0; i < data.QaCustomizations.Count; ++i)
            {
                data.QaCustomizations[i] = ReadCreateChrCustomizationChoice(packet, indexes, "QaCustomizations", i);
            }
            if ((flags & UpdateFieldFlag.PartyMember) != UpdateFieldFlag.None)
            {
                for (var i = 0; i < data.QuestSessionQuestLog.Count; ++i)
                {
                    data.QuestSessionQuestLog[i] = ReadCreateQuestLog(packet, indexes, "QuestSessionQuestLog", i);
                }
            }
            for (var i = 0; i < data.ArenaCooldowns.Count; ++i)
            {
                data.ArenaCooldowns[i] = ReadCreateArenaCooldown(packet, indexes, "ArenaCooldowns", i);
            }
            for (var i = 0; i < data.VisualItemReplacements.Count; ++i)
            {
                data.VisualItemReplacements[i] = packet.ReadInt32("VisualItemReplacements", indexes, i);
            }
            packet.ResetBitReader();
            data.Name = new string('*', (int)packet.ReadBits(6));
            if ((flags & UpdateFieldFlag.PartyMember) != UpdateFieldFlag.None)
            {
                data.HasQuestSession = packet.ReadBit("HasQuestSession", indexes);
            }
            data.HasLevelLink = packet.ReadBit("HasLevelLink", indexes);
            hasDeclinedNames = packet.ReadBit("HasDeclinedNames", indexes);
            Substructures.MythicPlusHandler.ReadDungeonScoreSummary(packet, indexes, "DungeonScore");
            data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
            data.LeaverInfo = ReadCreateLeaverInfo(packet, indexes, "LeaverInfo");
            for (var i = 0; i < 16; ++i)
            {
                Substructures.ItemHandler.ReadItemInstance(packet, indexes, i, "VisibleEquipableSpells");
            }
            for (var i = 0; i < data.PetNames.Count; ++i)
            {
                data.PetNames[i] = ReadCreatePetCreatureName(packet, indexes, "PetNames", i);
            }
            if (hasDeclinedNames)
            {
                data.DeclinedNames = ReadCreateDeclinedNames(packet, indexes, "DeclinedNames");
            }
            return data;
        }

        public override IPlayerData ReadUpdatePlayerData(Packet packet, params object[] indexes)
        {
            var data = new PlayerData();
            packet.ResetBitReader();
            var rawChangesMask = new int[11];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(11);
            var maskMask = new BitArray(rawMaskMask);
            for (var i = 0; i < 11; ++i)
                if (maskMask[i])
                    rawChangesMask[i] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            var noQuestLogChangesMask = packet.ReadBit();
            var hasDeclinedNames = false;
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.HasQuestSession = packet.ReadBit("HasQuestSession", indexes);
                }
                if (changesMask[2])
                {
                    data.HasLevelLink = packet.ReadBit("HasLevelLink", indexes);
                }
                if (changesMask[3])
                {
                    data.Customizations.ReadUpdateMask(packet);
                }
                if (changesMask[4])
                {
                    data.QaCustomizations.ReadUpdateMask(packet);
                }
                if (changesMask[5])
                {
                    data.QuestSessionQuestLog.ReadUpdateMask(packet);
                }
                if (changesMask[6])
                {
                    data.ArenaCooldowns.ReadUpdateMask(packet);
                }
                if (changesMask[7])
                {
                    data.PetNames.ReadUpdateMask(packet);
                }
                if (changesMask[8])
                {
                    data.VisualItemReplacements.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[3])
                {
                    for (var i = 0; i < data.Customizations.Count; ++i)
                    {
                        if (data.Customizations.UpdateMask[i])
                        {
                            data.Customizations[i] = ReadUpdateChrCustomizationChoice(packet, indexes, "Customizations", i);
                        }
                    }
                }
                if (changesMask[4])
                {
                    for (var i = 0; i < data.QaCustomizations.Count; ++i)
                    {
                        if (data.QaCustomizations.UpdateMask[i])
                        {
                            data.QaCustomizations[i] = ReadUpdateChrCustomizationChoice(packet, indexes, "QaCustomizations", i);
                        }
                    }
                }
                if (changesMask[5])
                {
                    for (var i = 0; i < data.QuestSessionQuestLog.Count; ++i)
                    {
                        if (data.QuestSessionQuestLog.UpdateMask[i])
                        {
                            if (noQuestLogChangesMask)
                                data.QuestSessionQuestLog[i] = ReadCreateQuestLog(packet, indexes, "QuestSessionQuestLog", i);
                            else
                                data.QuestSessionQuestLog[i] = ReadUpdateQuestLog(packet, indexes, "QuestSessionQuestLog", i);
                        }
                    }
                }
                if (changesMask[6])
                {
                    for (var i = 0; i < data.ArenaCooldowns.Count; ++i)
                    {
                        if (data.ArenaCooldowns.UpdateMask[i])
                        {
                            data.ArenaCooldowns[i] = ReadUpdateArenaCooldown(packet, indexes, "ArenaCooldowns", i);
                        }
                    }
                }
                if (changesMask[8])
                {
                    for (var i = 0; i < data.VisualItemReplacements.Count; ++i)
                    {
                        if (data.VisualItemReplacements.UpdateMask[i])
                        {
                            data.VisualItemReplacements[i] = packet.ReadInt32("VisualItemReplacements", indexes, i);
                        }
                    }
                }
                if (changesMask[7])
                {
                    for (var i = 0; i < data.PetNames.Count; ++i)
                    {
                        if (data.PetNames.UpdateMask[i])
                        {
                            data.PetNames[i] = ReadUpdatePetCreatureName(packet, indexes, "PetNames", i);
                        }
                    }
                }
                if (changesMask[9])
                {
                    data.DuelArbiter = packet.ReadPackedGuid128("DuelArbiter", indexes);
                }
                if (changesMask[10])
                {
                    data.WowAccount = packet.ReadPackedGuid128("WowAccount", indexes);
                }
                if (changesMask[11])
                {
                    data.BnetAccount = packet.ReadPackedGuid128("BnetAccount", indexes);
                }
                if (changesMask[12])
                {
                    data.GuildClubMemberID = packet.ReadUInt64("GuildClubMemberID", indexes);
                }
                if (changesMask[13])
                {
                    data.LootTargetGUID = packet.ReadPackedGuid128("LootTargetGUID", indexes);
                }
                if (changesMask[14])
                {
                    data.PlayerFlags = packet.ReadUInt32("PlayerFlags", indexes);
                }
                if (changesMask[15])
                {
                    data.PlayerFlagsEx = packet.ReadUInt32("PlayerFlagsEx", indexes);
                }
                if (changesMask[16])
                {
                    data.GuildRankID = packet.ReadUInt32("GuildRankID", indexes);
                }
                if (changesMask[17])
                {
                    data.GuildDeleteDate = packet.ReadUInt32("GuildDeleteDate", indexes);
                }
                if (changesMask[18])
                {
                    data.GuildLevel = packet.ReadInt32("GuildLevel", indexes);
                }
                if (changesMask[19])
                {
                    data.NativeSex = packet.ReadByte("NativeSex", indexes);
                }
                if (changesMask[20])
                {
                    data.Inebriation = packet.ReadByte("Inebriation", indexes);
                }
                if (changesMask[21])
                {
                    data.PvpTitle = packet.ReadByte("PvpTitle", indexes);
                }
                if (changesMask[22])
                {
                    data.ArenaFaction = packet.ReadByte("ArenaFaction", indexes);
                }
                if (changesMask[23])
                {
                    data.DuelTeam = packet.ReadUInt32("DuelTeam", indexes);
                }
                if (changesMask[24])
                {
                    data.GuildTimeStamp = packet.ReadInt32("GuildTimeStamp", indexes);
                }
                if (changesMask[25])
                {
                    data.PlayerTitle = packet.ReadInt32("PlayerTitle", indexes);
                }
                if (changesMask[26])
                {
                    data.FakeInebriation = packet.ReadInt32("FakeInebriation", indexes);
                }
                if (changesMask[27])
                {
                    data.VirtualPlayerRealm = packet.ReadUInt32("VirtualPlayerRealm", indexes);
                }
                if (changesMask[28])
                {
                    data.CurrentSpecID = packet.ReadUInt32("CurrentSpecID", indexes);
                }
                if (changesMask[29])
                {
                    data.CurrentCombatTraitConfigSubTreeID = packet.ReadInt32("CurrentCombatTraitConfigSubTreeID", indexes);
                }
                if (changesMask[30])
                {
                    data.TaxiMountAnimKitID = packet.ReadInt32("TaxiMountAnimKitID", indexes);
                }
                if (changesMask[31])
                {
                    data.CurrentBattlePetBreedQuality = packet.ReadByte("CurrentBattlePetBreedQuality", indexes);
                }
            }
            if (changesMask[32])
            {
                if (changesMask[33])
                {
                    data.HonorLevel = packet.ReadInt32("HonorLevel", indexes);
                }
                if (changesMask[34])
                {
                    data.LogoutTime = packet.ReadInt64("LogoutTime", indexes);
                }
                if (changesMask[36])
                {
                    data.Field_1AC = packet.ReadInt32("Field_1AC", indexes);
                }
                if (changesMask[37])
                {
                    data.Field_1B0 = packet.ReadInt32("Field_1B0", indexes);
                }
                if (changesMask[38])
                {
                    data.CurrentBattlePetSpeciesID = packet.ReadInt32("CurrentBattlePetSpeciesID", indexes);
                }
                if (changesMask[39])
                {
                    data.CtrOptions = ReadUpdateCTROptions(packet, indexes, "CtrOptions");
                }
                if (changesMask[40])
                {
                    data.CovenantID = packet.ReadInt32("CovenantID", indexes);
                }
                if (changesMask[41])
                {
                    data.SoulbindID = packet.ReadInt32("SoulbindID", indexes);
                }
                if (changesMask[44])
                {
                    data.SpectateTarget = packet.ReadPackedGuid128("SpectateTarget", indexes);
                }
                if (changesMask[45])
                {
                    data.Field_200 = packet.ReadInt32("Field_200", indexes);
                }
                if (changesMask[47])
                {
                    data.PersonalTabard = ReadUpdateCustomTabardInfo(packet, indexes, "PersonalTabard");
                }
                if (changesMask[35])
                {
                    data.Name = new string('*', (int)packet.ReadBits(6));
                }
                hasDeclinedNames = packet.ReadBit("HasDeclinedNames", indexes);
            packet.ResetBitReader();
                if (changesMask[42])
                {
                    Substructures.MythicPlusHandler.ReadDungeonScoreSummary(packet, indexes, "DungeonScore");
                }
                if (changesMask[35])
                {
                    data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
                }
                if (changesMask[43])
                {
                    data.LeaverInfo = ReadUpdateLeaverInfo(packet, indexes, "LeaverInfo");
                }
                if (changesMask[46])
                {
                    if (hasDeclinedNames)
                    {
                        data.DeclinedNames = ReadUpdateDeclinedNames(packet, indexes, "DeclinedNames");
                    }
                }
            }
            if (changesMask[48])
            {
                for (var i = 0; i < 2; ++i)
                {
                    if (changesMask[49 + i])
                    {
                        data.PartyType[i] = packet.ReadByte("PartyType", indexes, i);
                    }
                }
            }
            if (changesMask[51])
            {
                for (var i = 0; i < 175; ++i)
                {
                    if (changesMask[52 + i])
                    {
                        if (noQuestLogChangesMask)
                            data.QuestLog[i] = ReadCreateQuestLog(packet, indexes, "QuestLog", i);
                        else
                            data.QuestLog[i] = ReadUpdateQuestLog(packet, indexes, "QuestLog", i);
                    }
                }
            }
            if (changesMask[227])
            {
                for (var i = 0; i < 19; ++i)
                {
                    if (changesMask[228 + i])
                    {
                        data.VisibleItems[i] = ReadUpdateVisibleItem(packet, indexes, "VisibleItems", i);
                    }
                }
            }
            if (changesMask[247])
            {
                for (var i = 0; i < 6; ++i)
                {
                    if (changesMask[248 + i])
                    {
                        data.AvgItemLevel[i] = packet.ReadSingle("AvgItemLevel", indexes, i);
                    }
                }
            }
            if (changesMask[254])
            {
                for (var i = 0; i < 32; ++i)
                {
                    if (changesMask[255 + i])
                    {
                        data.ForcedReactions[i] = ReadUpdateZonePlayerForcedReaction(packet, indexes, "ForcedReactions", i);
                    }
                }
            }
            if (changesMask[304])
            {
                for (var i = 0; i < 19; ++i)
                {
                    if (changesMask[305 + i])
                    {
                        data.Field_3120[i] = packet.ReadUInt32("Field_3120", indexes, i);
                    }
                }
            }
            if (changesMask[287])
            {
                for (var i = 0; i < 16; ++i)
                {
                    if (changesMask[288 + i])
                    {
                        Substructures.ItemHandler.ReadItemInstance(packet, indexes, i, "VisibleEquipableSpells");
                    }
                }
            }
            return data;
        }

        public static ISkillInfo ReadCreateSkillInfo(Packet packet, params object[] indexes)
        {
            var data = new SkillInfo();
            packet.ResetBitReader();
            for (var i = 0; i < 256; ++i)
            {
                data.SkillLineID[i] = packet.ReadUInt16("SkillLineID", indexes, i);
                data.SkillStep[i] = packet.ReadUInt16("SkillStep", indexes, i);
                data.SkillRank[i] = packet.ReadUInt16("SkillRank", indexes, i);
                data.SkillStartingRank[i] = packet.ReadUInt16("SkillStartingRank", indexes, i);
                data.SkillMaxRank[i] = packet.ReadUInt16("SkillMaxRank", indexes, i);
                data.SkillTempBonus[i] = packet.ReadInt16("SkillTempBonus", indexes, i);
                data.SkillPermBonus[i] = packet.ReadUInt16("SkillPermBonus", indexes, i);
            }
            return data;
        }

        public static ISkillInfo ReadUpdateSkillInfo(Packet packet, params object[] indexes)
        {
            var data = new SkillInfo();
            packet.ResetBitReader();
            var rawChangesMask = new int[57];
            var rawMaskMask = new int[2];
            for (var i = 0; i < 1; ++i)
                rawMaskMask[i] = packet.ReadInt32();
            rawMaskMask[1] = (int)packet.ReadBits(25);
            var maskMask = new BitArray(rawMaskMask);
            for (var i = 0; i < 57; ++i)
                if (maskMask[i])
                    rawChangesMask[i] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                for (var i = 0; i < 256; ++i)
                {
                    if (changesMask[1 + i])
                    {
                        data.SkillLineID[i] = packet.ReadUInt16("SkillLineID", indexes, i);
                    }
                    if (changesMask[257 + i])
                    {
                        data.SkillStep[i] = packet.ReadUInt16("SkillStep", indexes, i);
                    }
                    if (changesMask[513 + i])
                    {
                        data.SkillRank[i] = packet.ReadUInt16("SkillRank", indexes, i);
                    }
                    if (changesMask[769 + i])
                    {
                        data.SkillStartingRank[i] = packet.ReadUInt16("SkillStartingRank", indexes, i);
                    }
                    if (changesMask[1025 + i])
                    {
                        data.SkillMaxRank[i] = packet.ReadUInt16("SkillMaxRank", indexes, i);
                    }
                    if (changesMask[1281 + i])
                    {
                        data.SkillTempBonus[i] = packet.ReadInt16("SkillTempBonus", indexes, i);
                    }
                    if (changesMask[1537 + i])
                    {
                        data.SkillPermBonus[i] = packet.ReadUInt16("SkillPermBonus", indexes, i);
                    }
                }
            }
            return data;
        }

        public static IBitVector ReadCreateBitVector(Packet packet, params object[] indexes)
        {
            var data = new BitVector();
            packet.ResetBitReader();
            data.Values.Resize(packet.ReadUInt32());
            for (var i = 0; i < data.Values.Count; ++i)
            {
                data.Values[i] = packet.ReadUInt64("Values", indexes, i);
            }
            return data;
        }

        public static IBitVector ReadUpdateBitVector(Packet packet, params object[] indexes)
        {
            var data = new BitVector();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(2);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Values.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    for (var i = 0; i < data.Values.Count; ++i)
                    {
                        if (data.Values.UpdateMask[i])
                        {
                            data.Values[i] = packet.ReadUInt64("Values", indexes, i);
                        }
                    }
                }
            }
            return data;
        }

        public static IBitVectors ReadCreateBitVectors(Packet packet, params object[] indexes)
        {
            var data = new BitVectors();
            packet.ResetBitReader();
            for (var i = 0; i < 13; ++i)
            {
                data.Values[i] = ReadCreateBitVector(packet, indexes, "Values", i);
            }
            return data;
        }

        public static IBitVectors ReadUpdateBitVectors(Packet packet, params object[] indexes)
        {
            var data = new BitVectors();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(1);
            var maskMask = new BitArray(rawMaskMask);
            if (maskMask[0])
                rawChangesMask[0] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                for (var i = 0; i < 13; ++i)
                {
                    if (changesMask[1 + i])
                    {
                        data.Values[i] = ReadUpdateBitVector(packet, indexes, "Values", i);
                    }
                }
            }
            return data;
        }

        public static IPlayerDataElement ReadCreatePlayerDataElement(Packet packet, params object[] indexes)
        {
            var data = new PlayerDataElement();
            packet.ResetBitReader();
            data.Type = packet.ReadUInt32("Type", indexes);
            if (data.Type == 1)
            {
                data.FloatValue = packet.ReadSingle("FloatValue", indexes);
            }
            if (data.Type == 0)
            {
                data.Int64Value = packet.ReadInt64("Int64Value", indexes);
            }
            return data;
        }

        public static IPlayerDataElement ReadUpdatePlayerDataElement(Packet packet, params object[] indexes)
        {
            var data = new PlayerDataElement();
            packet.ResetBitReader();
            data.Type = packet.ReadUInt32("Type", indexes);
            if (data.Type == 1)
            {
                data.FloatValue = packet.ReadSingle("FloatValue", indexes);
            }
            if (data.Type == 0)
            {
                data.Int64Value = packet.ReadInt64("Int64Value", indexes);
            }
            return data;
        }

        public static IRestInfo ReadCreateRestInfo(Packet packet, params object[] indexes)
        {
            var data = new RestInfo();
            packet.ResetBitReader();
            data.Threshold = packet.ReadUInt32("Threshold", indexes);
            data.StateID = packet.ReadByte("StateID", indexes);
            return data;
        }

        public static IRestInfo ReadUpdateRestInfo(Packet packet, params object[] indexes)
        {
            var data = new RestInfo();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Threshold = packet.ReadUInt32("Threshold", indexes);
                }
                if (changesMask[2])
                {
                    data.StateID = packet.ReadByte("StateID", indexes);
                }
            }
            return data;
        }

        public static IPVPInfo ReadCreatePVPInfo(Packet packet, params object[] indexes)
        {
            var data = new PVPInfo();
            packet.ResetBitReader();
            data.Bracket = packet.ReadSByte("Bracket", indexes);
            data.PvpRatingID = packet.ReadInt32("PvpRatingID", indexes);
            data.WeeklyPlayed = packet.ReadUInt32("WeeklyPlayed", indexes);
            data.WeeklyWon = packet.ReadUInt32("WeeklyWon", indexes);
            data.SeasonPlayed = packet.ReadUInt32("SeasonPlayed", indexes);
            data.SeasonWon = packet.ReadUInt32("SeasonWon", indexes);
            data.Rating = packet.ReadUInt32("Rating", indexes);
            data.WeeklyBestRating = packet.ReadUInt32("WeeklyBestRating", indexes);
            data.SeasonBestRating = packet.ReadUInt32("SeasonBestRating", indexes);
            data.PvpTierID = packet.ReadUInt32("PvpTierID", indexes);
            data.WeeklyBestWinPvpTierID = packet.ReadUInt32("WeeklyBestWinPvpTierID", indexes);
            data.Field_28 = packet.ReadUInt32("Field_28", indexes);
            data.Field_2C = packet.ReadUInt32("Field_2C", indexes);
            data.WeeklyRoundsPlayed = packet.ReadUInt32("WeeklyRoundsPlayed", indexes);
            data.WeeklyRoundsWon = packet.ReadUInt32("WeeklyRoundsWon", indexes);
            data.SeasonRoundsPlayed = packet.ReadUInt32("SeasonRoundsPlayed", indexes);
            data.SeasonRoundsWon = packet.ReadUInt32("SeasonRoundsWon", indexes);
            data.Disqualified = packet.ReadBit("Disqualified", indexes);
            return data;
        }

        public static IPVPInfo ReadUpdatePVPInfo(Packet packet, params object[] indexes)
        {
            var data = new PVPInfo();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(19);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Disqualified = packet.ReadBit("Disqualified", indexes);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[2])
                {
                    data.Bracket = packet.ReadSByte("Bracket", indexes);
                }
                if (changesMask[3])
                {
                    data.PvpRatingID = packet.ReadInt32("PvpRatingID", indexes);
                }
                if (changesMask[4])
                {
                    data.WeeklyPlayed = packet.ReadUInt32("WeeklyPlayed", indexes);
                }
                if (changesMask[5])
                {
                    data.WeeklyWon = packet.ReadUInt32("WeeklyWon", indexes);
                }
                if (changesMask[6])
                {
                    data.SeasonPlayed = packet.ReadUInt32("SeasonPlayed", indexes);
                }
                if (changesMask[7])
                {
                    data.SeasonWon = packet.ReadUInt32("SeasonWon", indexes);
                }
                if (changesMask[8])
                {
                    data.Rating = packet.ReadUInt32("Rating", indexes);
                }
                if (changesMask[9])
                {
                    data.WeeklyBestRating = packet.ReadUInt32("WeeklyBestRating", indexes);
                }
                if (changesMask[10])
                {
                    data.SeasonBestRating = packet.ReadUInt32("SeasonBestRating", indexes);
                }
                if (changesMask[11])
                {
                    data.PvpTierID = packet.ReadUInt32("PvpTierID", indexes);
                }
                if (changesMask[12])
                {
                    data.WeeklyBestWinPvpTierID = packet.ReadUInt32("WeeklyBestWinPvpTierID", indexes);
                }
                if (changesMask[13])
                {
                    data.Field_28 = packet.ReadUInt32("Field_28", indexes);
                }
                if (changesMask[14])
                {
                    data.Field_2C = packet.ReadUInt32("Field_2C", indexes);
                }
                if (changesMask[15])
                {
                    data.WeeklyRoundsPlayed = packet.ReadUInt32("WeeklyRoundsPlayed", indexes);
                }
                if (changesMask[16])
                {
                    data.WeeklyRoundsWon = packet.ReadUInt32("WeeklyRoundsWon", indexes);
                }
                if (changesMask[17])
                {
                    data.SeasonRoundsPlayed = packet.ReadUInt32("SeasonRoundsPlayed", indexes);
                }
                if (changesMask[18])
                {
                    data.SeasonRoundsWon = packet.ReadUInt32("SeasonRoundsWon", indexes);
                }
            }
            return data;
        }

        public static ICharacterRestriction ReadCreateCharacterRestriction(Packet packet, params object[] indexes)
        {
            var data = new CharacterRestriction();
            packet.ResetBitReader();
            data.Field_0 = packet.ReadInt32("Field_0", indexes);
            data.Field_4 = packet.ReadInt32("Field_4", indexes);
            data.Field_8 = packet.ReadInt32("Field_8", indexes);
            data.Type = packet.ReadBits("Type", 5, indexes);
            return data;
        }

        public static ICharacterRestriction ReadUpdateCharacterRestriction(Packet packet, params object[] indexes)
        {
            var data = new CharacterRestriction();
            packet.ResetBitReader();
            data.Field_0 = packet.ReadInt32("Field_0", indexes);
            data.Field_4 = packet.ReadInt32("Field_4", indexes);
            data.Field_8 = packet.ReadInt32("Field_8", indexes);
            data.Type = packet.ReadBits("Type", 5, indexes);
            return data;
        }

        public static ISpellPctModByLabel ReadCreateSpellPctModByLabel(Packet packet, params object[] indexes)
        {
            var data = new SpellPctModByLabel();
            packet.ResetBitReader();
            data.ModIndex = packet.ReadInt32("ModIndex", indexes);
            data.ModifierValue = packet.ReadSingle("ModifierValue", indexes);
            data.LabelID = packet.ReadInt32("LabelID", indexes);
            return data;
        }

        public static ISpellPctModByLabel ReadUpdateSpellPctModByLabel(Packet packet, params object[] indexes)
        {
            var data = new SpellPctModByLabel();
            packet.ResetBitReader();
            data.ModIndex = packet.ReadInt32("ModIndex", indexes);
            data.ModifierValue = packet.ReadSingle("ModifierValue", indexes);
            data.LabelID = packet.ReadInt32("LabelID", indexes);
            return data;
        }

        public static ISpellFlatModByLabel ReadCreateSpellFlatModByLabel(Packet packet, params object[] indexes)
        {
            var data = new SpellFlatModByLabel();
            packet.ResetBitReader();
            data.ModIndex = packet.ReadInt32("ModIndex", indexes);
            data.ModifierValue = packet.ReadInt32("ModifierValue", indexes);
            data.LabelID = packet.ReadInt32("LabelID", indexes);
            return data;
        }

        public static ISpellFlatModByLabel ReadUpdateSpellFlatModByLabel(Packet packet, params object[] indexes)
        {
            var data = new SpellFlatModByLabel();
            packet.ResetBitReader();
            data.ModIndex = packet.ReadInt32("ModIndex", indexes);
            data.ModifierValue = packet.ReadInt32("ModifierValue", indexes);
            data.LabelID = packet.ReadInt32("LabelID", indexes);
            return data;
        }

        public static ICompletedProject ReadCreateCompletedProject(Packet packet, params object[] indexes)
        {
            var data = new CompletedProject();
            packet.ResetBitReader();
            data.FirstCompleted = packet.ReadInt64("FirstCompleted", indexes);
            data.ProjectID = packet.ReadUInt32("ProjectID", indexes);
            data.CompletionCount = packet.ReadUInt32("CompletionCount", indexes);
            return data;
        }

        public static ICompletedProject ReadUpdateCompletedProject(Packet packet, params object[] indexes)
        {
            var data = new CompletedProject();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(4);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.FirstCompleted = packet.ReadInt64("FirstCompleted", indexes);
                }
                if (changesMask[2])
                {
                    data.ProjectID = packet.ReadUInt32("ProjectID", indexes);
                }
                if (changesMask[3])
                {
                    data.CompletionCount = packet.ReadUInt32("CompletionCount", indexes);
                }
            }
            return data;
        }

        public static IResearchHistory ReadCreateResearchHistory(Packet packet, params object[] indexes)
        {
            var data = new ResearchHistory();
            packet.ResetBitReader();
            data.CompletedProjects.Resize(packet.ReadUInt32());
            for (var i = 0; i < data.CompletedProjects.Count; ++i)
            {
                data.CompletedProjects[i] = ReadCreateCompletedProject(packet, indexes, "CompletedProjects", i);
            }
            return data;
        }

        public static IResearchHistory ReadUpdateResearchHistory(Packet packet, params object[] indexes)
        {
            var data = new ResearchHistory();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(2);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.CompletedProjects.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    for (var i = 0; i < data.CompletedProjects.Count; ++i)
                    {
                        if (data.CompletedProjects.UpdateMask[i])
                        {
                            data.CompletedProjects[i] = ReadUpdateCompletedProject(packet, indexes, "CompletedProjects", i);
                        }
                    }
                }
            }
            return data;
        }

        public static IMawPower ReadCreateMawPower(Packet packet, params object[] indexes)
        {
            var data = new MawPower();
            packet.ResetBitReader();
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.MawPowerID = packet.ReadInt32("MawPowerID", indexes);
            data.Stacks = packet.ReadInt32("Stacks", indexes);
            return data;
        }

        public static IMawPower ReadUpdateMawPower(Packet packet, params object[] indexes)
        {
            var data = new MawPower();
            packet.ResetBitReader();
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.MawPowerID = packet.ReadInt32("MawPowerID", indexes);
            data.Stacks = packet.ReadInt32("Stacks", indexes);
            return data;
        }

        public static IMultiFloorExplore ReadCreateMultiFloorExplore(Packet packet, params object[] indexes)
        {
            var data = new MultiFloorExplore();
            packet.ResetBitReader();
            data.WorldMapOverlayIDs = new int[packet.ReadUInt32()];
            for (var i = 0; i < data.WorldMapOverlayIDs.Length; ++i)
            {
                data.WorldMapOverlayIDs[i] = packet.ReadInt32("WorldMapOverlayIDs", indexes, i);
            }
            return data;
        }

        public static IMultiFloorExplore ReadUpdateMultiFloorExplore(Packet packet, params object[] indexes)
        {
            var data = new MultiFloorExplore();
            packet.ResetBitReader();
            data.WorldMapOverlayIDs = new int[packet.ReadUInt32()];
            for (var i = 0; i < data.WorldMapOverlayIDs.Length; ++i)
            {
                data.WorldMapOverlayIDs[i] = packet.ReadInt32("WorldMapOverlayIDs", indexes, i);
            }
            packet.ResetBitReader();
            return data;
        }

        public static IRecipeProgressionInfo ReadCreateRecipeProgressionInfo(Packet packet, params object[] indexes)
        {
            var data = new RecipeProgressionInfo();
            packet.ResetBitReader();
            data.RecipeProgressionGroupID = packet.ReadUInt16("RecipeProgressionGroupID", indexes);
            data.Experience = packet.ReadUInt16("Experience", indexes);
            return data;
        }

        public static IRecipeProgressionInfo ReadUpdateRecipeProgressionInfo(Packet packet, params object[] indexes)
        {
            var data = new RecipeProgressionInfo();
            packet.ResetBitReader();
            data.RecipeProgressionGroupID = packet.ReadUInt16("RecipeProgressionGroupID", indexes);
            data.Experience = packet.ReadUInt16("Experience", indexes);
            return data;
        }

        public static IActivePlayerUnk901 ReadCreateActivePlayerUnk901(Packet packet, params object[] indexes)
        {
            var data = new ActivePlayerUnk901();
            packet.ResetBitReader();
            data.Field_0 = packet.ReadPackedGuid128("Field_0", indexes);
            data.Field_10 = packet.ReadInt32("Field_10", indexes);
            return data;
        }

        public static IActivePlayerUnk901 ReadUpdateActivePlayerUnk901(Packet packet, params object[] indexes)
        {
            var data = new ActivePlayerUnk901();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Field_0 = packet.ReadPackedGuid128("Field_0", indexes);
                }
                if (changesMask[2])
                {
                    data.Field_10 = packet.ReadInt32("Field_10", indexes);
                }
            }
            return data;
        }

        public static IQuestSession ReadCreateQuestSession(Packet packet, params object[] indexes)
        {
            var data = new QuestSession();
            packet.ResetBitReader();
            data.Owner = packet.ReadPackedGuid128("Owner", indexes);
            data.QuestCompleted = ReadCreateBitVector(packet, indexes, "QuestCompleted");
            return data;
        }

        public static IQuestSession ReadUpdateQuestSession(Packet packet, params object[] indexes)
        {
            var data = new QuestSession();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Owner = packet.ReadPackedGuid128("Owner", indexes);
                }
                if (changesMask[2])
                {
                    data.QuestCompleted = ReadUpdateBitVector(packet, indexes, "QuestCompleted");
                }
            }
            return data;
        }

        public static IReplayedQuest ReadCreateReplayedQuest(Packet packet, params object[] indexes)
        {
            var data = new ReplayedQuest();
            packet.ResetBitReader();
            data.QuestID = packet.ReadInt32("QuestID", indexes);
            data.ReplayTime = packet.ReadUInt32("ReplayTime", indexes);
            return data;
        }

        public static IReplayedQuest ReadUpdateReplayedQuest(Packet packet, params object[] indexes)
        {
            var data = new ReplayedQuest();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.QuestID = packet.ReadInt32("QuestID", indexes);
                }
                if (changesMask[2])
                {
                    data.ReplayTime = packet.ReadUInt32("ReplayTime", indexes);
                }
            }
            return data;
        }

        public static ITraitEntry ReadCreateTraitEntry(Packet packet, params object[] indexes)
        {
            var data = new TraitEntry();
            packet.ResetBitReader();
            data.TraitNodeID = packet.ReadInt32("TraitNodeID", indexes);
            data.TraitNodeEntryID = packet.ReadInt32("TraitNodeEntryID", indexes);
            data.Rank = packet.ReadInt32("Rank", indexes);
            data.GrantedRanks = packet.ReadInt32("GrantedRanks", indexes);
            data.BonusRanks = packet.ReadInt32("BonusRanks", indexes);
            return data;
        }

        public static ITraitEntry ReadUpdateTraitEntry(Packet packet, params object[] indexes)
        {
            var data = new TraitEntry();
            packet.ResetBitReader();
            data.TraitNodeID = packet.ReadInt32("TraitNodeID", indexes);
            data.TraitNodeEntryID = packet.ReadInt32("TraitNodeEntryID", indexes);
            data.Rank = packet.ReadInt32("Rank", indexes);
            data.GrantedRanks = packet.ReadInt32("GrantedRanks", indexes);
            data.BonusRanks = packet.ReadInt32("BonusRanks", indexes);
            return data;
        }

        public static ITraitSubTreeCache ReadCreateTraitSubTreeCache(Packet packet, params object[] indexes)
        {
            var data = new TraitSubTreeCache();
            packet.ResetBitReader();
            data.TraitSubTreeID = packet.ReadInt32("TraitSubTreeID", indexes);
            data.Entries = new ITraitEntry[packet.ReadUInt32()];
            for (var i = 0; i < data.Entries.Length; ++i)
            {
                data.Entries[i] = ReadCreateTraitEntry(packet, indexes, "Entries", i);
            }
            data.Active = packet.ReadBits("Active", 1, indexes);
            return data;
        }

        public static ITraitSubTreeCache ReadUpdateTraitSubTreeCache(Packet packet, params object[] indexes)
        {
            var data = new TraitSubTreeCache();
            packet.ResetBitReader();
            data.TraitSubTreeID = packet.ReadInt32("TraitSubTreeID", indexes);
            data.Entries = new ITraitEntry[packet.ReadUInt32()];
            for (var i = 0; i < data.Entries.Length; ++i)
            {
                data.Entries[i] = ReadUpdateTraitEntry(packet, indexes, "Entries", i);
            }
            packet.ResetBitReader();
            data.Active = packet.ReadBits("Active", 1, indexes);
            return data;
        }

        public static ITraitConfig ReadCreateTraitConfig(Packet packet, params object[] indexes)
        {
            var data = new TraitConfig();
            packet.ResetBitReader();
            data.ID = packet.ReadInt32("ID", indexes);
            data.Type = packet.ReadInt32("Type", indexes);
            data.Entries.Resize(packet.ReadUInt32());
            data.SubTrees.Resize(packet.ReadUInt32());
            if (data.Type == 2)
            {
                data.SkillLineID = packet.ReadInt32("SkillLineID", indexes);
            }
            if (data.Type == 1)
            {
                data.ChrSpecializationID = packet.ReadInt32("ChrSpecializationID", indexes);
                data.CombatConfigFlags = packet.ReadInt32("CombatConfigFlags", indexes);
                data.LocalIdentifier = packet.ReadInt32("LocalIdentifier", indexes);
            }
            if (data.Type == 3)
            {
                data.TraitSystemID = packet.ReadInt32("TraitSystemID", indexes);
                data.VariationID = packet.ReadInt32("VariationID", indexes);
            }
            for (var i = 0; i < data.Entries.Count; ++i)
            {
                data.Entries[i] = ReadCreateTraitEntry(packet, indexes, "Entries", i);
            }
            data.Name = new string('*', (int)packet.ReadBits(9));
            for (var i = 0; i < data.SubTrees.Count; ++i)
            {
                data.SubTrees[i] = ReadCreateTraitSubTreeCache(packet, indexes, "SubTrees", i);
            }
            data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
            return data;
        }

        public static ITraitConfig ReadUpdateTraitConfig(Packet packet, params object[] indexes)
        {
            var data = new TraitConfig();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(15);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Entries.ReadUpdateMask(packet);
                }
                if (changesMask[2])
                {
                    data.SubTrees.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    for (var i = 0; i < data.Entries.Count; ++i)
                    {
                        if (data.Entries.UpdateMask[i])
                        {
                            data.Entries[i] = ReadUpdateTraitEntry(packet, indexes, "Entries", i);
                        }
                    }
                }
                if (changesMask[2])
                {
                    for (var i = 0; i < data.SubTrees.Count; ++i)
                    {
                        if (data.SubTrees.UpdateMask[i])
                        {
                            data.SubTrees[i] = ReadUpdateTraitSubTreeCache(packet, indexes, "SubTrees", i);
                        }
                    }
                }
                if (changesMask[3])
                {
                    data.ID = packet.ReadInt32("ID", indexes);
                }
            }
            if (changesMask[4])
            {
                if (changesMask[6])
                {
                    data.Type = packet.ReadInt32("Type", indexes);
                }
                if (changesMask[7])
                {
                    if (data.Type == 2)
                    {
                        data.SkillLineID = packet.ReadInt32("SkillLineID", indexes);
                    }
                }
            }
            if (changesMask[8])
            {
                if (changesMask[9])
                {
                    if (data.Type == 1)
                    {
                        data.ChrSpecializationID = packet.ReadInt32("ChrSpecializationID", indexes);
                    }
                }
                if (changesMask[10])
                {
                    if (data.Type == 1)
                    {
                        data.CombatConfigFlags = packet.ReadInt32("CombatConfigFlags", indexes);
                    }
                }
                if (changesMask[11])
                {
                    if (data.Type == 1)
                    {
                        data.LocalIdentifier = packet.ReadInt32("LocalIdentifier", indexes);
                    }
                }
            }
            if (changesMask[12])
            {
                if (changesMask[13])
                {
                    if (data.Type == 3)
                    {
                        data.TraitSystemID = packet.ReadInt32("TraitSystemID", indexes);
                    }
                }
                if (changesMask[14])
                {
                    if (data.Type == 3)
                    {
                        data.VariationID = packet.ReadInt32("VariationID", indexes);
                    }
                }
            }
            if (changesMask[4])
            {
                if (changesMask[5])
                {
                    data.Name = new string('*', (int)packet.ReadBits(9));
                    data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
                }
            }
            return data;
        }

        public static ICraftingOrderItem ReadCreateCraftingOrderItem(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrderItem();
            packet.ResetBitReader();
            var hasDataSlotIndex = false;
            data.Field_0 = packet.ReadUInt64("Field_0", indexes);
            data.ItemGUID = packet.ReadPackedGuid128("ItemGUID", indexes);
            data.OwnerGUID = packet.ReadPackedGuid128("OwnerGUID", indexes);
            data.ItemID = packet.ReadInt32("ItemID", indexes);
            data.Quantity = packet.ReadUInt32("Quantity", indexes);
            data.ReagentQuality = packet.ReadInt32("ReagentQuality", indexes);
            hasDataSlotIndex = packet.ReadBit("HasDataSlotIndex", indexes);
            packet.ResetBitReader();
            if (hasDataSlotIndex)
            {
                data.DataSlotIndex = packet.ReadByte("DataSlotIndex", indexes);
            }
            return data;
        }

        public static ICraftingOrderItem ReadUpdateCraftingOrderItem(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrderItem();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(7);
            var changesMask = new BitArray(rawChangesMask);

            var hasDataSlotIndex = false;
            packet.ResetBitReader();
            if (changesMask[0])
            {
                data.Field_0 = packet.ReadUInt64("Field_0", indexes);
            }
            if (changesMask[1])
            {
                data.ItemGUID = packet.ReadPackedGuid128("ItemGUID", indexes);
            }
            if (changesMask[2])
            {
                data.OwnerGUID = packet.ReadPackedGuid128("OwnerGUID", indexes);
            }
            if (changesMask[3])
            {
                data.ItemID = packet.ReadInt32("ItemID", indexes);
            }
            if (changesMask[4])
            {
                data.Quantity = packet.ReadUInt32("Quantity", indexes);
            }
            if (changesMask[5])
            {
                data.ReagentQuality = packet.ReadInt32("ReagentQuality", indexes);
            }
            hasDataSlotIndex = packet.ReadBit("HasDataSlotIndex", indexes);
            packet.ResetBitReader();
            if (changesMask[6])
            {
                if (hasDataSlotIndex)
                {
                    data.DataSlotIndex = packet.ReadByte("DataSlotIndex", indexes);
                }
            }
            return data;
        }

        public static ICraftingOrderCustomer ReadCreateCraftingOrderCustomer(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrderCustomer();
            packet.ResetBitReader();
            data.CustomerGUID = packet.ReadPackedGuid128("CustomerGUID", indexes);
            data.CustomerAccountGUID = packet.ReadPackedGuid128("CustomerAccountGUID", indexes);
            return data;
        }

        public static ICraftingOrderCustomer ReadUpdateCraftingOrderCustomer(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrderCustomer();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(2);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                data.CustomerGUID = packet.ReadPackedGuid128("CustomerGUID", indexes);
            }
            if (changesMask[1])
            {
                data.CustomerAccountGUID = packet.ReadPackedGuid128("CustomerAccountGUID", indexes);
            }
            return data;
        }

        public static ICraftingOrderNpcCustomer ReadCreateCraftingOrderNpcCustomer(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrderNpcCustomer();
            packet.ResetBitReader();
            data.NpcCraftingOrderCustomerID = packet.ReadInt64("NpcCraftingOrderCustomerID", indexes);
            data.Field_8 = packet.ReadInt32("Field_8", indexes);
            return data;
        }

        public static ICraftingOrderNpcCustomer ReadUpdateCraftingOrderNpcCustomer(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrderNpcCustomer();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(2);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                data.NpcCraftingOrderCustomerID = packet.ReadInt64("NpcCraftingOrderCustomerID", indexes);
            }
            if (changesMask[1])
            {
                data.Field_8 = packet.ReadInt32("Field_8", indexes);
            }
            return data;
        }

        public static ICraftingOrderData ReadCreateCraftingOrderData(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrderData();
            packet.ResetBitReader();
            var hasCustomer = false;
            var hasNpcCustomer = false;
            var hasOutputItem = false;
            var hasOutputItemData = false;
            data.Field_0 = packet.ReadInt32("Field_0", indexes);
            data.OrderID = packet.ReadUInt64("OrderID", indexes);
            data.SkillLineAbilityID = packet.ReadInt32("SkillLineAbilityID", indexes);
            data.OrderState = packet.ReadInt32("OrderState", indexes);
            data.OrderType = packet.ReadByte("OrderType", indexes);
            data.MinQuality = packet.ReadByte("MinQuality", indexes);
            data.ExpirationTime = packet.ReadInt64("ExpirationTime", indexes);
            data.ClaimEndTime = packet.ReadInt64("ClaimEndTime", indexes);
            data.TipAmount = packet.ReadInt64("TipAmount", indexes);
            data.ConsortiumCut = packet.ReadInt64("ConsortiumCut", indexes);
            data.Flags = packet.ReadUInt32("Flags", indexes);
            data.CrafterGUID = packet.ReadPackedGuid128("CrafterGUID", indexes);
            data.PersonalCrafterGUID = packet.ReadPackedGuid128("PersonalCrafterGUID", indexes);
            data.NpcCraftingOrderSetID = packet.ReadInt32("NpcCraftingOrderSetID", indexes);
            data.NpcTreasureID = packet.ReadInt32("NpcTreasureID", indexes);
            data.Reagents.Resize(packet.ReadUInt32());
            data.CustomerNotes = new string('*', (int)packet.ReadBits(10));
            hasCustomer = packet.ReadBit("HasCustomer", indexes);
            hasNpcCustomer = packet.ReadBit("HasNpcCustomer", indexes);
            hasOutputItem = packet.ReadBit("HasOutputItem", indexes);
            hasOutputItemData = packet.ReadBit("HasOutputItemData", indexes);
            packet.ResetBitReader();
            for (var i = 0; i < data.Reagents.Count; ++i)
            {
                data.Reagents[i] = ReadCreateCraftingOrderItem(packet, indexes, "Reagents", i);
            }
            data.CustomerNotes = packet.ReadWoWString("CustomerNotes", data.CustomerNotes.Length, indexes);
            if (hasCustomer)
            {
                data.Customer = ReadCreateCraftingOrderCustomer(packet, indexes, "Customer");
            }
            if (hasNpcCustomer)
            {
                data.NpcCustomer = ReadCreateCraftingOrderNpcCustomer(packet, indexes, "NpcCustomer");
            }
            if (hasOutputItem)
            {
                data.OutputItem = ReadCreateCraftingOrderItem(packet, indexes, "OutputItem");
            }
            if (hasOutputItemData)
            {
                Substructures.ItemHandler.ReadItemInstance(packet, indexes, "OutputItemData");
            }
            return data;
        }

        public static ICraftingOrderData ReadUpdateCraftingOrderData(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrderData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(26);
            var changesMask = new BitArray(rawChangesMask);

            var hasCustomer = false;
            var hasNpcCustomer = false;
            var hasOutputItem = false;
            var hasOutputItemData = false;
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Reagents.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    for (var i = 0; i < data.Reagents.Count; ++i)
                    {
                        if (data.Reagents.UpdateMask[i])
                        {
                            data.Reagents[i] = ReadUpdateCraftingOrderItem(packet, indexes, "Reagents", i);
                        }
                    }
                }
                if (changesMask[2])
                {
                    data.Field_0 = packet.ReadInt32("Field_0", indexes);
                }
                if (changesMask[3])
                {
                    data.OrderID = packet.ReadUInt64("OrderID", indexes);
                }
                if (changesMask[4])
                {
                    data.SkillLineAbilityID = packet.ReadInt32("SkillLineAbilityID", indexes);
                }
                if (changesMask[5])
                {
                    data.OrderState = packet.ReadInt32("OrderState", indexes);
                }
            }
            if (changesMask[6])
            {
                if (changesMask[7])
                {
                    data.OrderType = packet.ReadByte("OrderType", indexes);
                }
                if (changesMask[8])
                {
                    data.MinQuality = packet.ReadByte("MinQuality", indexes);
                }
                if (changesMask[9])
                {
                    data.ExpirationTime = packet.ReadInt64("ExpirationTime", indexes);
                }
                if (changesMask[10])
                {
                    data.ClaimEndTime = packet.ReadInt64("ClaimEndTime", indexes);
                }
                if (changesMask[11])
                {
                    data.TipAmount = packet.ReadInt64("TipAmount", indexes);
                }
            }
            if (changesMask[12])
            {
                if (changesMask[13])
                {
                    data.ConsortiumCut = packet.ReadInt64("ConsortiumCut", indexes);
                }
                if (changesMask[14])
                {
                    data.Flags = packet.ReadUInt32("Flags", indexes);
                }
                if (changesMask[15])
                {
                    data.CrafterGUID = packet.ReadPackedGuid128("CrafterGUID", indexes);
                }
                if (changesMask[16])
                {
                    data.PersonalCrafterGUID = packet.ReadPackedGuid128("PersonalCrafterGUID", indexes);
                }
                if (changesMask[17])
                {
                    data.NpcCraftingOrderSetID = packet.ReadInt32("NpcCraftingOrderSetID", indexes);
                }
            }
            if (changesMask[18])
            {
                if (changesMask[19])
                {
                    data.NpcTreasureID = packet.ReadInt32("NpcTreasureID", indexes);
                }
                if (changesMask[20])
                {
                    data.CustomerNotes = new string('*', (int)packet.ReadBits(10));
                }
                hasCustomer = packet.ReadBit("HasCustomer", indexes);
                hasNpcCustomer = packet.ReadBit("HasNpcCustomer", indexes);
                hasOutputItem = packet.ReadBit("HasOutputItem", indexes);
            }
            if (changesMask[24])
            {
                hasOutputItemData = packet.ReadBit("HasOutputItemData", indexes);
            }
            if (changesMask[18])
            {
                if (changesMask[20])
                {
                    data.CustomerNotes = packet.ReadWoWString("CustomerNotes", data.CustomerNotes.Length, indexes);
                }
                if (changesMask[21])
                {
                    if (hasCustomer)
                    {
                        data.Customer = ReadUpdateCraftingOrderCustomer(packet, indexes, "Customer");
                    }
                }
                if (changesMask[22])
                {
                    if (hasNpcCustomer)
                    {
                        data.NpcCustomer = ReadUpdateCraftingOrderNpcCustomer(packet, indexes, "NpcCustomer");
                    }
                }
                if (changesMask[23])
                {
                    if (hasOutputItem)
                    {
                        data.OutputItem = ReadUpdateCraftingOrderItem(packet, indexes, "OutputItem");
                    }
                }
            }
            if (changesMask[24])
            {
                if (changesMask[25])
                {
                    if (hasOutputItemData)
                    {
                        Substructures.ItemHandler.ReadItemInstance(packet, indexes, "OutputItemData");
                    }
                }
            }
            return data;
        }

        public static ICraftingOrder ReadCreateCraftingOrder(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrder();
            packet.ResetBitReader();
            var hasRecraftItemInfo = false;
            data.Data = ReadCreateCraftingOrderData(packet, indexes, "Data");
            hasRecraftItemInfo = packet.ReadBit("HasRecraftItemInfo", indexes);
            data.Enchantments.Resize(packet.ReadBits(4));
            data.Gems.Resize(packet.ReadBits(2));
            packet.ResetBitReader();
            if (hasRecraftItemInfo)
            {
                Substructures.ItemHandler.ReadItemInstance(packet, indexes, "RecraftItemInfo");
            }
            for (var i = 0; i < data.Enchantments.Count; ++i)
            {
                Substructures.ItemHandler.ReadItemEnchantData(packet, indexes, i, "Enchantments");
            }
            for (var i = 0; i < data.Gems.Count; ++i)
            {
                Substructures.ItemHandler.ReadItemGemData(packet, indexes, i, "Gems");
            }
            return data;
        }

        public static ICraftingOrder ReadUpdateCraftingOrder(Packet packet, params object[] indexes)
        {
            var data = new CraftingOrder();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(4);
            var changesMask = new BitArray(rawChangesMask);

            var hasRecraftItemInfo = false;
            if (changesMask[0])
            {
                data.Enchantments.ReadUpdateMask(packet, 4);
            }
            if (changesMask[1])
            {
                data.Gems.ReadUpdateMask(packet, 2);
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                for (var i = 0; i < data.Enchantments.Count; ++i)
                {
                    if (data.Enchantments.UpdateMask[i])
                    {
                        Substructures.ItemHandler.ReadItemEnchantData(packet, indexes, i, "Enchantments");
                    }
                }
            }
            if (changesMask[1])
            {
                for (var i = 0; i < data.Gems.Count; ++i)
                {
                    if (data.Gems.UpdateMask[i])
                    {
                        Substructures.ItemHandler.ReadItemGemData(packet, indexes, i, "Gems");
                    }
                }
            }
            if (changesMask[2])
            {
                data.Data = ReadUpdateCraftingOrderData(packet, indexes, "Data");
            }
            hasRecraftItemInfo = packet.ReadBit("HasRecraftItemInfo", indexes);
            packet.ResetBitReader();
            if (changesMask[3])
            {
                if (hasRecraftItemInfo)
                {
                    Substructures.ItemHandler.ReadItemInstance(packet, indexes, "RecraftItemInfo");
                }
            }
            return data;
        }

        public static IPersonalCraftingOrderCount ReadCreatePersonalCraftingOrderCount(Packet packet, params object[] indexes)
        {
            var data = new PersonalCraftingOrderCount();
            packet.ResetBitReader();
            data.ProfessionID = packet.ReadInt32("ProfessionID", indexes);
            data.Count = packet.ReadUInt32("Count", indexes);
            return data;
        }

        public static IPersonalCraftingOrderCount ReadUpdatePersonalCraftingOrderCount(Packet packet, params object[] indexes)
        {
            var data = new PersonalCraftingOrderCount();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(2);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                data.ProfessionID = packet.ReadInt32("ProfessionID", indexes);
            }
            if (changesMask[1])
            {
                data.Count = packet.ReadUInt32("Count", indexes);
            }
            return data;
        }

        public static INPCCraftingOrderInfo ReadCreateNPCCraftingOrderInfo(Packet packet, params object[] indexes)
        {
            var data = new NPCCraftingOrderInfo();
            packet.ResetBitReader();
            data.OrderID = packet.ReadUInt64("OrderID", indexes);
            data.NpcCraftingOrderSetID = packet.ReadInt32("NpcCraftingOrderSetID", indexes);
            data.NpcTreasureID = packet.ReadInt32("NpcTreasureID", indexes);
            data.NpcCraftingOrderCustomerID = packet.ReadInt32("NpcCraftingOrderCustomerID", indexes);
            return data;
        }

        public static INPCCraftingOrderInfo ReadUpdateNPCCraftingOrderInfo(Packet packet, params object[] indexes)
        {
            var data = new NPCCraftingOrderInfo();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(4);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                data.OrderID = packet.ReadUInt64("OrderID", indexes);
            }
            if (changesMask[1])
            {
                data.NpcCraftingOrderSetID = packet.ReadInt32("NpcCraftingOrderSetID", indexes);
            }
            if (changesMask[2])
            {
                data.NpcTreasureID = packet.ReadInt32("NpcTreasureID", indexes);
            }
            if (changesMask[3])
            {
                data.NpcCraftingOrderCustomerID = packet.ReadInt32("NpcCraftingOrderCustomerID", indexes);
            }
            return data;
        }

        public static ICategoryCooldownMod ReadCreateCategoryCooldownMod(Packet packet, params object[] indexes)
        {
            var data = new CategoryCooldownMod();
            packet.ResetBitReader();
            data.SpellCategoryID = packet.ReadInt32("SpellCategoryID", indexes);
            data.ModCooldown = packet.ReadInt32("ModCooldown", indexes);
            return data;
        }

        public static ICategoryCooldownMod ReadUpdateCategoryCooldownMod(Packet packet, params object[] indexes)
        {
            var data = new CategoryCooldownMod();
            packet.ResetBitReader();
            data.SpellCategoryID = packet.ReadInt32("SpellCategoryID", indexes);
            data.ModCooldown = packet.ReadInt32("ModCooldown", indexes);
            return data;
        }

        public static IWeeklySpellUse ReadCreateWeeklySpellUse(Packet packet, params object[] indexes)
        {
            var data = new WeeklySpellUse();
            packet.ResetBitReader();
            data.SpellCategoryID = packet.ReadInt32("SpellCategoryID", indexes);
            data.Uses = packet.ReadByte("Uses", indexes);
            return data;
        }

        public static IWeeklySpellUse ReadUpdateWeeklySpellUse(Packet packet, params object[] indexes)
        {
            var data = new WeeklySpellUse();
            packet.ResetBitReader();
            data.SpellCategoryID = packet.ReadInt32("SpellCategoryID", indexes);
            data.Uses = packet.ReadByte("Uses", indexes);
            return data;
        }

        public static IStablePetInfo ReadCreateStablePetInfo(Packet packet, params object[] indexes)
        {
            var data = new StablePetInfo();
            packet.ResetBitReader();
            data.PetSlot = packet.ReadUInt32("PetSlot", indexes);
            data.PetNumber = packet.ReadUInt32("PetNumber", indexes);
            data.CreatureID = packet.ReadUInt32("CreatureID", indexes);
            data.DisplayID = packet.ReadUInt32("DisplayID", indexes);
            data.ExperienceLevel = packet.ReadUInt32("ExperienceLevel", indexes);
            data.PetFlags = packet.ReadByte("PetFlags", indexes);
            data.Specialization = packet.ReadUInt32("Specialization", indexes);
            data.Name = new string('*', (int)packet.ReadBits(8));
            data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
            return data;
        }

        public static IStablePetInfo ReadUpdateStablePetInfo(Packet packet, params object[] indexes)
        {
            var data = new StablePetInfo();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(9);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.PetSlot = packet.ReadUInt32("PetSlot", indexes);
                }
                if (changesMask[2])
                {
                    data.PetNumber = packet.ReadUInt32("PetNumber", indexes);
                }
                if (changesMask[3])
                {
                    data.CreatureID = packet.ReadUInt32("CreatureID", indexes);
                }
                if (changesMask[4])
                {
                    data.DisplayID = packet.ReadUInt32("DisplayID", indexes);
                }
                if (changesMask[5])
                {
                    data.ExperienceLevel = packet.ReadUInt32("ExperienceLevel", indexes);
                }
                if (changesMask[7])
                {
                    data.PetFlags = packet.ReadByte("PetFlags", indexes);
                }
                if (changesMask[8])
                {
                    data.Specialization = packet.ReadUInt32("Specialization", indexes);
                }
                if (changesMask[6])
                {
                    data.Name = new string('*', (int)packet.ReadBits(8));
                    data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
                }
            }
            return data;
        }

        public static IStableInfo ReadCreateStableInfo(Packet packet, params object[] indexes)
        {
            var data = new StableInfo();
            packet.ResetBitReader();
            data.Pets.Resize(packet.ReadUInt32());
            data.StableMaster = packet.ReadPackedGuid128("StableMaster", indexes);
            for (var i = 0; i < data.Pets.Count; ++i)
            {
                data.Pets[i] = ReadCreateStablePetInfo(packet, indexes, "Pets", i);
            }
            return data;
        }

        public static IStableInfo ReadUpdateStableInfo(Packet packet, params object[] indexes)
        {
            var data = new StableInfo();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Pets.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    for (var i = 0; i < data.Pets.Count; ++i)
                    {
                        if (data.Pets.UpdateMask[i])
                        {
                            data.Pets[i] = ReadUpdateStablePetInfo(packet, indexes, "Pets", i);
                        }
                    }
                }
                if (changesMask[2])
                {
                    data.StableMaster = packet.ReadPackedGuid128("StableMaster", indexes);
                }
            }
            return data;
        }

        public static ICollectableSourceTrackedData ReadCreateCollectableSourceTrackedData(Packet packet, params object[] indexes)
        {
            var data = new CollectableSourceTrackedData();
            packet.ResetBitReader();
            data.TargetType = packet.ReadInt32("TargetType", indexes);
            data.TargetID = packet.ReadInt32("TargetID", indexes);
            data.CollectableSourceInfoID = packet.ReadInt32("CollectableSourceInfoID", indexes);
            return data;
        }

        public static ICollectableSourceTrackedData ReadUpdateCollectableSourceTrackedData(Packet packet, params object[] indexes)
        {
            var data = new CollectableSourceTrackedData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(4);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.TargetType = packet.ReadInt32("TargetType", indexes);
                }
                if (changesMask[2])
                {
                    data.TargetID = packet.ReadInt32("TargetID", indexes);
                }
                if (changesMask[3])
                {
                    data.CollectableSourceInfoID = packet.ReadInt32("CollectableSourceInfoID", indexes);
                }
            }
            return data;
        }

        public static IBankTabSettings ReadCreateBankTabSettings(Packet packet, params object[] indexes)
        {
            var data = new BankTabSettings();
            packet.ResetBitReader();
            data.Name = new string('*', (int)packet.ReadBits(7));
            data.Icon = new string('*', (int)packet.ReadBits(9));
            data.Description = new string('*', (int)packet.ReadBits(14));
            data.DepositFlags = packet.ReadInt32("DepositFlags", indexes);
            data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
            data.Icon = packet.ReadWoWString("Icon", data.Icon.Length, indexes);
            data.Description = packet.ReadWoWString("Description", data.Description.Length, indexes);
            return data;
        }

        public static IBankTabSettings ReadUpdateBankTabSettings(Packet packet, params object[] indexes)
        {
            var data = new BankTabSettings();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(4);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                data.Name = new string('*', (int)packet.ReadBits(7));
            }
            if (changesMask[1])
            {
                data.Icon = new string('*', (int)packet.ReadBits(9));
            }
            if (changesMask[2])
            {
                data.Description = new string('*', (int)packet.ReadBits(14));
            }
            packet.ResetBitReader();
            if (changesMask[3])
            {
                data.DepositFlags = packet.ReadInt32("DepositFlags", indexes);
            }
            if (changesMask[0])
            {
                data.Name = packet.ReadWoWString("Name", data.Name.Length, indexes);
            }
            if (changesMask[1])
            {
                data.Icon = packet.ReadWoWString("Icon", data.Icon.Length, indexes);
            }
            if (changesMask[2])
            {
                data.Description = packet.ReadWoWString("Description", data.Description.Length, indexes);
            }
            return data;
        }

        public static IWalkInData ReadCreateWalkInData(Packet packet, params object[] indexes)
        {
            var data = new WalkInData();
            packet.ResetBitReader();
            data.MapID = packet.ReadInt32("MapID", indexes);
            data.Field_8 = packet.ReadInt64("Field_8", indexes);
            data.Field_18 = packet.ReadPackedGuid128("Field_18", indexes);
            data.Type = packet.ReadBits("Type", 1, indexes);
            return data;
        }

        public static IWalkInData ReadUpdateWalkInData(Packet packet, params object[] indexes)
        {
            var data = new WalkInData();
            packet.ResetBitReader();
            data.MapID = packet.ReadInt32("MapID", indexes);
            data.Field_8 = packet.ReadInt64("Field_8", indexes);
            data.Field_18 = packet.ReadPackedGuid128("Field_18", indexes);
            data.Type = packet.ReadBits("Type", 1, indexes);
            return data;
        }

        public static IDelveData ReadCreateDelveData(Packet packet, params object[] indexes)
        {
            var data = new DelveData();
            packet.ResetBitReader();
            data.Field_0 = packet.ReadInt32("Field_0", indexes);
            data.Field_8 = packet.ReadUInt64("Field_8", indexes);
            data.Field_10 = packet.ReadInt32("Field_10", indexes);
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.Owners = new WowGuid[packet.ReadUInt32()];
            for (var i = 0; i < data.Owners.Length; ++i)
            {
                data.Owners[i] = packet.ReadPackedGuid128("Owners", indexes, i);
            }
            data.Started = packet.ReadBits("Started", 1, indexes);
            return data;
        }

        public static IDelveData ReadUpdateDelveData(Packet packet, params object[] indexes)
        {
            var data = new DelveData();
            packet.ResetBitReader();
            packet.ResetBitReader();
            data.Field_0 = packet.ReadInt32("Field_0", indexes);
            data.Field_8 = packet.ReadUInt64("Field_8", indexes);
            data.Field_10 = packet.ReadInt32("Field_10", indexes);
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.Owners = new WowGuid[packet.ReadUInt32()];
            for (var i = 0; i < data.Owners.Length; ++i)
            {
                data.Owners[i] = packet.ReadPackedGuid128("Owners", indexes, i);
            }
            data.Started = packet.ReadBits("Started", 1, indexes);
            return data;
        }

        public static IChallengeModeData ReadCreateChallengeModeData(Packet packet, params object[] indexes)
        {
            var data = new ChallengeModeData();
            packet.ResetBitReader();
            data.Unknown_1120_1 = packet.ReadInt32("Unknown_1120_1", indexes);
            data.Unknown_1120_2 = packet.ReadInt32("Unknown_1120_2", indexes);
            data.Unknown_1120_3 = packet.ReadUInt64("Unknown_1120_3", indexes);
            data.Unknown_1120_4 = packet.ReadInt64("Unknown_1120_4", indexes);
            data.KeystoneOwnerGUID = packet.ReadPackedGuid128("KeystoneOwnerGUID", indexes);
            data.LeaverGUID = packet.ReadPackedGuid128("LeaverGUID", indexes);
            data.InstanceAbandonVoteCooldown = packet.ReadInt64("InstanceAbandonVoteCooldown", indexes);
            data.IsActive = packet.ReadBits("IsActive", 1, indexes);
            data.HasRestrictions = packet.ReadBits("HasRestrictions", 1, indexes);
            data.CanVoteAbandon = packet.ReadBits("CanVoteAbandon", 1, indexes);
            return data;
        }

        public static IChallengeModeData ReadUpdateChallengeModeData(Packet packet, params object[] indexes)
        {
            var data = new ChallengeModeData();
            packet.ResetBitReader();
            data.Unknown_1120_1 = packet.ReadInt32("Unknown_1120_1", indexes);
            data.Unknown_1120_2 = packet.ReadInt32("Unknown_1120_2", indexes);
            data.Unknown_1120_3 = packet.ReadUInt64("Unknown_1120_3", indexes);
            data.Unknown_1120_4 = packet.ReadInt64("Unknown_1120_4", indexes);
            data.KeystoneOwnerGUID = packet.ReadPackedGuid128("KeystoneOwnerGUID", indexes);
            data.LeaverGUID = packet.ReadPackedGuid128("LeaverGUID", indexes);
            data.InstanceAbandonVoteCooldown = packet.ReadInt64("InstanceAbandonVoteCooldown", indexes);
            data.IsActive = packet.ReadBits("IsActive", 1, indexes);
            data.HasRestrictions = packet.ReadBits("HasRestrictions", 1, indexes);
            data.CanVoteAbandon = packet.ReadBits("CanVoteAbandon", 1, indexes);
            return data;
        }

        public static IResearch ReadCreateResearch(Packet packet, params object[] indexes)
        {
            var data = new Research();
            packet.ResetBitReader();
            data.ResearchProjectID = packet.ReadInt16("ResearchProjectID", indexes);
            return data;
        }

        public static IResearch ReadUpdateResearch(Packet packet, params object[] indexes)
        {
            var data = new Research();
            packet.ResetBitReader();
            data.ResearchProjectID = packet.ReadInt16("ResearchProjectID", indexes);
            return data;
        }

        public override IActivePlayerData ReadCreateActivePlayerData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new ActivePlayerData();
            packet.ResetBitReader();
            var hasQuestSession = false;
            var hasPetStable = false;
            var hasWalkInData = false;
            var hasDelveData = false;
            var hasChallengeModeData = false;
            for (var i = 0; i < 105; ++i)
            {
                data.InvSlots[i] = packet.ReadPackedGuid128("InvSlots", indexes, i);
            }
            data.FarsightObject = packet.ReadPackedGuid128("FarsightObject", indexes);
            data.SummonedBattlePetGUID = packet.ReadPackedGuid128("SummonedBattlePetGUID", indexes);
            data.KnownTitles.Resize(packet.ReadUInt32());
            data.Coinage = packet.ReadUInt64("Coinage", indexes);
            data.AccountBankCoinage = packet.ReadUInt64("AccountBankCoinage", indexes);
            data.XP = packet.ReadInt32("XP", indexes);
            data.NextLevelXP = packet.ReadInt32("NextLevelXP", indexes);
            data.TrialXP = packet.ReadInt32("TrialXP", indexes);
            data.Skill = ReadCreateSkillInfo(packet, indexes, "Skill");
            data.CharacterPoints = packet.ReadInt32("CharacterPoints", indexes);
            data.MaxTalentTiers = packet.ReadInt32("MaxTalentTiers", indexes);
            data.TrackCreatureMask = packet.ReadUInt32("TrackCreatureMask", indexes);
            data.MainhandExpertise = packet.ReadSingle("MainhandExpertise", indexes);
            data.OffhandExpertise = packet.ReadSingle("OffhandExpertise", indexes);
            data.RangedExpertise = packet.ReadSingle("RangedExpertise", indexes);
            data.CombatRatingExpertise = packet.ReadSingle("CombatRatingExpertise", indexes);
            data.BlockPercentage = packet.ReadSingle("BlockPercentage", indexes);
            data.DodgePercentage = packet.ReadSingle("DodgePercentage", indexes);
            data.DodgePercentageFromAttribute = packet.ReadSingle("DodgePercentageFromAttribute", indexes);
            data.ParryPercentage = packet.ReadSingle("ParryPercentage", indexes);
            data.ParryPercentageFromAttribute = packet.ReadSingle("ParryPercentageFromAttribute", indexes);
            data.CritPercentage = packet.ReadSingle("CritPercentage", indexes);
            data.RangedCritPercentage = packet.ReadSingle("RangedCritPercentage", indexes);
            data.OffhandCritPercentage = packet.ReadSingle("OffhandCritPercentage", indexes);
            data.SpellCritPercentage = packet.ReadSingle("SpellCritPercentage", indexes);
            data.ShieldBlock = packet.ReadInt32("ShieldBlock", indexes);
            data.ShieldBlockCritPercentage = packet.ReadSingle("ShieldBlockCritPercentage", indexes);
            data.Mastery = packet.ReadSingle("Mastery", indexes);
            data.Speed = packet.ReadSingle("Speed", indexes);
            data.Avoidance = packet.ReadSingle("Avoidance", indexes);
            data.Sturdiness = packet.ReadSingle("Sturdiness", indexes);
            data.Versatility = packet.ReadInt32("Versatility", indexes);
            data.VersatilityBonus = packet.ReadSingle("VersatilityBonus", indexes);
            data.PvpPowerDamage = packet.ReadSingle("PvpPowerDamage", indexes);
            data.PvpPowerHealing = packet.ReadSingle("PvpPowerHealing", indexes);
            data.BitVectors = ReadCreateBitVectors(packet, indexes, "BitVectors");
            data.CharacterDataElements.Resize(packet.ReadUInt32());
            data.AccountDataElements.Resize(packet.ReadUInt32());
            for (var i = 0; i < 2; ++i)
            {
                data.RestInfo[i] = ReadCreateRestInfo(packet, indexes, "RestInfo", i);
            }
            for (var i = 0; i < 7; ++i)
            {
                data.ModDamageDonePos[i] = packet.ReadInt32("ModDamageDonePos", indexes, i);
                data.ModDamageDoneNeg[i] = packet.ReadInt32("ModDamageDoneNeg", indexes, i);
                data.ModDamageDonePercent[i] = packet.ReadSingle("ModDamageDonePercent", indexes, i);
                data.ModHealingDonePercent[i] = packet.ReadSingle("ModHealingDonePercent", indexes, i);
            }
            data.ModHealingDonePos = packet.ReadInt32("ModHealingDonePos", indexes);
            data.ModHealingPercent = packet.ReadSingle("ModHealingPercent", indexes);
            data.ModPeriodicHealingDonePercent = packet.ReadSingle("ModPeriodicHealingDonePercent", indexes);
            for (var i = 0; i < 3; ++i)
            {
                data.WeaponDmgMultipliers[i] = packet.ReadSingle("WeaponDmgMultipliers", indexes, i);
                data.WeaponAtkSpeedMultipliers[i] = packet.ReadSingle("WeaponAtkSpeedMultipliers", indexes, i);
            }
            data.ModSpellPowerPercent = packet.ReadSingle("ModSpellPowerPercent", indexes);
            data.ModResiliencePercent = packet.ReadSingle("ModResiliencePercent", indexes);
            data.OverrideSpellPowerByAPPercent = packet.ReadSingle("OverrideSpellPowerByAPPercent", indexes);
            data.OverrideAPBySpellPowerPercent = packet.ReadSingle("OverrideAPBySpellPowerPercent", indexes);
            data.ModTargetResistance = packet.ReadInt32("ModTargetResistance", indexes);
            data.ModTargetPhysicalResistance = packet.ReadInt32("ModTargetPhysicalResistance", indexes);
            data.LocalFlags = packet.ReadUInt32("LocalFlags", indexes);
            data.GrantableLevels = packet.ReadByte("GrantableLevels", indexes);
            data.MultiActionBars = packet.ReadByte("MultiActionBars", indexes);
            data.LifetimeMaxRank = packet.ReadByte("LifetimeMaxRank", indexes);
            data.NumRespecs = packet.ReadByte("NumRespecs", indexes);
            data.PvpMedals = packet.ReadUInt32("PvpMedals", indexes);
            for (var i = 0; i < 12; ++i)
            {
                data.BuybackPrice[i] = packet.ReadUInt32("BuybackPrice", indexes, i);
                data.BuybackTimestamp[i] = packet.ReadInt64("BuybackTimestamp", indexes, i);
            }
            data.TodayHonorableKills = packet.ReadUInt16("TodayHonorableKills", indexes);
            data.YesterdayHonorableKills = packet.ReadUInt16("YesterdayHonorableKills", indexes);
            data.LifetimeHonorableKills = packet.ReadUInt32("LifetimeHonorableKills", indexes);
            data.WatchedFactionIndex = packet.ReadInt32("WatchedFactionIndex", indexes);
            for (var i = 0; i < 32; ++i)
            {
                data.CombatRatings[i] = packet.ReadInt32("CombatRatings", indexes, i);
            }
            data.PvpInfo.Resize(packet.ReadUInt32());
            data.MaxLevel = packet.ReadInt32("MaxLevel", indexes);
            data.ScalingPlayerLevelDelta = packet.ReadInt32("ScalingPlayerLevelDelta", indexes);
            data.MaxCreatureScalingLevel = packet.ReadInt32("MaxCreatureScalingLevel", indexes);
            for (var i = 0; i < 4; ++i)
            {
                data.NoReagentCostMask[i] = packet.ReadUInt32("NoReagentCostMask", indexes, i);
            }
            data.PetSpellPower = packet.ReadInt32("PetSpellPower", indexes);
            for (var i = 0; i < 2; ++i)
            {
                data.ProfessionSkillLine[i] = packet.ReadInt32("ProfessionSkillLine", indexes, i);
            }
            data.UiHitModifier = packet.ReadSingle("UiHitModifier", indexes);
            data.UiSpellHitModifier = packet.ReadSingle("UiSpellHitModifier", indexes);
            data.HomeRealmTimeOffset = packet.ReadInt32("HomeRealmTimeOffset", indexes);
            data.ModPetHaste = packet.ReadSingle("ModPetHaste", indexes);
            data.JailersTowerLevelMax = packet.ReadSByte("JailersTowerLevelMax", indexes);
            data.JailersTowerLevel = packet.ReadSByte("JailersTowerLevel", indexes);
            data.LocalRegenFlags = packet.ReadByte("LocalRegenFlags", indexes);
            data.AuraVision = packet.ReadByte("AuraVision", indexes);
            data.NumBackpackSlots = packet.ReadByte("NumBackpackSlots", indexes);
            data.OverrideSpellsID = packet.ReadInt32("OverrideSpellsID", indexes);
            data.LootSpecID = packet.ReadUInt16("LootSpecID", indexes);
            data.OverrideZonePVPType = packet.ReadUInt32("OverrideZonePVPType", indexes);
            for (var i = 0; i < 5; ++i)
            {
                data.BagSlotFlags[i] = packet.ReadUInt32("BagSlotFlags", indexes, i);
            }
            data.Honor = packet.ReadInt32("Honor", indexes);
            data.HonorNextLevel = packet.ReadInt32("HonorNextLevel", indexes);
            data.PerksProgramCurrency = packet.ReadInt32("PerksProgramCurrency", indexes);
            data.NumBankSlots = packet.ReadByte("NumBankSlots", indexes);
            data.NumCharacterBankTabs = packet.ReadByte("NumCharacterBankTabs", indexes);
            data.NumAccountBankTabs = packet.ReadByte("NumAccountBankTabs", indexes);
            for (var i = 0; i < 1; ++i)
            {
                data.ResearchSites[i].Resize(packet.ReadUInt32());
                data.ResearchSiteProgress[i].Resize(packet.ReadUInt32());
                data.Research[i].Resize(packet.ReadUInt32());
                for (var j = 0; j < data.ResearchSites[i].Count; ++j)
                {
                    data.ResearchSites[i][j] = packet.ReadUInt16("ResearchSites", indexes, i, j);
                }
                for (var j = 0; j < data.ResearchSiteProgress[i].Count; ++j)
                {
                    data.ResearchSiteProgress[i][j] = packet.ReadUInt32("ResearchSiteProgress", indexes, i, j);
                }
                for (var j = 0; j < data.Research[i].Count; ++j)
                {
                    data.Research[i][j] = ReadCreateResearch(packet, indexes, "Research", i, j);
                }
            }
            data.DailyQuestsCompleted.Resize(packet.ReadUInt32());
            data.Field_1328.Resize(packet.ReadUInt32());
            data.AvailableQuestLineXQuestIDs.Resize(packet.ReadUInt32());
            data.Heirlooms.Resize(packet.ReadUInt32());
            data.HeirloomFlags.Resize(packet.ReadUInt32());
            data.Toys.Resize(packet.ReadUInt32());
            data.ToyFlags.Resize(packet.ReadUInt32());
            data.Transmog.Resize(packet.ReadUInt32());
            data.ConditionalTransmog.Resize(packet.ReadUInt32());
            data.SelfResSpells.Resize(packet.ReadUInt32());
            data.RuneforgePowers.Resize(packet.ReadUInt32());
            data.TransmogIllusions.Resize(packet.ReadUInt32());
            data.WarbandScenes.Resize(packet.ReadUInt32());
            data.CharacterRestrictions.Resize(packet.ReadUInt32());
            data.SpellPctModByLabel.Resize(packet.ReadUInt32());
            data.SpellFlatModByLabel.Resize(packet.ReadUInt32());
            data.MawPowers.Resize(packet.ReadUInt32());
            data.MultiFloorExploration.Resize(packet.ReadUInt32());
            data.RecipeProgression.Resize(packet.ReadUInt32());
            data.ReplayedQuests.Resize(packet.ReadUInt32());
            data.TaskQuests.Resize(packet.ReadUInt32());
            data.DisabledSpells.Resize(packet.ReadUInt32());
            data.UiChromieTimeExpansionID = packet.ReadInt32("UiChromieTimeExpansionID", indexes);
            data.TimerunningSeasonID = packet.ReadInt32("TimerunningSeasonID", indexes);
            data.TransportServerTime = packet.ReadInt32("TransportServerTime", indexes);
            data.WeeklyRewardsPeriodSinceOrigin = packet.ReadUInt32("WeeklyRewardsPeriodSinceOrigin", indexes);
            data.DEBUGSoulbindConduitRank = packet.ReadInt16("DEBUGSoulbindConduitRank", indexes);
            data.ActiveCombatTraitConfigID = packet.ReadUInt32("ActiveCombatTraitConfigID", indexes);
            data.CraftingOrders.Resize(packet.ReadUInt32());
            data.PersonalCraftingOrderCounts.Resize(packet.ReadUInt32());
            data.NpcCraftingOrders.Resize(packet.ReadUInt32());
            data.CategoryCooldownMods.Resize(packet.ReadUInt32());
            data.WeeklySpellUses.Resize(packet.ReadUInt32());
            for (var i = 0; i < 17; ++i)
            {
                data.ItemUpgradeHighWatermark[i] = packet.ReadSingle("ItemUpgradeHighWatermark", indexes, i);
            }
            data.ItemUpgradeHighOnehandWeaponItemID = packet.ReadInt32("ItemUpgradeHighOnehandWeaponItemID", indexes);
            data.ItemUpgradeHighFingerItemID = packet.ReadInt32("ItemUpgradeHighFingerItemID", indexes);
            data.ItemUpgradeHighFingerWatermark = packet.ReadSingle("ItemUpgradeHighFingerWatermark", indexes);
            data.ItemUpgradeHighTrinketItemID = packet.ReadInt32("ItemUpgradeHighTrinketItemID", indexes);
            data.ItemUpgradeHighTrinketWatermark = packet.ReadSingle("ItemUpgradeHighTrinketWatermark", indexes);
            data.LootHistoryInstanceID = packet.ReadUInt64("LootHistoryInstanceID", indexes);
            data.TrackedCollectableSources.Resize(packet.ReadUInt32());
            data.RequiredMountCapabilityFlags = packet.ReadByte("RequiredMountCapabilityFlags", indexes);
            for (var i = 0; i < data.KnownTitles.Count; ++i)
            {
                data.KnownTitles[i] = packet.ReadUInt64("KnownTitles", indexes, i);
            }
            for (var i = 0; i < data.CharacterDataElements.Count; ++i)
            {
                data.CharacterDataElements[i] = ReadCreatePlayerDataElement(packet, indexes, "CharacterDataElements", i);
            }
            for (var i = 0; i < data.AccountDataElements.Count; ++i)
            {
                data.AccountDataElements[i] = ReadCreatePlayerDataElement(packet, indexes, "AccountDataElements", i);
            }
            for (var i = 0; i < data.DailyQuestsCompleted.Count; ++i)
            {
                data.DailyQuestsCompleted[i] = packet.ReadInt32("DailyQuestsCompleted", indexes, i);
            }
            for (var i = 0; i < data.Field_1328.Count; ++i)
            {
                data.Field_1328[i] = packet.ReadInt32("Field_1328", indexes, i);
            }
            for (var i = 0; i < data.AvailableQuestLineXQuestIDs.Count; ++i)
            {
                data.AvailableQuestLineXQuestIDs[i] = packet.ReadInt32("AvailableQuestLineXQuestIDs", indexes, i);
            }
            for (var i = 0; i < data.Heirlooms.Count; ++i)
            {
                data.Heirlooms[i] = packet.ReadInt32("Heirlooms", indexes, i);
            }
            for (var i = 0; i < data.HeirloomFlags.Count; ++i)
            {
                data.HeirloomFlags[i] = packet.ReadUInt32("HeirloomFlags", indexes, i);
            }
            for (var i = 0; i < data.Toys.Count; ++i)
            {
                data.Toys[i] = packet.ReadInt32("Toys", indexes, i);
            }
            for (var i = 0; i < data.ToyFlags.Count; ++i)
            {
                data.ToyFlags[i] = packet.ReadUInt32("ToyFlags", indexes, i);
            }
            for (var i = 0; i < data.Transmog.Count; ++i)
            {
                data.Transmog[i] = packet.ReadUInt32("Transmog", indexes, i);
            }
            for (var i = 0; i < data.ConditionalTransmog.Count; ++i)
            {
                data.ConditionalTransmog[i] = packet.ReadInt32("ConditionalTransmog", indexes, i);
            }
            for (var i = 0; i < data.SelfResSpells.Count; ++i)
            {
                data.SelfResSpells[i] = packet.ReadInt32("SelfResSpells", indexes, i);
            }
            for (var i = 0; i < data.RuneforgePowers.Count; ++i)
            {
                data.RuneforgePowers[i] = packet.ReadUInt32("RuneforgePowers", indexes, i);
            }
            for (var i = 0; i < data.TransmogIllusions.Count; ++i)
            {
                data.TransmogIllusions[i] = packet.ReadUInt32("TransmogIllusions", indexes, i);
            }
            for (var i = 0; i < data.WarbandScenes.Count; ++i)
            {
                data.WarbandScenes[i] = packet.ReadUInt32("WarbandScenes", indexes, i);
            }
            for (var i = 0; i < data.SpellPctModByLabel.Count; ++i)
            {
                data.SpellPctModByLabel[i] = ReadCreateSpellPctModByLabel(packet, indexes, "SpellPctModByLabel", i);
            }
            for (var i = 0; i < data.SpellFlatModByLabel.Count; ++i)
            {
                data.SpellFlatModByLabel[i] = ReadCreateSpellFlatModByLabel(packet, indexes, "SpellFlatModByLabel", i);
            }
            for (var i = 0; i < data.MawPowers.Count; ++i)
            {
                data.MawPowers[i] = ReadCreateMawPower(packet, indexes, "MawPowers", i);
            }
            for (var i = 0; i < data.MultiFloorExploration.Count; ++i)
            {
                data.MultiFloorExploration[i] = ReadCreateMultiFloorExplore(packet, indexes, "MultiFloorExploration", i);
            }
            for (var i = 0; i < data.RecipeProgression.Count; ++i)
            {
                data.RecipeProgression[i] = ReadCreateRecipeProgressionInfo(packet, indexes, "RecipeProgression", i);
            }
            for (var i = 0; i < data.ReplayedQuests.Count; ++i)
            {
                data.ReplayedQuests[i] = ReadCreateReplayedQuest(packet, indexes, "ReplayedQuests", i);
            }
            for (var i = 0; i < data.TaskQuests.Count; ++i)
            {
                data.TaskQuests[i] = ReadCreateQuestLog(packet, indexes, "TaskQuests", i);
            }
            for (var i = 0; i < data.DisabledSpells.Count; ++i)
            {
                data.DisabledSpells[i] = packet.ReadInt32("DisabledSpells", indexes, i);
            }
            for (var i = 0; i < data.PersonalCraftingOrderCounts.Count; ++i)
            {
                data.PersonalCraftingOrderCounts[i] = ReadCreatePersonalCraftingOrderCount(packet, indexes, "PersonalCraftingOrderCounts", i);
            }
            for (var i = 0; i < data.NpcCraftingOrders.Count; ++i)
            {
                data.NpcCraftingOrders[i] = ReadCreateNPCCraftingOrderInfo(packet, indexes, "NpcCraftingOrders", i);
            }
            for (var i = 0; i < data.CategoryCooldownMods.Count; ++i)
            {
                data.CategoryCooldownMods[i] = ReadCreateCategoryCooldownMod(packet, indexes, "CategoryCooldownMods", i);
            }
            for (var i = 0; i < data.WeeklySpellUses.Count; ++i)
            {
                data.WeeklySpellUses[i] = ReadCreateWeeklySpellUse(packet, indexes, "WeeklySpellUses", i);
            }
            for (var i = 0; i < data.TrackedCollectableSources.Count; ++i)
            {
                data.TrackedCollectableSources[i] = ReadCreateCollectableSourceTrackedData(packet, indexes, "TrackedCollectableSources", i);
            }
            packet.ResetBitReader();
            data.BackpackAutoSortDisabled = packet.ReadBit("BackpackAutoSortDisabled", indexes);
            data.BackpackSellJunkDisabled = packet.ReadBit("BackpackSellJunkDisabled", indexes);
            data.BankAutoSortDisabled = packet.ReadBit("BankAutoSortDisabled", indexes);
            data.SortBagsRightToLeft = packet.ReadBit("SortBagsRightToLeft", indexes);
            data.InsertItemsLeftToRight = packet.ReadBit("InsertItemsLeftToRight", indexes);
            data.HasPerksProgramPendingReward = packet.ReadBit("HasPerksProgramPendingReward", indexes);
            hasQuestSession = packet.ReadBit("HasQuestSession", indexes);
            hasPetStable = packet.ReadBit("HasPetStable", indexes);
            data.CharacterBankTabSettings.Resize(packet.ReadBits(3));
            data.AccountBankTabSettings.Resize(packet.ReadBits(3));
            hasWalkInData = packet.ReadBit("HasWalkInData", indexes);
            hasDelveData = packet.ReadBit("HasDelveData", indexes);
            hasChallengeModeData = packet.ReadBit("HasChallengeModeData", indexes);
            packet.ResetBitReader();
            data.ResearchHistory = ReadCreateResearchHistory(packet, indexes, "ResearchHistory");
            if (hasQuestSession)
            {
                data.QuestSession = ReadCreateQuestSession(packet, indexes, "QuestSession");
            }
            Substructures.PerksProgramHandler.ReadPerksVendorItem(packet, indexes, "FrozenPerksVendorItem");
            data.Field_1410 = ReadCreateActivePlayerUnk901(packet, indexes, "Field_1410");
            Substructures.MythicPlusHandler.ReadDungeonScoreData(packet, indexes, "DungeonScore");
            var mapSizeTraitConfigs = packet.ReadUInt32();
            for (var m = 0u; m < mapSizeTraitConfigs; ++m)
            {
                var key = packet.ReadInt32("Key", indexes, m);
                data.TraitConfigs[key] = ReadCreateTraitConfig(packet, indexes, "Value", m);
            }
            for (var i = 0; i < data.PvpInfo.Count; ++i)
            {
                data.PvpInfo[i] = ReadCreatePVPInfo(packet, indexes, "PvpInfo", i);
            }
            for (var i = 0; i < data.CharacterRestrictions.Count; ++i)
            {
                data.CharacterRestrictions[i] = ReadCreateCharacterRestriction(packet, indexes, "CharacterRestrictions", i);
            }
            for (var i = 0; i < data.CraftingOrders.Count; ++i)
            {
                data.CraftingOrders[i] = ReadCreateCraftingOrder(packet, indexes, "CraftingOrders", i);
            }
            if (hasPetStable)
            {
                data.PetStable = ReadCreateStableInfo(packet, indexes, "PetStable");
            }
            for (var i = 0; i < data.CharacterBankTabSettings.Count; ++i)
            {
                data.CharacterBankTabSettings[i] = ReadCreateBankTabSettings(packet, indexes, "CharacterBankTabSettings", i);
            }
            for (var i = 0; i < data.AccountBankTabSettings.Count; ++i)
            {
                data.AccountBankTabSettings[i] = ReadCreateBankTabSettings(packet, indexes, "AccountBankTabSettings", i);
            }
            if (hasWalkInData)
            {
                data.WalkInData = ReadCreateWalkInData(packet, indexes, "WalkInData");
            }
            if (hasDelveData)
            {
                data.DelveData = ReadCreateDelveData(packet, indexes, "DelveData");
            }
            if (hasChallengeModeData)
            {
                data.ChallengeModeData = ReadCreateChallengeModeData(packet, indexes, "ChallengeModeData");
            }
            return data;
        }

        public override IActivePlayerData ReadUpdateActivePlayerData(Packet packet, params object[] indexes)
        {
            var data = new ActivePlayerData();
            packet.ResetBitReader();
            var rawChangesMask = new int[13];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(13);
            var maskMask = new BitArray(rawMaskMask);
            for (var i = 0; i < 13; ++i)
                if (maskMask[i])
                    rawChangesMask[i] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            var hasQuestSession = false;
            var hasPetStable = false;
            var hasWalkInData = false;
            var hasDelveData = false;
            var hasChallengeModeData = false;
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.BackpackAutoSortDisabled = packet.ReadBit("BackpackAutoSortDisabled", indexes);
                }
                if (changesMask[2])
                {
                    data.BackpackSellJunkDisabled = packet.ReadBit("BackpackSellJunkDisabled", indexes);
                }
                if (changesMask[3])
                {
                    data.BankAutoSortDisabled = packet.ReadBit("BankAutoSortDisabled", indexes);
                }
                if (changesMask[4])
                {
                    data.SortBagsRightToLeft = packet.ReadBit("SortBagsRightToLeft", indexes);
                }
                if (changesMask[5])
                {
                    data.InsertItemsLeftToRight = packet.ReadBit("InsertItemsLeftToRight", indexes);
                }
                if (changesMask[6])
                {
                    data.HasPerksProgramPendingReward = packet.ReadBit("HasPerksProgramPendingReward", indexes);
                }
                if (changesMask[7])
                {
                    data.KnownTitles.ReadUpdateMask(packet);
                }
                if (changesMask[8])
                {
                    data.CharacterDataElements.ReadUpdateMask(packet);
                }
                if (changesMask[9])
                {
                    data.AccountDataElements.ReadUpdateMask(packet);
                }
                if (changesMask[10])
                {
                    data.PvpInfo.ReadUpdateMask(packet);
                }
            }
            if (changesMask[42])
            {
                for (var i = 0; i < 1; ++i)
                {
                    if (changesMask[43])
                    {
                        data.ResearchSites[i].ReadUpdateMask(packet);
                    }
                }
            }
            if (changesMask[44])
            {
                for (var i = 0; i < 1; ++i)
                {
                    if (changesMask[45])
                    {
                        data.ResearchSiteProgress[i].ReadUpdateMask(packet);
                    }
                }
            }
            if (changesMask[46])
            {
                for (var i = 0; i < 1; ++i)
                {
                    if (changesMask[47])
                    {
                        data.Research[i].ReadUpdateMask(packet);
                    }
                }
            }
            if (changesMask[42])
            {
                for (var i = 0; i < 1; ++i)
                {
                    if (changesMask[43])
                    {
                        for (var j = 0; j < data.ResearchSites[i].Count; ++j)
                        {
                            if (data.ResearchSites[i].UpdateMask[j])
                            {
                                data.ResearchSites[i][j] = packet.ReadUInt16("ResearchSites", indexes, i, j);
                            }
                        }
                    }
                }
            }
            if (changesMask[44])
            {
                for (var i = 0; i < 1; ++i)
                {
                    if (changesMask[45])
                    {
                        for (var j = 0; j < data.ResearchSiteProgress[i].Count; ++j)
                        {
                            if (data.ResearchSiteProgress[i].UpdateMask[j])
                            {
                                data.ResearchSiteProgress[i][j] = packet.ReadUInt32("ResearchSiteProgress", indexes, i, j);
                            }
                        }
                    }
                }
            }
            if (changesMask[46])
            {
                for (var i = 0; i < 1; ++i)
                {
                    if (changesMask[47])
                    {
                        for (var j = 0; j < data.Research[i].Count; ++j)
                        {
                            if (data.Research[i].UpdateMask[j])
                            {
                                data.Research[i][j] = ReadUpdateResearch(packet, indexes, "Research", i, j);
                            }
                        }
                    }
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[11])
                {
                    data.DailyQuestsCompleted.ReadUpdateMask(packet);
                }
                if (changesMask[12])
                {
                    data.Field_1328.ReadUpdateMask(packet);
                }
                if (changesMask[13])
                {
                    data.AvailableQuestLineXQuestIDs.ReadUpdateMask(packet);
                }
                if (changesMask[14])
                {
                    data.Heirlooms.ReadUpdateMask(packet);
                }
                if (changesMask[15])
                {
                    data.HeirloomFlags.ReadUpdateMask(packet);
                }
                if (changesMask[16])
                {
                    data.Toys.ReadUpdateMask(packet);
                }
                if (changesMask[17])
                {
                    data.ToyFlags.ReadUpdateMask(packet);
                }
                if (changesMask[18])
                {
                    data.Transmog.ReadUpdateMask(packet);
                }
                if (changesMask[19])
                {
                    data.ConditionalTransmog.ReadUpdateMask(packet);
                }
                if (changesMask[20])
                {
                    data.SelfResSpells.ReadUpdateMask(packet);
                }
                if (changesMask[21])
                {
                    data.RuneforgePowers.ReadUpdateMask(packet);
                }
                if (changesMask[22])
                {
                    data.TransmogIllusions.ReadUpdateMask(packet);
                }
                if (changesMask[23])
                {
                    data.WarbandScenes.ReadUpdateMask(packet);
                }
                if (changesMask[24])
                {
                    data.CharacterRestrictions.ReadUpdateMask(packet);
                }
                if (changesMask[25])
                {
                    data.SpellPctModByLabel.ReadUpdateMask(packet);
                }
                if (changesMask[26])
                {
                    data.SpellFlatModByLabel.ReadUpdateMask(packet);
                }
                if (changesMask[27])
                {
                    data.MawPowers.ReadUpdateMask(packet);
                }
                if (changesMask[28])
                {
                    data.MultiFloorExploration.ReadUpdateMask(packet);
                }
                if (changesMask[29])
                {
                    data.RecipeProgression.ReadUpdateMask(packet);
                }
                if (changesMask[30])
                {
                    data.ReplayedQuests.ReadUpdateMask(packet);
                }
                if (changesMask[31])
                {
                    data.TaskQuests.ReadUpdateMask(packet);
                }
            }
            if (changesMask[32])
            {
                if (changesMask[33])
                {
                    data.DisabledSpells.ReadUpdateMask(packet);
                }
                if (changesMask[34])
                {
                    data.CraftingOrders.ReadUpdateMask(packet);
                }
                if (changesMask[35])
                {
                    data.PersonalCraftingOrderCounts.ReadUpdateMask(packet);
                }
                if (changesMask[36])
                {
                    data.NpcCraftingOrders.ReadUpdateMask(packet);
                }
                if (changesMask[37])
                {
                    data.CategoryCooldownMods.ReadUpdateMask(packet);
                }
                if (changesMask[38])
                {
                    data.WeeklySpellUses.ReadUpdateMask(packet);
                }
                if (changesMask[39])
                {
                    data.TrackedCollectableSources.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[7])
                {
                    for (var i = 0; i < data.KnownTitles.Count; ++i)
                    {
                        if (data.KnownTitles.UpdateMask[i])
                        {
                            data.KnownTitles[i] = packet.ReadUInt64("KnownTitles", indexes, i);
                        }
                    }
                }
                if (changesMask[8])
                {
                    for (var i = 0; i < data.CharacterDataElements.Count; ++i)
                    {
                        if (data.CharacterDataElements.UpdateMask[i])
                        {
                            data.CharacterDataElements[i] = ReadUpdatePlayerDataElement(packet, indexes, "CharacterDataElements", i);
                        }
                    }
                }
                if (changesMask[9])
                {
                    for (var i = 0; i < data.AccountDataElements.Count; ++i)
                    {
                        if (data.AccountDataElements.UpdateMask[i])
                        {
                            data.AccountDataElements[i] = ReadUpdatePlayerDataElement(packet, indexes, "AccountDataElements", i);
                        }
                    }
                }
                if (changesMask[11])
                {
                    for (var i = 0; i < data.DailyQuestsCompleted.Count; ++i)
                    {
                        if (data.DailyQuestsCompleted.UpdateMask[i])
                        {
                            data.DailyQuestsCompleted[i] = packet.ReadInt32("DailyQuestsCompleted", indexes, i);
                        }
                    }
                }
                if (changesMask[12])
                {
                    for (var i = 0; i < data.Field_1328.Count; ++i)
                    {
                        if (data.Field_1328.UpdateMask[i])
                        {
                            data.Field_1328[i] = packet.ReadInt32("Field_1328", indexes, i);
                        }
                    }
                }
                if (changesMask[13])
                {
                    for (var i = 0; i < data.AvailableQuestLineXQuestIDs.Count; ++i)
                    {
                        if (data.AvailableQuestLineXQuestIDs.UpdateMask[i])
                        {
                            data.AvailableQuestLineXQuestIDs[i] = packet.ReadInt32("AvailableQuestLineXQuestIDs", indexes, i);
                        }
                    }
                }
                if (changesMask[14])
                {
                    for (var i = 0; i < data.Heirlooms.Count; ++i)
                    {
                        if (data.Heirlooms.UpdateMask[i])
                        {
                            data.Heirlooms[i] = packet.ReadInt32("Heirlooms", indexes, i);
                        }
                    }
                }
                if (changesMask[15])
                {
                    for (var i = 0; i < data.HeirloomFlags.Count; ++i)
                    {
                        if (data.HeirloomFlags.UpdateMask[i])
                        {
                            data.HeirloomFlags[i] = packet.ReadUInt32("HeirloomFlags", indexes, i);
                        }
                    }
                }
                if (changesMask[16])
                {
                    for (var i = 0; i < data.Toys.Count; ++i)
                    {
                        if (data.Toys.UpdateMask[i])
                        {
                            data.Toys[i] = packet.ReadInt32("Toys", indexes, i);
                        }
                    }
                }
                if (changesMask[17])
                {
                    for (var i = 0; i < data.ToyFlags.Count; ++i)
                    {
                        if (data.ToyFlags.UpdateMask[i])
                        {
                            data.ToyFlags[i] = packet.ReadUInt32("ToyFlags", indexes, i);
                        }
                    }
                }
                if (changesMask[18])
                {
                    for (var i = 0; i < data.Transmog.Count; ++i)
                    {
                        if (data.Transmog.UpdateMask[i])
                        {
                            data.Transmog[i] = packet.ReadUInt32("Transmog", indexes, i);
                        }
                    }
                }
                if (changesMask[19])
                {
                    for (var i = 0; i < data.ConditionalTransmog.Count; ++i)
                    {
                        if (data.ConditionalTransmog.UpdateMask[i])
                        {
                            data.ConditionalTransmog[i] = packet.ReadInt32("ConditionalTransmog", indexes, i);
                        }
                    }
                }
                if (changesMask[20])
                {
                    for (var i = 0; i < data.SelfResSpells.Count; ++i)
                    {
                        if (data.SelfResSpells.UpdateMask[i])
                        {
                            data.SelfResSpells[i] = packet.ReadInt32("SelfResSpells", indexes, i);
                        }
                    }
                }
                if (changesMask[21])
                {
                    for (var i = 0; i < data.RuneforgePowers.Count; ++i)
                    {
                        if (data.RuneforgePowers.UpdateMask[i])
                        {
                            data.RuneforgePowers[i] = packet.ReadUInt32("RuneforgePowers", indexes, i);
                        }
                    }
                }
                if (changesMask[22])
                {
                    for (var i = 0; i < data.TransmogIllusions.Count; ++i)
                    {
                        if (data.TransmogIllusions.UpdateMask[i])
                        {
                            data.TransmogIllusions[i] = packet.ReadUInt32("TransmogIllusions", indexes, i);
                        }
                    }
                }
                if (changesMask[23])
                {
                    for (var i = 0; i < data.WarbandScenes.Count; ++i)
                    {
                        if (data.WarbandScenes.UpdateMask[i])
                        {
                            data.WarbandScenes[i] = packet.ReadUInt32("WarbandScenes", indexes, i);
                        }
                    }
                }
                if (changesMask[25])
                {
                    for (var i = 0; i < data.SpellPctModByLabel.Count; ++i)
                    {
                        if (data.SpellPctModByLabel.UpdateMask[i])
                        {
                            data.SpellPctModByLabel[i] = ReadUpdateSpellPctModByLabel(packet, indexes, "SpellPctModByLabel", i);
                        }
                    }
                }
                if (changesMask[26])
                {
                    for (var i = 0; i < data.SpellFlatModByLabel.Count; ++i)
                    {
                        if (data.SpellFlatModByLabel.UpdateMask[i])
                        {
                            data.SpellFlatModByLabel[i] = ReadUpdateSpellFlatModByLabel(packet, indexes, "SpellFlatModByLabel", i);
                        }
                    }
                }
                if (changesMask[27])
                {
                    for (var i = 0; i < data.MawPowers.Count; ++i)
                    {
                        if (data.MawPowers.UpdateMask[i])
                        {
                            data.MawPowers[i] = ReadUpdateMawPower(packet, indexes, "MawPowers", i);
                        }
                    }
                }
                if (changesMask[28])
                {
                    for (var i = 0; i < data.MultiFloorExploration.Count; ++i)
                    {
                        if (data.MultiFloorExploration.UpdateMask[i])
                        {
                            data.MultiFloorExploration[i] = ReadUpdateMultiFloorExplore(packet, indexes, "MultiFloorExploration", i);
                        }
                    }
                }
                if (changesMask[29])
                {
                    for (var i = 0; i < data.RecipeProgression.Count; ++i)
                    {
                        if (data.RecipeProgression.UpdateMask[i])
                        {
                            data.RecipeProgression[i] = ReadUpdateRecipeProgressionInfo(packet, indexes, "RecipeProgression", i);
                        }
                    }
                }
                if (changesMask[30])
                {
                    for (var i = 0; i < data.ReplayedQuests.Count; ++i)
                    {
                        if (data.ReplayedQuests.UpdateMask[i])
                        {
                            data.ReplayedQuests[i] = ReadUpdateReplayedQuest(packet, indexes, "ReplayedQuests", i);
                        }
                    }
                }
                if (changesMask[31])
                {
                    for (var i = 0; i < data.TaskQuests.Count; ++i)
                    {
                        if (data.TaskQuests.UpdateMask[i])
                        {
                            data.TaskQuests[i] = ReadUpdateQuestLog(packet, indexes, "TaskQuests", i);
                        }
                    }
                }
            }
            if (changesMask[32])
            {
                if (changesMask[33])
                {
                    for (var i = 0; i < data.DisabledSpells.Count; ++i)
                    {
                        if (data.DisabledSpells.UpdateMask[i])
                        {
                            data.DisabledSpells[i] = packet.ReadInt32("DisabledSpells", indexes, i);
                        }
                    }
                }
                if (changesMask[35])
                {
                    for (var i = 0; i < data.PersonalCraftingOrderCounts.Count; ++i)
                    {
                        if (data.PersonalCraftingOrderCounts.UpdateMask[i])
                        {
                            data.PersonalCraftingOrderCounts[i] = ReadUpdatePersonalCraftingOrderCount(packet, indexes, "PersonalCraftingOrderCounts", i);
                        }
                    }
                }
                if (changesMask[36])
                {
                    for (var i = 0; i < data.NpcCraftingOrders.Count; ++i)
                    {
                        if (data.NpcCraftingOrders.UpdateMask[i])
                        {
                            data.NpcCraftingOrders[i] = ReadUpdateNPCCraftingOrderInfo(packet, indexes, "NpcCraftingOrders", i);
                        }
                    }
                }
                if (changesMask[37])
                {
                    for (var i = 0; i < data.CategoryCooldownMods.Count; ++i)
                    {
                        if (data.CategoryCooldownMods.UpdateMask[i])
                        {
                            data.CategoryCooldownMods[i] = ReadUpdateCategoryCooldownMod(packet, indexes, "CategoryCooldownMods", i);
                        }
                    }
                }
                if (changesMask[38])
                {
                    for (var i = 0; i < data.WeeklySpellUses.Count; ++i)
                    {
                        if (data.WeeklySpellUses.UpdateMask[i])
                        {
                            data.WeeklySpellUses[i] = ReadUpdateWeeklySpellUse(packet, indexes, "WeeklySpellUses", i);
                        }
                    }
                }
                if (changesMask[39])
                {
                    for (var i = 0; i < data.TrackedCollectableSources.Count; ++i)
                    {
                        if (data.TrackedCollectableSources.UpdateMask[i])
                        {
                            data.TrackedCollectableSources[i] = ReadUpdateCollectableSourceTrackedData(packet, indexes, "TrackedCollectableSources", i);
                        }
                    }
                }
            }
            packet.ResetBitReader();
            if (changesMask[32])
            {
                if (changesMask[40])
                {
                    data.CharacterBankTabSettings.ReadUpdateMask(packet, 3);
                }
                if (changesMask[41])
                {
                    data.AccountBankTabSettings.ReadUpdateMask(packet, 3);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[10])
                {
                    for (var i = 0; i < data.PvpInfo.Count; ++i)
                    {
                        if (data.PvpInfo.UpdateMask[i])
                        {
                            data.PvpInfo[i] = ReadUpdatePVPInfo(packet, indexes, "PvpInfo", i);
                        }
                    }
                }
                if (changesMask[24])
                {
                    for (var i = 0; i < data.CharacterRestrictions.Count; ++i)
                    {
                        if (data.CharacterRestrictions.UpdateMask[i])
                        {
                            data.CharacterRestrictions[i] = ReadUpdateCharacterRestriction(packet, indexes, "CharacterRestrictions", i);
                        }
                    }
                }
            }
            if (changesMask[32])
            {
                if (changesMask[34])
                {
                    for (var i = 0; i < data.CraftingOrders.Count; ++i)
                    {
                        if (data.CraftingOrders.UpdateMask[i])
                        {
                            data.CraftingOrders[i] = ReadUpdateCraftingOrder(packet, indexes, "CraftingOrders", i);
                        }
                    }
                }
                if (changesMask[40])
                {
                    for (var i = 0; i < data.CharacterBankTabSettings.Count; ++i)
                    {
                        if (data.CharacterBankTabSettings.UpdateMask[i])
                        {
                            data.CharacterBankTabSettings[i] = ReadUpdateBankTabSettings(packet, indexes, "CharacterBankTabSettings", i);
                        }
                    }
                }
                if (changesMask[41])
                {
                    for (var i = 0; i < data.AccountBankTabSettings.Count; ++i)
                    {
                        if (data.AccountBankTabSettings.UpdateMask[i])
                        {
                            data.AccountBankTabSettings[i] = ReadUpdateBankTabSettings(packet, indexes, "AccountBankTabSettings", i);
                        }
                    }
                }
                if (changesMask[48])
                {
                    data.FarsightObject = packet.ReadPackedGuid128("FarsightObject", indexes);
                }
                if (changesMask[49])
                {
                    data.SummonedBattlePetGUID = packet.ReadPackedGuid128("SummonedBattlePetGUID", indexes);
                }
                if (changesMask[50])
                {
                    data.Coinage = packet.ReadUInt64("Coinage", indexes);
                }
                if (changesMask[51])
                {
                    data.AccountBankCoinage = packet.ReadUInt64("AccountBankCoinage", indexes);
                }
                if (changesMask[52])
                {
                    data.XP = packet.ReadInt32("XP", indexes);
                }
                if (changesMask[53])
                {
                    data.NextLevelXP = packet.ReadInt32("NextLevelXP", indexes);
                }
                if (changesMask[54])
                {
                    data.TrialXP = packet.ReadInt32("TrialXP", indexes);
                }
                if (changesMask[55])
                {
                    data.Skill = ReadUpdateSkillInfo(packet, indexes, "Skill");
                }
                if (changesMask[56])
                {
                    data.CharacterPoints = packet.ReadInt32("CharacterPoints", indexes);
                }
                if (changesMask[57])
                {
                    data.MaxTalentTiers = packet.ReadInt32("MaxTalentTiers", indexes);
                }
                if (changesMask[58])
                {
                    data.TrackCreatureMask = packet.ReadUInt32("TrackCreatureMask", indexes);
                }
                if (changesMask[59])
                {
                    data.MainhandExpertise = packet.ReadSingle("MainhandExpertise", indexes);
                }
                if (changesMask[60])
                {
                    data.OffhandExpertise = packet.ReadSingle("OffhandExpertise", indexes);
                }
                if (changesMask[61])
                {
                    data.RangedExpertise = packet.ReadSingle("RangedExpertise", indexes);
                }
                if (changesMask[62])
                {
                    data.CombatRatingExpertise = packet.ReadSingle("CombatRatingExpertise", indexes);
                }
                if (changesMask[63])
                {
                    data.BlockPercentage = packet.ReadSingle("BlockPercentage", indexes);
                }
                if (changesMask[64])
                {
                    data.DodgePercentage = packet.ReadSingle("DodgePercentage", indexes);
                }
                if (changesMask[65])
                {
                    data.DodgePercentageFromAttribute = packet.ReadSingle("DodgePercentageFromAttribute", indexes);
                }
                if (changesMask[66])
                {
                    data.ParryPercentage = packet.ReadSingle("ParryPercentage", indexes);
                }
                if (changesMask[67])
                {
                    data.ParryPercentageFromAttribute = packet.ReadSingle("ParryPercentageFromAttribute", indexes);
                }
                if (changesMask[68])
                {
                    data.CritPercentage = packet.ReadSingle("CritPercentage", indexes);
                }
                if (changesMask[69])
                {
                    data.RangedCritPercentage = packet.ReadSingle("RangedCritPercentage", indexes);
                }
            }
            if (changesMask[70])
            {
                if (changesMask[71])
                {
                    data.OffhandCritPercentage = packet.ReadSingle("OffhandCritPercentage", indexes);
                }
                if (changesMask[72])
                {
                    data.SpellCritPercentage = packet.ReadSingle("SpellCritPercentage", indexes);
                }
                if (changesMask[73])
                {
                    data.ShieldBlock = packet.ReadInt32("ShieldBlock", indexes);
                }
                if (changesMask[74])
                {
                    data.ShieldBlockCritPercentage = packet.ReadSingle("ShieldBlockCritPercentage", indexes);
                }
                if (changesMask[75])
                {
                    data.Mastery = packet.ReadSingle("Mastery", indexes);
                }
                if (changesMask[76])
                {
                    data.Speed = packet.ReadSingle("Speed", indexes);
                }
                if (changesMask[77])
                {
                    data.Avoidance = packet.ReadSingle("Avoidance", indexes);
                }
                if (changesMask[78])
                {
                    data.Sturdiness = packet.ReadSingle("Sturdiness", indexes);
                }
                if (changesMask[79])
                {
                    data.Versatility = packet.ReadInt32("Versatility", indexes);
                }
                if (changesMask[80])
                {
                    data.VersatilityBonus = packet.ReadSingle("VersatilityBonus", indexes);
                }
                if (changesMask[81])
                {
                    data.PvpPowerDamage = packet.ReadSingle("PvpPowerDamage", indexes);
                }
                if (changesMask[82])
                {
                    data.PvpPowerHealing = packet.ReadSingle("PvpPowerHealing", indexes);
                }
                if (changesMask[83])
                {
                    data.BitVectors = ReadUpdateBitVectors(packet, indexes, "BitVectors");
                }
                if (changesMask[84])
                {
                    data.ModHealingDonePos = packet.ReadInt32("ModHealingDonePos", indexes);
                }
                if (changesMask[85])
                {
                    data.ModHealingPercent = packet.ReadSingle("ModHealingPercent", indexes);
                }
                if (changesMask[86])
                {
                    data.ModPeriodicHealingDonePercent = packet.ReadSingle("ModPeriodicHealingDonePercent", indexes);
                }
                if (changesMask[87])
                {
                    data.ModSpellPowerPercent = packet.ReadSingle("ModSpellPowerPercent", indexes);
                }
                if (changesMask[88])
                {
                    data.ModResiliencePercent = packet.ReadSingle("ModResiliencePercent", indexes);
                }
                if (changesMask[89])
                {
                    data.OverrideSpellPowerByAPPercent = packet.ReadSingle("OverrideSpellPowerByAPPercent", indexes);
                }
                if (changesMask[90])
                {
                    data.OverrideAPBySpellPowerPercent = packet.ReadSingle("OverrideAPBySpellPowerPercent", indexes);
                }
                if (changesMask[91])
                {
                    data.ModTargetResistance = packet.ReadInt32("ModTargetResistance", indexes);
                }
                if (changesMask[92])
                {
                    data.ModTargetPhysicalResistance = packet.ReadInt32("ModTargetPhysicalResistance", indexes);
                }
                if (changesMask[93])
                {
                    data.LocalFlags = packet.ReadUInt32("LocalFlags", indexes);
                }
                if (changesMask[94])
                {
                    data.GrantableLevels = packet.ReadByte("GrantableLevels", indexes);
                }
                if (changesMask[95])
                {
                    data.MultiActionBars = packet.ReadByte("MultiActionBars", indexes);
                }
                if (changesMask[96])
                {
                    data.LifetimeMaxRank = packet.ReadByte("LifetimeMaxRank", indexes);
                }
                if (changesMask[97])
                {
                    data.NumRespecs = packet.ReadByte("NumRespecs", indexes);
                }
                if (changesMask[98])
                {
                    data.PvpMedals = packet.ReadUInt32("PvpMedals", indexes);
                }
                if (changesMask[99])
                {
                    data.TodayHonorableKills = packet.ReadUInt16("TodayHonorableKills", indexes);
                }
                if (changesMask[100])
                {
                    data.YesterdayHonorableKills = packet.ReadUInt16("YesterdayHonorableKills", indexes);
                }
                if (changesMask[101])
                {
                    data.LifetimeHonorableKills = packet.ReadUInt32("LifetimeHonorableKills", indexes);
                }
            }
            if (changesMask[102])
            {
                if (changesMask[103])
                {
                    data.WatchedFactionIndex = packet.ReadInt32("WatchedFactionIndex", indexes);
                }
                if (changesMask[104])
                {
                    data.MaxLevel = packet.ReadInt32("MaxLevel", indexes);
                }
                if (changesMask[105])
                {
                    data.ScalingPlayerLevelDelta = packet.ReadInt32("ScalingPlayerLevelDelta", indexes);
                }
                if (changesMask[106])
                {
                    data.MaxCreatureScalingLevel = packet.ReadInt32("MaxCreatureScalingLevel", indexes);
                }
                if (changesMask[107])
                {
                    data.PetSpellPower = packet.ReadInt32("PetSpellPower", indexes);
                }
                if (changesMask[108])
                {
                    data.UiHitModifier = packet.ReadSingle("UiHitModifier", indexes);
                }
                if (changesMask[109])
                {
                    data.UiSpellHitModifier = packet.ReadSingle("UiSpellHitModifier", indexes);
                }
                if (changesMask[110])
                {
                    data.HomeRealmTimeOffset = packet.ReadInt32("HomeRealmTimeOffset", indexes);
                }
                if (changesMask[111])
                {
                    data.ModPetHaste = packet.ReadSingle("ModPetHaste", indexes);
                }
                if (changesMask[112])
                {
                    data.JailersTowerLevelMax = packet.ReadSByte("JailersTowerLevelMax", indexes);
                }
                if (changesMask[113])
                {
                    data.JailersTowerLevel = packet.ReadSByte("JailersTowerLevel", indexes);
                }
                if (changesMask[114])
                {
                    data.LocalRegenFlags = packet.ReadByte("LocalRegenFlags", indexes);
                }
                if (changesMask[115])
                {
                    data.AuraVision = packet.ReadByte("AuraVision", indexes);
                }
                if (changesMask[116])
                {
                    data.NumBackpackSlots = packet.ReadByte("NumBackpackSlots", indexes);
                }
                if (changesMask[117])
                {
                    data.OverrideSpellsID = packet.ReadInt32("OverrideSpellsID", indexes);
                }
                if (changesMask[118])
                {
                    data.LootSpecID = packet.ReadUInt16("LootSpecID", indexes);
                }
                if (changesMask[119])
                {
                    data.OverrideZonePVPType = packet.ReadUInt32("OverrideZonePVPType", indexes);
                }
                if (changesMask[120])
                {
                    data.Honor = packet.ReadInt32("Honor", indexes);
                }
                if (changesMask[121])
                {
                    data.HonorNextLevel = packet.ReadInt32("HonorNextLevel", indexes);
                }
                if (changesMask[122])
                {
                    data.PerksProgramCurrency = packet.ReadInt32("PerksProgramCurrency", indexes);
                }
                if (changesMask[123])
                {
                    data.NumBankSlots = packet.ReadByte("NumBankSlots", indexes);
                }
                if (changesMask[124])
                {
                    data.NumCharacterBankTabs = packet.ReadByte("NumCharacterBankTabs", indexes);
                }
                if (changesMask[125])
                {
                    data.NumAccountBankTabs = packet.ReadByte("NumAccountBankTabs", indexes);
                }
                if (changesMask[130])
                {
                    data.UiChromieTimeExpansionID = packet.ReadInt32("UiChromieTimeExpansionID", indexes);
                }
                if (changesMask[131])
                {
                    data.TimerunningSeasonID = packet.ReadInt32("TimerunningSeasonID", indexes);
                }
                if (changesMask[132])
                {
                    data.TransportServerTime = packet.ReadInt32("TransportServerTime", indexes);
                }
                if (changesMask[133])
                {
                    data.WeeklyRewardsPeriodSinceOrigin = packet.ReadUInt32("WeeklyRewardsPeriodSinceOrigin", indexes);
                }
            }
            if (changesMask[134])
            {
                if (changesMask[135])
                {
                    data.DEBUGSoulbindConduitRank = packet.ReadInt16("DEBUGSoulbindConduitRank", indexes);
                }
                if (changesMask[138])
                {
                    data.ActiveCombatTraitConfigID = packet.ReadUInt32("ActiveCombatTraitConfigID", indexes);
                }
                if (changesMask[139])
                {
                    data.ItemUpgradeHighOnehandWeaponItemID = packet.ReadInt32("ItemUpgradeHighOnehandWeaponItemID", indexes);
                }
                if (changesMask[140])
                {
                    data.ItemUpgradeHighFingerItemID = packet.ReadInt32("ItemUpgradeHighFingerItemID", indexes);
                }
                if (changesMask[141])
                {
                    data.ItemUpgradeHighFingerWatermark = packet.ReadSingle("ItemUpgradeHighFingerWatermark", indexes);
                }
                if (changesMask[142])
                {
                    data.ItemUpgradeHighTrinketItemID = packet.ReadInt32("ItemUpgradeHighTrinketItemID", indexes);
                }
                if (changesMask[143])
                {
                    data.ItemUpgradeHighTrinketWatermark = packet.ReadSingle("ItemUpgradeHighTrinketWatermark", indexes);
                }
                if (changesMask[144])
                {
                    data.LootHistoryInstanceID = packet.ReadUInt64("LootHistoryInstanceID", indexes);
                }
                if (changesMask[146])
                {
                    data.RequiredMountCapabilityFlags = packet.ReadByte("RequiredMountCapabilityFlags", indexes);
                }
            }
            packet.ResetBitReader();
            if (changesMask[102])
            {
                hasQuestSession = packet.ReadBit("HasQuestSession", indexes);
            }
            if (changesMask[134])
            {
                hasPetStable = packet.ReadBit("HasPetStable", indexes);
                hasWalkInData = packet.ReadBit("HasWalkInData", indexes);
                hasDelveData = packet.ReadBit("HasDelveData", indexes);
                hasChallengeModeData = packet.ReadBit("HasChallengeModeData", indexes);
            }
            if (changesMask[102])
            {
                if (changesMask[126])
                {
                    data.ResearchHistory = ReadUpdateResearchHistory(packet, indexes, "ResearchHistory");
                }
                if (changesMask[128])
                {
                    if (hasQuestSession)
                    {
                        data.QuestSession = ReadUpdateQuestSession(packet, indexes, "QuestSession");
                    }
                }
                if (changesMask[127])
                {
                    Substructures.PerksProgramHandler.ReadPerksVendorItem(packet, indexes, "FrozenPerksVendorItem");
                }
                if (changesMask[129])
                {
                    data.Field_1410 = ReadUpdateActivePlayerUnk901(packet, indexes, "Field_1410");
                }
            }
            if (changesMask[134])
            {
                if (changesMask[136])
                {
                    Substructures.MythicPlusHandler.ReadDungeonScoreData(packet, indexes, "DungeonScore");
                }
                if (changesMask[137])
                {
                    var updateTypeTraitConfigs = packet.ReadByte();
                    if (updateTypeTraitConfigs != 0)
                    {
                        var mapSizeTraitConfigs = packet.ReadUInt32();
                        for (var m = 0u; m < mapSizeTraitConfigs; ++m)
                        {
                            var key = packet.ReadInt32("Key", indexes, m);
                            data.TraitConfigs[key] = ReadUpdateTraitConfig(packet, indexes, "Value", m);
                        }
                    }
                    else
                    {
                        var changesCountTraitConfigs = packet.ReadUInt16();
                        for (var m = 0u; m < changesCountTraitConfigs; ++m)
                        {
                            var key = packet.ReadInt32("Key", indexes, m);
                            var changeType = packet.ReadByte("ChangeType", indexes, m);
                            if (changeType == 2)
                                continue;
                            data.TraitConfigs[key] = ReadUpdateTraitConfig(packet, indexes, "Value", m);
                        }
                    }
                }
                if (changesMask[145])
                {
                    if (hasPetStable)
                    {
                        data.PetStable = ReadUpdateStableInfo(packet, indexes, "PetStable");
                    }
                }
                if (changesMask[147])
                {
                    if (hasWalkInData)
                    {
                        data.WalkInData = ReadUpdateWalkInData(packet, indexes, "WalkInData");
                    }
                }
                if (changesMask[148])
                {
                    if (hasDelveData)
                    {
                        data.DelveData = ReadUpdateDelveData(packet, indexes, "DelveData");
                    }
                }
                if (changesMask[149])
                {
                    if (hasChallengeModeData)
                    {
                        data.ChallengeModeData = ReadUpdateChallengeModeData(packet, indexes, "ChallengeModeData");
                    }
                }
            }
            if (changesMask[150])
            {
                for (var i = 0; i < 105; ++i)
                {
                    if (changesMask[151 + i])
                    {
                        data.InvSlots[i] = packet.ReadPackedGuid128("InvSlots", indexes, i);
                    }
                }
            }
            if (changesMask[256])
            {
                for (var i = 0; i < 2; ++i)
                {
                    if (changesMask[257 + i])
                    {
                        data.RestInfo[i] = ReadUpdateRestInfo(packet, indexes, "RestInfo", i);
                    }
                }
            }
            if (changesMask[259])
            {
                for (var i = 0; i < 7; ++i)
                {
                    if (changesMask[260 + i])
                    {
                        data.ModDamageDonePos[i] = packet.ReadInt32("ModDamageDonePos", indexes, i);
                    }
                    if (changesMask[267 + i])
                    {
                        data.ModDamageDoneNeg[i] = packet.ReadInt32("ModDamageDoneNeg", indexes, i);
                    }
                    if (changesMask[274 + i])
                    {
                        data.ModDamageDonePercent[i] = packet.ReadSingle("ModDamageDonePercent", indexes, i);
                    }
                    if (changesMask[281 + i])
                    {
                        data.ModHealingDonePercent[i] = packet.ReadSingle("ModHealingDonePercent", indexes, i);
                    }
                }
            }
            if (changesMask[288])
            {
                for (var i = 0; i < 3; ++i)
                {
                    if (changesMask[289 + i])
                    {
                        data.WeaponDmgMultipliers[i] = packet.ReadSingle("WeaponDmgMultipliers", indexes, i);
                    }
                    if (changesMask[292 + i])
                    {
                        data.WeaponAtkSpeedMultipliers[i] = packet.ReadSingle("WeaponAtkSpeedMultipliers", indexes, i);
                    }
                }
            }
            if (changesMask[295])
            {
                for (var i = 0; i < 12; ++i)
                {
                    if (changesMask[296 + i])
                    {
                        data.BuybackPrice[i] = packet.ReadUInt32("BuybackPrice", indexes, i);
                    }
                    if (changesMask[308 + i])
                    {
                        data.BuybackTimestamp[i] = packet.ReadInt64("BuybackTimestamp", indexes, i);
                    }
                }
            }
            if (changesMask[320])
            {
                for (var i = 0; i < 32; ++i)
                {
                    if (changesMask[321 + i])
                    {
                        data.CombatRatings[i] = packet.ReadInt32("CombatRatings", indexes, i);
                    }
                }
            }
            if (changesMask[353])
            {
                for (var i = 0; i < 4; ++i)
                {
                    if (changesMask[354 + i])
                    {
                        data.NoReagentCostMask[i] = packet.ReadUInt32("NoReagentCostMask", indexes, i);
                    }
                }
            }
            if (changesMask[358])
            {
                for (var i = 0; i < 2; ++i)
                {
                    if (changesMask[359 + i])
                    {
                        data.ProfessionSkillLine[i] = packet.ReadInt32("ProfessionSkillLine", indexes, i);
                    }
                }
            }
            if (changesMask[361])
            {
                for (var i = 0; i < 5; ++i)
                {
                    if (changesMask[362 + i])
                    {
                        data.BagSlotFlags[i] = packet.ReadUInt32("BagSlotFlags", indexes, i);
                    }
                }
            }
            if (changesMask[367])
            {
                for (var i = 0; i < 17; ++i)
                {
                    if (changesMask[368 + i])
                    {
                        data.ItemUpgradeHighWatermark[i] = packet.ReadSingle("ItemUpgradeHighWatermark", indexes, i);
                    }
                }
            }
            return data;
        }

        public static IGameObjectAssistActionData ReadCreateGameObjectAssistActionData(Packet packet, params object[] indexes)
        {
            var data = new GameObjectAssistActionData();
            packet.ResetBitReader();
            data.PlayerName = new string('*', (int)packet.ReadBits(6));
            data.MonsterName = new string('*', (int)packet.ReadBits(11));
            data.VirtualRealmAddress = packet.ReadUInt32("VirtualRealmAddress", indexes);
            data.Sex = packet.ReadByte("Sex", indexes);
            data.Time = packet.ReadInt64("Time", indexes);
            data.DelveTier = packet.ReadInt32("DelveTier", indexes);
            data.PlayerName = packet.ReadWoWString("PlayerName", data.PlayerName.Length, indexes);
            if (data.MonsterName.Length > 1)
            {
                data.MonsterName = packet.ReadWoWString("MonsterName", data.MonsterName.Length - 1, indexes);
                packet.ReadByte();
            }
            else
                data.MonsterName = string.Empty;
            return data;
        }

        public static IGameObjectAssistActionData ReadUpdateGameObjectAssistActionData(Packet packet, params object[] indexes)
        {
            var data = new GameObjectAssistActionData();
            packet.ResetBitReader();
            data.PlayerName = new string('*', (int)packet.ReadBits(6));
            data.MonsterName = new string('*', (int)packet.ReadBits(11));
            data.VirtualRealmAddress = packet.ReadUInt32("VirtualRealmAddress", indexes);
            data.Sex = packet.ReadByte("Sex", indexes);
            data.Time = packet.ReadInt64("Time", indexes);
            data.DelveTier = packet.ReadInt32("DelveTier", indexes);
            data.PlayerName = packet.ReadWoWString("PlayerName", data.PlayerName.Length, indexes);
            if (data.MonsterName.Length > 1)
            {
                data.MonsterName = packet.ReadWoWString("MonsterName", data.MonsterName.Length - 1, indexes);
                packet.ReadByte();
            }
            else
                data.MonsterName = string.Empty;
            return data;
        }

        public override IGameObjectData ReadCreateGameObjectData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new GameObjectData();
            packet.ResetBitReader();
            var hasAssistActionData = false;
            data.DisplayID = packet.ReadInt32("DisplayID", indexes);
            data.SpellVisualID = packet.ReadUInt32("SpellVisualID", indexes);
            data.StateSpellVisualID = packet.ReadUInt32("StateSpellVisualID", indexes);
            data.SpawnTrackingStateAnimID = packet.ReadUInt32("SpawnTrackingStateAnimID", indexes);
            data.SpawnTrackingStateAnimKitID = packet.ReadUInt32("SpawnTrackingStateAnimKitID", indexes);
            data.StateWorldEffectIDs = new System.Nullable<uint>[packet.ReadUInt32()];
            data.StateWorldEffectsQuestObjectiveID = packet.ReadUInt32("StateWorldEffectsQuestObjectiveID", indexes);
            for (var i = 0; i < data.StateWorldEffectIDs.Length; ++i)
            {
                data.StateWorldEffectIDs[i] = packet.ReadUInt32("StateWorldEffectIDs", indexes, i);
            }
            data.CreatedBy = packet.ReadPackedGuid128("CreatedBy", indexes);
            data.GuildGUID = packet.ReadPackedGuid128("GuildGUID", indexes);
            data.Flags = packet.ReadUInt32("Flags", indexes);
            data.ParentRotation = packet.ReadQuaternion("ParentRotation", indexes);
            data.FactionTemplate = packet.ReadInt32("FactionTemplate", indexes);
            data.State = packet.ReadSByte("State", indexes);
            data.TypeID = packet.ReadSByte("TypeID", indexes);
            data.PercentHealth = packet.ReadByte("PercentHealth", indexes);
            data.ArtKit = packet.ReadUInt32("ArtKit", indexes);
            data.EnableDoodadSets.Resize(packet.ReadUInt32());
            data.CustomParam = packet.ReadUInt32("CustomParam", indexes);
            data.Level = packet.ReadInt32("Level", indexes);
            data.AnimGroupInstance = packet.ReadUInt32("AnimGroupInstance", indexes);
            data.UiWidgetItemID = packet.ReadUInt32("UiWidgetItemID", indexes);
            data.UiWidgetItemQuality = packet.ReadUInt32("UiWidgetItemQuality", indexes);
            data.UiWidgetItemUnknown1000 = packet.ReadUInt32("UiWidgetItemUnknown1000", indexes);
            data.WorldEffects.Resize(packet.ReadUInt32());
            for (var i = 0; i < data.EnableDoodadSets.Count; ++i)
            {
                data.EnableDoodadSets[i] = packet.ReadInt32("EnableDoodadSets", indexes, i);
            }
            for (var i = 0; i < data.WorldEffects.Count; ++i)
            {
                data.WorldEffects[i] = packet.ReadInt32("WorldEffects", indexes, i);
            }
            hasAssistActionData = packet.ReadBit("HasAssistActionData", indexes);
            packet.ResetBitReader();
            if (hasAssistActionData)
            {
                data.AssistActionData = ReadCreateGameObjectAssistActionData(packet, indexes, "AssistActionData");
            }
            return data;
        }

        public override IGameObjectData ReadUpdateGameObjectData(Packet packet, params object[] indexes)
        {
            var data = new GameObjectData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(26);
            var changesMask = new BitArray(rawChangesMask);

            var hasAssistActionData = false;
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.StateWorldEffectIDs = Enumerable.Range(0, (int)packet.ReadBits(32)).Select(x => new uint()).Cast<System.Nullable<uint>>().ToArray();
                    for (var i = 0; i < data.StateWorldEffectIDs.Length; ++i)
                    {
                        data.StateWorldEffectIDs[i] = packet.ReadUInt32("StateWorldEffectIDs", indexes, i);
                    }
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[2])
                {
                    data.EnableDoodadSets.ReadUpdateMask(packet);
                }
                if (changesMask[3])
                {
                    data.WorldEffects.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[2])
                {
                    for (var i = 0; i < data.EnableDoodadSets.Count; ++i)
                    {
                        if (data.EnableDoodadSets.UpdateMask[i])
                        {
                            data.EnableDoodadSets[i] = packet.ReadInt32("EnableDoodadSets", indexes, i);
                        }
                    }
                }
                if (changesMask[3])
                {
                    for (var i = 0; i < data.WorldEffects.Count; ++i)
                    {
                        if (data.WorldEffects.UpdateMask[i])
                        {
                            data.WorldEffects[i] = packet.ReadInt32("WorldEffects", indexes, i);
                        }
                    }
                }
                if (changesMask[4])
                {
                    data.DisplayID = packet.ReadInt32("DisplayID", indexes);
                }
                if (changesMask[5])
                {
                    data.SpellVisualID = packet.ReadUInt32("SpellVisualID", indexes);
                }
                if (changesMask[6])
                {
                    data.StateSpellVisualID = packet.ReadUInt32("StateSpellVisualID", indexes);
                }
                if (changesMask[7])
                {
                    data.SpawnTrackingStateAnimID = packet.ReadUInt32("SpawnTrackingStateAnimID", indexes);
                }
                if (changesMask[8])
                {
                    data.SpawnTrackingStateAnimKitID = packet.ReadUInt32("SpawnTrackingStateAnimKitID", indexes);
                }
                if (changesMask[9])
                {
                    data.StateWorldEffectsQuestObjectiveID = packet.ReadUInt32("StateWorldEffectsQuestObjectiveID", indexes);
                }
                if (changesMask[10])
                {
                    data.CreatedBy = packet.ReadPackedGuid128("CreatedBy", indexes);
                }
                if (changesMask[11])
                {
                    data.GuildGUID = packet.ReadPackedGuid128("GuildGUID", indexes);
                }
                if (changesMask[12])
                {
                    data.Flags = packet.ReadUInt32("Flags", indexes);
                }
                if (changesMask[13])
                {
                    data.ParentRotation = packet.ReadQuaternion("ParentRotation", indexes);
                }
                if (changesMask[14])
                {
                    data.FactionTemplate = packet.ReadInt32("FactionTemplate", indexes);
                }
                if (changesMask[15])
                {
                    data.State = packet.ReadSByte("State", indexes);
                }
                if (changesMask[16])
                {
                    data.TypeID = packet.ReadSByte("TypeID", indexes);
                }
                if (changesMask[17])
                {
                    data.PercentHealth = packet.ReadByte("PercentHealth", indexes);
                }
                if (changesMask[18])
                {
                    data.ArtKit = packet.ReadUInt32("ArtKit", indexes);
                }
                if (changesMask[19])
                {
                    data.CustomParam = packet.ReadUInt32("CustomParam", indexes);
                }
                if (changesMask[20])
                {
                    data.Level = packet.ReadInt32("Level", indexes);
                }
                if (changesMask[21])
                {
                    data.AnimGroupInstance = packet.ReadUInt32("AnimGroupInstance", indexes);
                }
                if (changesMask[22])
                {
                    data.UiWidgetItemID = packet.ReadUInt32("UiWidgetItemID", indexes);
                }
                if (changesMask[23])
                {
                    data.UiWidgetItemQuality = packet.ReadUInt32("UiWidgetItemQuality", indexes);
                }
                if (changesMask[24])
                {
                    data.UiWidgetItemUnknown1000 = packet.ReadUInt32("UiWidgetItemUnknown1000", indexes);
                }
                hasAssistActionData = packet.ReadBit("HasAssistActionData", indexes);
            packet.ResetBitReader();
                if (changesMask[25])
                {
                    if (hasAssistActionData)
                    {
                        data.AssistActionData = ReadUpdateGameObjectAssistActionData(packet, indexes, "AssistActionData");
                    }
                }
            }
            return data;
        }

        public override IDynamicObjectData ReadCreateDynamicObjectData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new DynamicObjectData();
            packet.ResetBitReader();
            data.Caster = packet.ReadPackedGuid128("Caster", indexes);
            data.Type = packet.ReadByte("Type", indexes);
            data.SpellVisual = ReadCreateSpellCastVisual(packet, indexes, "SpellVisual");
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.Radius = packet.ReadSingle("Radius", indexes);
            data.CastTime = packet.ReadUInt32("CastTime", indexes);
            return data;
        }

        public override IDynamicObjectData ReadUpdateDynamicObjectData(Packet packet, params object[] indexes)
        {
            var data = new DynamicObjectData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(7);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Caster = packet.ReadPackedGuid128("Caster", indexes);
                }
                if (changesMask[2])
                {
                    data.Type = packet.ReadByte("Type", indexes);
                }
                if (changesMask[3])
                {
                    data.SpellVisual = ReadUpdateSpellCastVisual(packet, indexes, "SpellVisual");
                }
                if (changesMask[4])
                {
                    data.SpellID = packet.ReadInt32("SpellID", indexes);
                }
                if (changesMask[5])
                {
                    data.Radius = packet.ReadSingle("Radius", indexes);
                }
                if (changesMask[6])
                {
                    data.CastTime = packet.ReadUInt32("CastTime", indexes);
                }
            }
            return data;
        }

        public override ICorpseData ReadCreateCorpseData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new CorpseData();
            packet.ResetBitReader();
            data.DynamicFlags = packet.ReadUInt32("DynamicFlags", indexes);
            data.Owner = packet.ReadPackedGuid128("Owner", indexes);
            data.PartyGUID = packet.ReadPackedGuid128("PartyGUID", indexes);
            data.GuildGUID = packet.ReadPackedGuid128("GuildGUID", indexes);
            data.DisplayID = packet.ReadUInt32("DisplayID", indexes);
            for (var i = 0; i < 19; ++i)
            {
                data.Items[i] = packet.ReadUInt32("Items", indexes, i);
            }
            data.RaceID = packet.ReadByte("RaceID", indexes);
            data.Sex = packet.ReadByte("Sex", indexes);
            data.Class = packet.ReadByte("Class", indexes);
            data.Customizations.Resize(packet.ReadUInt32());
            data.Flags = packet.ReadUInt32("Flags", indexes);
            data.FactionTemplate = packet.ReadInt32("FactionTemplate", indexes);
            data.StateSpellVisualKitID = packet.ReadUInt32("StateSpellVisualKitID", indexes);
            for (var i = 0; i < data.Customizations.Count; ++i)
            {
                data.Customizations[i] = ReadCreateChrCustomizationChoice(packet, indexes, "Customizations", i);
            }
            return data;
        }

        public override ICorpseData ReadUpdateCorpseData(Packet packet, params object[] indexes)
        {
            var data = new CorpseData();
            packet.ResetBitReader();
            var rawChangesMask = new int[2];
            var rawMaskMask = new int[1];
            rawMaskMask[0] = (int)packet.ReadBits(2);
            var maskMask = new BitArray(rawMaskMask);
            for (var i = 0; i < 2; ++i)
                if (maskMask[i])
                    rawChangesMask[i] = (int)packet.ReadBits(32);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Customizations.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    for (var i = 0; i < data.Customizations.Count; ++i)
                    {
                        if (data.Customizations.UpdateMask[i])
                        {
                            data.Customizations[i] = ReadUpdateChrCustomizationChoice(packet, indexes, "Customizations", i);
                        }
                    }
                }
                if (changesMask[2])
                {
                    data.DynamicFlags = packet.ReadUInt32("DynamicFlags", indexes);
                }
                if (changesMask[3])
                {
                    data.Owner = packet.ReadPackedGuid128("Owner", indexes);
                }
                if (changesMask[4])
                {
                    data.PartyGUID = packet.ReadPackedGuid128("PartyGUID", indexes);
                }
                if (changesMask[5])
                {
                    data.GuildGUID = packet.ReadPackedGuid128("GuildGUID", indexes);
                }
                if (changesMask[6])
                {
                    data.DisplayID = packet.ReadUInt32("DisplayID", indexes);
                }
                if (changesMask[7])
                {
                    data.RaceID = packet.ReadByte("RaceID", indexes);
                }
                if (changesMask[8])
                {
                    data.Sex = packet.ReadByte("Sex", indexes);
                }
                if (changesMask[9])
                {
                    data.Class = packet.ReadByte("Class", indexes);
                }
                if (changesMask[10])
                {
                    data.Flags = packet.ReadUInt32("Flags", indexes);
                }
                if (changesMask[11])
                {
                    data.FactionTemplate = packet.ReadInt32("FactionTemplate", indexes);
                }
                if (changesMask[12])
                {
                    data.StateSpellVisualKitID = packet.ReadUInt32("StateSpellVisualKitID", indexes);
                }
            }
            if (changesMask[13])
            {
                for (var i = 0; i < 19; ++i)
                {
                    if (changesMask[14 + i])
                    {
                        data.Items[i] = packet.ReadUInt32("Items", indexes, i);
                    }
                }
            }
            return data;
        }

        public static IScaleCurve ReadCreateScaleCurve(Packet packet, params object[] indexes)
        {
            var data = new ScaleCurve();
            packet.ResetBitReader();
            data.StartTimeOffset = packet.ReadUInt32("StartTimeOffset", indexes);
            for (var i = 0; i < 2; ++i)
            {
                data.Points[i] = packet.ReadVector2("Points", indexes, i);
            }
            data.ParameterCurve = packet.ReadUInt32("ParameterCurve", indexes);
            data.OverrideActive = packet.ReadBit("OverrideActive", indexes);
            return data;
        }

        public static IScaleCurve ReadUpdateScaleCurve(Packet packet, params object[] indexes)
        {
            var data = new ScaleCurve();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(7);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.OverrideActive = packet.ReadBit("OverrideActive", indexes);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[2])
                {
                    data.StartTimeOffset = packet.ReadUInt32("StartTimeOffset", indexes);
                }
                if (changesMask[3])
                {
                    data.ParameterCurve = packet.ReadUInt32("ParameterCurve", indexes);
                }
            }
            if (changesMask[4])
            {
                for (var i = 0; i < 2; ++i)
                {
                    if (changesMask[5 + i])
                    {
                        data.Points[i] = packet.ReadVector2("Points", indexes, i);
                    }
                }
            }
            return data;
        }

        public static IVisualAnim ReadCreateVisualAnim(Packet packet, params object[] indexes)
        {
            var data = new VisualAnim();
            packet.ResetBitReader();
            var hasAnimationDataID = false;
            hasAnimationDataID = packet.ReadBit("HasAnimationDataID", indexes);
            data.IsDecay = packet.ReadBit("IsDecay", indexes);
            packet.ResetBitReader();
            data.AnimKitID = packet.ReadUInt32("AnimKitID", indexes);
            data.AnimProgress = packet.ReadUInt32("AnimProgress", indexes);
            if (hasAnimationDataID)
            {
                data.AnimationDataID = packet.ReadInt16("AnimationDataID", indexes);
            }
            return data;
        }

        public static IVisualAnim ReadUpdateVisualAnim(Packet packet, params object[] indexes)
        {
            var data = new VisualAnim();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(5);
            var changesMask = new BitArray(rawChangesMask);

            var hasAnimationDataID = false;
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.IsDecay = packet.ReadBit("IsDecay", indexes);
                }
                hasAnimationDataID = packet.ReadBit("HasAnimationDataID", indexes);
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[3])
                {
                    data.AnimKitID = packet.ReadUInt32("AnimKitID", indexes);
                }
                if (changesMask[4])
                {
                    data.AnimProgress = packet.ReadUInt32("AnimProgress", indexes);
                }
                if (changesMask[2])
                {
                    if (hasAnimationDataID)
                    {
                        data.AnimationDataID = packet.ReadInt16("AnimationDataID", indexes);
                    }
                }
            }
            return data;
        }

        public static IForceSetAreaTriggerPositionAndRotation ReadCreateForceSetAreaTriggerPositionAndRotation(Packet packet, params object[] indexes)
        {
            var data = new ForceSetAreaTriggerPositionAndRotation();
            packet.ResetBitReader();
            data.TriggerGUID = packet.ReadPackedGuid128("TriggerGUID", indexes);
            data.Position = packet.ReadVector3("Position", indexes);
            data.Rotation = packet.ReadQuaternion("Rotation", indexes);
            return data;
        }

        public static IForceSetAreaTriggerPositionAndRotation ReadUpdateForceSetAreaTriggerPositionAndRotation(Packet packet, params object[] indexes)
        {
            var data = new ForceSetAreaTriggerPositionAndRotation();
            packet.ResetBitReader();
            data.TriggerGUID = packet.ReadPackedGuid128("TriggerGUID", indexes);
            data.Position = packet.ReadVector3("Position", indexes);
            data.Rotation = packet.ReadQuaternion("Rotation", indexes);
            return data;
        }

        public static IAreaTriggerSplineCalculator ReadCreateAreaTriggerSplineCalculator(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerSplineCalculator();
            packet.ResetBitReader();
            data.Points.Resize(packet.ReadBits(16));
            data.Catmullrom = packet.ReadBit("Catmullrom", indexes);
            for (var i = 0; i < data.Points.Count; ++i)
            {
                data.Points[i] = packet.ReadVector3("Points", indexes, i);
            }
            return data;
        }

        public static IAreaTriggerSplineCalculator ReadUpdateAreaTriggerSplineCalculator(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerSplineCalculator();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Catmullrom = packet.ReadBit("Catmullrom", indexes);
                }
                if (changesMask[2])
                {
                    data.Points.ReadUpdateMask(packet, 16);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[2])
                {
                    for (var i = 0; i < data.Points.Count; ++i)
                    {
                        if (data.Points.UpdateMask[i])
                        {
                            data.Points[i] = packet.ReadVector3("Points", indexes, i);
                        }
                    }
                }
            }
            return data;
        }

        public static IAreaTriggerOrbit ReadCreateAreaTriggerOrbit(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerOrbit();
            packet.ResetBitReader();
            data.Center = packet.ReadVector3("Center", indexes);
            data.Radius = packet.ReadSingle("Radius", indexes);
            data.InitialAngle = packet.ReadSingle("InitialAngle", indexes);
            data.BlendFromRadius = packet.ReadSingle("BlendFromRadius", indexes);
            data.ExtraTimeForBlending = packet.ReadInt32("ExtraTimeForBlending", indexes);
            data.CounterClockwise = packet.ReadBit("CounterClockwise", indexes);
            return data;
        }

        public static IAreaTriggerOrbit ReadUpdateAreaTriggerOrbit(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerOrbit();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(7);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.CounterClockwise = packet.ReadBit("CounterClockwise", indexes);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[2])
                {
                    data.Center = packet.ReadVector3("Center", indexes);
                }
                if (changesMask[3])
                {
                    data.Radius = packet.ReadSingle("Radius", indexes);
                }
                if (changesMask[4])
                {
                    data.InitialAngle = packet.ReadSingle("InitialAngle", indexes);
                }
                if (changesMask[5])
                {
                    data.BlendFromRadius = packet.ReadSingle("BlendFromRadius", indexes);
                }
                if (changesMask[6])
                {
                    data.ExtraTimeForBlending = packet.ReadInt32("ExtraTimeForBlending", indexes);
                }
            }
            return data;
        }

        public static IAreaTriggerMovementScript ReadCreateAreaTriggerMovementScript(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerMovementScript();
            packet.ResetBitReader();
            data.SpellScriptID = packet.ReadInt32("SpellScriptID", indexes);
            data.Center = packet.ReadVector3("Center", indexes);
            data.CreationTime = packet.ReadUInt32("CreationTime", indexes);
            return data;
        }

        public static IAreaTriggerMovementScript ReadUpdateAreaTriggerMovementScript(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerMovementScript();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(4);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.SpellScriptID = packet.ReadInt32("SpellScriptID", indexes);
                }
                if (changesMask[2])
                {
                    data.Center = packet.ReadVector3("Center", indexes);
                }
                if (changesMask[3])
                {
                    data.CreationTime = packet.ReadUInt32("CreationTime", indexes);
                }
            }
            return data;
        }

        public static IAreaTriggerSphere ReadCreateAreaTriggerSphere(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerSphere();
            packet.ResetBitReader();
            data.Radius = packet.ReadSingle("Radius", indexes);
            data.RadiusTarget = packet.ReadSingle("RadiusTarget", indexes);
            return data;
        }

        public static IAreaTriggerSphere ReadUpdateAreaTriggerSphere(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerSphere();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Radius = packet.ReadSingle("Radius", indexes);
                }
                if (changesMask[2])
                {
                    data.RadiusTarget = packet.ReadSingle("RadiusTarget", indexes);
                }
            }
            return data;
        }

        public static IAreaTriggerBox ReadCreateAreaTriggerBox(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerBox();
            packet.ResetBitReader();
            data.Extents = packet.ReadVector3("Extents", indexes);
            data.ExtentsTarget = packet.ReadVector3("ExtentsTarget", indexes);
            return data;
        }

        public static IAreaTriggerBox ReadUpdateAreaTriggerBox(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerBox();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Extents = packet.ReadVector3("Extents", indexes);
                }
                if (changesMask[2])
                {
                    data.ExtentsTarget = packet.ReadVector3("ExtentsTarget", indexes);
                }
            }
            return data;
        }

        public static IAreaTriggerPolygon ReadCreateAreaTriggerPolygon(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerPolygon();
            packet.ResetBitReader();
            data.Vertices.Resize(packet.ReadUInt32());
            data.VerticesTarget.Resize(packet.ReadUInt32());
            data.Height = packet.ReadSingle("Height", indexes);
            data.HeightTarget = packet.ReadSingle("HeightTarget", indexes);
            for (var i = 0; i < data.Vertices.Count; ++i)
            {
                data.Vertices[i] = packet.ReadVector2("Vertices", indexes, i);
            }
            for (var i = 0; i < data.VerticesTarget.Count; ++i)
            {
                data.VerticesTarget[i] = packet.ReadVector2("VerticesTarget", indexes, i);
            }
            return data;
        }

        public static IAreaTriggerPolygon ReadUpdateAreaTriggerPolygon(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerPolygon();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(5);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Vertices.ReadUpdateMask(packet);
                }
                if (changesMask[2])
                {
                    data.VerticesTarget.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    for (var i = 0; i < data.Vertices.Count; ++i)
                    {
                        if (data.Vertices.UpdateMask[i])
                        {
                            data.Vertices[i] = packet.ReadVector2("Vertices", indexes, i);
                        }
                    }
                }
                if (changesMask[2])
                {
                    for (var i = 0; i < data.VerticesTarget.Count; ++i)
                    {
                        if (data.VerticesTarget.UpdateMask[i])
                        {
                            data.VerticesTarget[i] = packet.ReadVector2("VerticesTarget", indexes, i);
                        }
                    }
                }
                if (changesMask[3])
                {
                    data.Height = packet.ReadSingle("Height", indexes);
                }
                if (changesMask[4])
                {
                    data.HeightTarget = packet.ReadSingle("HeightTarget", indexes);
                }
            }
            return data;
        }

        public static IAreaTriggerCylinder ReadCreateAreaTriggerCylinder(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerCylinder();
            packet.ResetBitReader();
            data.Radius = packet.ReadSingle("Radius", indexes);
            data.RadiusTarget = packet.ReadSingle("RadiusTarget", indexes);
            data.Height = packet.ReadSingle("Height", indexes);
            data.HeightTarget = packet.ReadSingle("HeightTarget", indexes);
            data.LocationZOffset = packet.ReadSingle("LocationZOffset", indexes);
            data.LocationZOffsetTarget = packet.ReadSingle("LocationZOffsetTarget", indexes);
            return data;
        }

        public static IAreaTriggerCylinder ReadUpdateAreaTriggerCylinder(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerCylinder();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(7);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Radius = packet.ReadSingle("Radius", indexes);
                }
                if (changesMask[2])
                {
                    data.RadiusTarget = packet.ReadSingle("RadiusTarget", indexes);
                }
                if (changesMask[3])
                {
                    data.Height = packet.ReadSingle("Height", indexes);
                }
                if (changesMask[4])
                {
                    data.HeightTarget = packet.ReadSingle("HeightTarget", indexes);
                }
                if (changesMask[5])
                {
                    data.LocationZOffset = packet.ReadSingle("LocationZOffset", indexes);
                }
                if (changesMask[6])
                {
                    data.LocationZOffsetTarget = packet.ReadSingle("LocationZOffsetTarget", indexes);
                }
            }
            return data;
        }

        public static IAreaTriggerDisk ReadCreateAreaTriggerDisk(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerDisk();
            packet.ResetBitReader();
            data.InnerRadius = packet.ReadSingle("InnerRadius", indexes);
            data.InnerRadiusTarget = packet.ReadSingle("InnerRadiusTarget", indexes);
            data.OuterRadius = packet.ReadSingle("OuterRadius", indexes);
            data.OuterRadiusTarget = packet.ReadSingle("OuterRadiusTarget", indexes);
            data.Height = packet.ReadSingle("Height", indexes);
            data.HeightTarget = packet.ReadSingle("HeightTarget", indexes);
            data.LocationZOffset = packet.ReadSingle("LocationZOffset", indexes);
            data.LocationZOffsetTarget = packet.ReadSingle("LocationZOffsetTarget", indexes);
            return data;
        }

        public static IAreaTriggerDisk ReadUpdateAreaTriggerDisk(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerDisk();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(9);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.InnerRadius = packet.ReadSingle("InnerRadius", indexes);
                }
                if (changesMask[2])
                {
                    data.InnerRadiusTarget = packet.ReadSingle("InnerRadiusTarget", indexes);
                }
                if (changesMask[3])
                {
                    data.OuterRadius = packet.ReadSingle("OuterRadius", indexes);
                }
                if (changesMask[4])
                {
                    data.OuterRadiusTarget = packet.ReadSingle("OuterRadiusTarget", indexes);
                }
                if (changesMask[5])
                {
                    data.Height = packet.ReadSingle("Height", indexes);
                }
                if (changesMask[6])
                {
                    data.HeightTarget = packet.ReadSingle("HeightTarget", indexes);
                }
                if (changesMask[7])
                {
                    data.LocationZOffset = packet.ReadSingle("LocationZOffset", indexes);
                }
                if (changesMask[8])
                {
                    data.LocationZOffsetTarget = packet.ReadSingle("LocationZOffsetTarget", indexes);
                }
            }
            return data;
        }

        public static IAreaTriggerBoundedPlane ReadCreateAreaTriggerBoundedPlane(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerBoundedPlane();
            packet.ResetBitReader();
            data.Extents = packet.ReadVector2("Extents", indexes);
            data.ExtentsTarget = packet.ReadVector2("ExtentsTarget", indexes);
            return data;
        }

        public static IAreaTriggerBoundedPlane ReadUpdateAreaTriggerBoundedPlane(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerBoundedPlane();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(3);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Extents = packet.ReadVector2("Extents", indexes);
                }
                if (changesMask[2])
                {
                    data.ExtentsTarget = packet.ReadVector2("ExtentsTarget", indexes);
                }
            }
            return data;
        }

        public override IAreaTriggerData ReadCreateAreaTriggerData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new AreaTriggerData();
            packet.ResetBitReader();
            var hasTargetRollPitchYaw = false;
            var hasForcedPositionAndRotation = false;
            data.OverrideScaleCurve = ReadCreateScaleCurve(packet, indexes, "OverrideScaleCurve");
            data.Caster = packet.ReadPackedGuid128("Caster", indexes);
            data.Duration = packet.ReadUInt32("Duration", indexes);
            data.TimeToTarget = packet.ReadUInt32("TimeToTarget", indexes);
            data.TimeToTargetScale = packet.ReadUInt32("TimeToTargetScale", indexes);
            data.TimeToTargetExtraScale = packet.ReadUInt32("TimeToTargetExtraScale", indexes);
            data.TimeToTargetPos = packet.ReadUInt32("TimeToTargetPos", indexes);
            data.SpellID = packet.ReadInt32("SpellID", indexes);
            data.SpellForVisuals = packet.ReadInt32("SpellForVisuals", indexes);
            data.SpellVisual = ReadCreateSpellCastVisual(packet, indexes, "SpellVisual");
            data.BoundsRadius2D = packet.ReadSingle("BoundsRadius2D", indexes);
            data.DecalPropertiesID = packet.ReadUInt32("DecalPropertiesID", indexes);
            data.CreatingEffectGUID = packet.ReadPackedGuid128("CreatingEffectGUID", indexes);
            data.OrbitPathTarget = packet.ReadPackedGuid128("OrbitPathTarget", indexes);
            data.RollPitchYaw = packet.ReadVector3("RollPitchYaw", indexes);
            data.PositionalSoundKitID = packet.ReadInt32("PositionalSoundKitID", indexes);
            data.MovementStartTime = packet.ReadUInt32("MovementStartTime", indexes);
            data.CreationTime = packet.ReadUInt32("CreationTime", indexes);
            data.ZOffset = packet.ReadSingle("ZOffset", indexes);
            data.Flags = packet.ReadUInt32("Flags", indexes);
            data.ScaleCurveId = packet.ReadUInt32("ScaleCurveId", indexes);
            data.FacingCurveId = packet.ReadUInt32("FacingCurveId", indexes);
            data.MorphCurveId = packet.ReadUInt32("MorphCurveId", indexes);
            data.MoveCurveId = packet.ReadUInt32("MoveCurveId", indexes);
            data.Facing = packet.ReadSingle("Facing", indexes);
            data.PathType = packet.ReadInt32("PathType", indexes);
            data.ShapeType = packet.ReadByte("ShapeType", indexes);
            if (data.PathType == 3)
            {
                data.MovementScript = ReadCreateAreaTriggerMovementScript(packet, indexes, "MovementScript");
            }
            if (data.ShapeType == 0)
            {
                data.Sphere = ReadCreateAreaTriggerSphere(packet, indexes, "Sphere");
            }
            if (data.ShapeType == 1)
            {
                data.Box = ReadCreateAreaTriggerBox(packet, indexes, "Box");
            }
            if (data.ShapeType == 2 || data.ShapeType == 3 || data.ShapeType == 5 || data.ShapeType == 6)
            {
                data.Polygon = ReadCreateAreaTriggerPolygon(packet, indexes, "Polygon");
            }
            if (data.ShapeType == 4)
            {
                data.Cylinder = ReadCreateAreaTriggerCylinder(packet, indexes, "Cylinder");
            }
            if (data.ShapeType == 7)
            {
                data.Disk = ReadCreateAreaTriggerDisk(packet, indexes, "Disk");
            }
            if (data.ShapeType == 8)
            {
                data.BoundedPlane = ReadCreateAreaTriggerBoundedPlane(packet, indexes, "BoundedPlane");
            }
            data.ExtraScaleCurve = ReadCreateScaleCurve(packet, indexes, "ExtraScaleCurve");
            packet.ResetBitReader();
            hasTargetRollPitchYaw = packet.ReadBit("HasTargetRollPitchYaw", indexes);
            hasForcedPositionAndRotation = packet.ReadBit("HasForcedPositionAndRotation", indexes);
            data.OverrideMoveCurveX = ReadCreateScaleCurve(packet, indexes, "OverrideMoveCurveX");
            if (hasTargetRollPitchYaw)
            {
                data.TargetRollPitchYaw = packet.ReadVector3("TargetRollPitchYaw", indexes);
            }
            if (hasForcedPositionAndRotation)
            {
                data.ForcedPositionAndRotation = ReadCreateForceSetAreaTriggerPositionAndRotation(packet, indexes, "ForcedPositionAndRotation");
            }
            data.OverrideMoveCurveY = ReadCreateScaleCurve(packet, indexes, "OverrideMoveCurveY");
            data.OverrideMoveCurveZ = ReadCreateScaleCurve(packet, indexes, "OverrideMoveCurveZ");
            data.VisualAnim = ReadCreateVisualAnim(packet, indexes, "VisualAnim");
            if (data.PathType == 0)
            {
                data.Spline = ReadCreateAreaTriggerSplineCalculator(packet, indexes, "Spline");
            }
            if (data.PathType == 1)
            {
                data.Orbit = ReadCreateAreaTriggerOrbit(packet, indexes, "Orbit");
            }
            return data;
        }

        public override IAreaTriggerData ReadUpdateAreaTriggerData(Packet packet, params object[] indexes)
        {
            var data = new AreaTriggerData();
            packet.ResetBitReader();
            var rawChangesMask = new int[2];
            rawChangesMask[0] = packet.ReadInt32();
            rawChangesMask[1] = (int)packet.ReadBits(4);
            var changesMask = new BitArray(rawChangesMask);

            var hasTargetRollPitchYaw = false;
            var hasForcedPositionAndRotation = false;
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.OverrideScaleCurve = ReadUpdateScaleCurve(packet, indexes, "OverrideScaleCurve");
                }
                if (changesMask[6])
                {
                    data.Caster = packet.ReadPackedGuid128("Caster", indexes);
                }
                if (changesMask[7])
                {
                    data.Duration = packet.ReadUInt32("Duration", indexes);
                }
                if (changesMask[8])
                {
                    data.TimeToTarget = packet.ReadUInt32("TimeToTarget", indexes);
                }
                if (changesMask[9])
                {
                    data.TimeToTargetScale = packet.ReadUInt32("TimeToTargetScale", indexes);
                }
                if (changesMask[10])
                {
                    data.TimeToTargetExtraScale = packet.ReadUInt32("TimeToTargetExtraScale", indexes);
                }
                if (changesMask[11])
                {
                    data.TimeToTargetPos = packet.ReadUInt32("TimeToTargetPos", indexes);
                }
                if (changesMask[12])
                {
                    data.SpellID = packet.ReadInt32("SpellID", indexes);
                }
                if (changesMask[13])
                {
                    data.SpellForVisuals = packet.ReadInt32("SpellForVisuals", indexes);
                }
                if (changesMask[14])
                {
                    data.SpellVisual = ReadUpdateSpellCastVisual(packet, indexes, "SpellVisual");
                }
                if (changesMask[15])
                {
                    data.BoundsRadius2D = packet.ReadSingle("BoundsRadius2D", indexes);
                }
                if (changesMask[16])
                {
                    data.DecalPropertiesID = packet.ReadUInt32("DecalPropertiesID", indexes);
                }
                if (changesMask[17])
                {
                    data.CreatingEffectGUID = packet.ReadPackedGuid128("CreatingEffectGUID", indexes);
                }
                if (changesMask[18])
                {
                    data.OrbitPathTarget = packet.ReadPackedGuid128("OrbitPathTarget", indexes);
                }
                if (changesMask[19])
                {
                    data.RollPitchYaw = packet.ReadVector3("RollPitchYaw", indexes);
                }
                if (changesMask[20])
                {
                    data.PositionalSoundKitID = packet.ReadInt32("PositionalSoundKitID", indexes);
                }
                if (changesMask[21])
                {
                    data.MovementStartTime = packet.ReadUInt32("MovementStartTime", indexes);
                }
                if (changesMask[22])
                {
                    data.CreationTime = packet.ReadUInt32("CreationTime", indexes);
                }
                if (changesMask[23])
                {
                    data.ZOffset = packet.ReadSingle("ZOffset", indexes);
                }
                if (changesMask[25])
                {
                    data.Flags = packet.ReadUInt32("Flags", indexes);
                }
                if (changesMask[27])
                {
                    data.ScaleCurveId = packet.ReadUInt32("ScaleCurveId", indexes);
                }
                if (changesMask[28])
                {
                    data.FacingCurveId = packet.ReadUInt32("FacingCurveId", indexes);
                }
                if (changesMask[29])
                {
                    data.MorphCurveId = packet.ReadUInt32("MorphCurveId", indexes);
                }
                if (changesMask[30])
                {
                    data.MoveCurveId = packet.ReadUInt32("MoveCurveId", indexes);
                }
                if (changesMask[31])
                {
                    data.Facing = packet.ReadSingle("Facing", indexes);
                }
            }
            if (changesMask[32])
            {
                if (changesMask[34])
                {
                    data.PathType = packet.ReadInt32("PathType", indexes);
                }
                if (changesMask[35])
                {
                    data.ShapeType = packet.ReadByte("ShapeType", indexes);
                }
                if (changesMask[34])
                {
                    if (data.PathType == 3)
                    {
                        data.MovementScript = ReadUpdateAreaTriggerMovementScript(packet, indexes, "MovementScript");
                    }
                }
                if (changesMask[35])
                {
                    if (data.ShapeType == 0)
                    {
                        data.Sphere = ReadUpdateAreaTriggerSphere(packet, indexes, "Sphere");
                    }
                    if (data.ShapeType == 1)
                    {
                        data.Box = ReadUpdateAreaTriggerBox(packet, indexes, "Box");
                    }
                    if (data.ShapeType == 2 || data.ShapeType == 3 || data.ShapeType == 5 || data.ShapeType == 6)
                    {
                        data.Polygon = ReadUpdateAreaTriggerPolygon(packet, indexes, "Polygon");
                    }
                    if (data.ShapeType == 4)
                    {
                        data.Cylinder = ReadUpdateAreaTriggerCylinder(packet, indexes, "Cylinder");
                    }
                    if (data.ShapeType == 7)
                    {
                        data.Disk = ReadUpdateAreaTriggerDisk(packet, indexes, "Disk");
                    }
                    if (data.ShapeType == 8)
                    {
                        data.BoundedPlane = ReadUpdateAreaTriggerBoundedPlane(packet, indexes, "BoundedPlane");
                    }
                }
            }
            if (changesMask[0])
            {
                if (changesMask[2])
                {
                    data.ExtraScaleCurve = ReadUpdateScaleCurve(packet, indexes, "ExtraScaleCurve");
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                hasTargetRollPitchYaw = packet.ReadBit("HasTargetRollPitchYaw", indexes);
            }
            if (changesMask[32])
            {
                hasForcedPositionAndRotation = packet.ReadBit("HasForcedPositionAndRotation", indexes);
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[3])
                {
                    data.OverrideMoveCurveX = ReadUpdateScaleCurve(packet, indexes, "OverrideMoveCurveX");
                }
                if (changesMask[24])
                {
                    if (hasTargetRollPitchYaw)
                    {
                        data.TargetRollPitchYaw = packet.ReadVector3("TargetRollPitchYaw", indexes);
                    }
                }
            }
            if (changesMask[32])
            {
                if (changesMask[33])
                {
                    if (hasForcedPositionAndRotation)
                    {
                        data.ForcedPositionAndRotation = ReadUpdateForceSetAreaTriggerPositionAndRotation(packet, indexes, "ForcedPositionAndRotation");
                    }
                }
            }
            if (changesMask[0])
            {
                if (changesMask[4])
                {
                    data.OverrideMoveCurveY = ReadUpdateScaleCurve(packet, indexes, "OverrideMoveCurveY");
                }
                if (changesMask[5])
                {
                    data.OverrideMoveCurveZ = ReadUpdateScaleCurve(packet, indexes, "OverrideMoveCurveZ");
                }
                if (changesMask[26])
                {
                    data.VisualAnim = ReadUpdateVisualAnim(packet, indexes, "VisualAnim");
                }
            }
            if (changesMask[32])
            {
                if (changesMask[34])
                {
                    if (data.PathType == 0)
                    {
                        data.Spline = ReadUpdateAreaTriggerSplineCalculator(packet, indexes, "Spline");
                    }
                    if (data.PathType == 1)
                    {
                        data.Orbit = ReadUpdateAreaTriggerOrbit(packet, indexes, "Orbit");
                    }
                }
            }
            return data;
        }

        public override ISceneObjectData ReadCreateSceneObjectData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new SceneObjectData();
            packet.ResetBitReader();
            data.ScriptPackageID = packet.ReadInt32("ScriptPackageID", indexes);
            data.RndSeedVal = packet.ReadUInt32("RndSeedVal", indexes);
            data.CreatedBy = packet.ReadPackedGuid128("CreatedBy", indexes);
            data.SceneType = packet.ReadUInt32("SceneType", indexes);
            return data;
        }

        public override ISceneObjectData ReadUpdateSceneObjectData(Packet packet, params object[] indexes)
        {
            var data = new SceneObjectData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(5);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.ScriptPackageID = packet.ReadInt32("ScriptPackageID", indexes);
                }
                if (changesMask[2])
                {
                    data.RndSeedVal = packet.ReadUInt32("RndSeedVal", indexes);
                }
                if (changesMask[3])
                {
                    data.CreatedBy = packet.ReadPackedGuid128("CreatedBy", indexes);
                }
                if (changesMask[4])
                {
                    data.SceneType = packet.ReadUInt32("SceneType", indexes);
                }
            }
            return data;
        }

        public static IConversationLine ReadCreateConversationLine(Packet packet, params object[] indexes)
        {
            var data = new ConversationLine();
            packet.ResetBitReader();
            data.ConversationLineID = packet.ReadInt32("ConversationLineID", indexes);
            data.BroadcastTextID = packet.ReadInt32("BroadcastTextID", indexes);
            data.StartTime = packet.ReadUInt32("StartTime", indexes);
            data.UiCameraID = packet.ReadInt32("UiCameraID", indexes);
            data.ActorIndex = packet.ReadByte("ActorIndex", indexes);
            data.Flags = packet.ReadByte("Flags", indexes);
            data.ChatType = packet.ReadByte("ChatType", indexes);
            return data;
        }

        public static IConversationLine ReadUpdateConversationLine(Packet packet, params object[] indexes)
        {
            var data = new ConversationLine();
            packet.ResetBitReader();
            data.ConversationLineID = packet.ReadInt32("ConversationLineID", indexes);
            data.BroadcastTextID = packet.ReadInt32("BroadcastTextID", indexes);
            data.StartTime = packet.ReadUInt32("StartTime", indexes);
            data.UiCameraID = packet.ReadInt32("UiCameraID", indexes);
            data.ActorIndex = packet.ReadByte("ActorIndex", indexes);
            data.Flags = packet.ReadByte("Flags", indexes);
            data.ChatType = packet.ReadByte("ChatType", indexes);
            return data;
        }

        public static IConversationActor ReadCreateConversationActor(Packet packet, params object[] indexes)
        {
            var data = new ConversationActor();
            packet.ResetBitReader();
            data.CreatureID = packet.ReadUInt32("CreatureID", indexes);
            data.CreatureDisplayInfoID = packet.ReadUInt32("CreatureDisplayInfoID", indexes);
            data.ActorGUID = packet.ReadPackedGuid128("ActorGUID", indexes);
            data.Id = packet.ReadInt32("Id", indexes);
            data.Type = packet.ReadBits("Type", 1, indexes);
            data.NoActorObject = packet.ReadBits("NoActorObject", 1, indexes);
            return data;
        }

        public static IConversationActor ReadUpdateConversationActor(Packet packet, params object[] indexes)
        {
            var data = new ConversationActor();
            packet.ResetBitReader();
            data.CreatureID = packet.ReadUInt32("CreatureID", indexes);
            data.CreatureDisplayInfoID = packet.ReadUInt32("CreatureDisplayInfoID", indexes);
            data.ActorGUID = packet.ReadPackedGuid128("ActorGUID", indexes);
            data.Id = packet.ReadInt32("Id", indexes);
            data.Type = packet.ReadBits("Type", 1, indexes);
            data.NoActorObject = packet.ReadBits("NoActorObject", 1, indexes);
            return data;
        }

        public override IConversationData ReadCreateConversationData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new ConversationData();
            packet.ResetBitReader();
            data.Lines = new IConversationLine[packet.ReadUInt32()];
            data.LastLineEndTime = packet.ReadInt32("LastLineEndTime", indexes);
            data.Progress = packet.ReadUInt32("Progress", indexes);
            for (var i = 0; i < data.Lines.Length; ++i)
            {
                data.Lines[i] = ReadCreateConversationLine(packet, indexes, "Lines", i);
            }
            data.DontPlayBroadcastTextSounds = packet.ReadBit("DontPlayBroadcastTextSounds", indexes);
            data.Actors.Resize(packet.ReadUInt32());
            data.Flags = packet.ReadUInt32("Flags", indexes);
            for (var i = 0; i < data.Actors.Count; ++i)
            {
                data.Actors[i] = ReadCreateConversationActor(packet, indexes, "Actors", i);
            }
            return data;
        }

        public override IConversationData ReadUpdateConversationData(Packet packet, params object[] indexes)
        {
            var data = new ConversationData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(7);
            var changesMask = new BitArray(rawChangesMask);

            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.DontPlayBroadcastTextSounds = packet.ReadBit("DontPlayBroadcastTextSounds", indexes);
                }
                if (changesMask[2])
                {
                    data.Lines = Enumerable.Range(0, (int)packet.ReadBits(32)).Select(x => new ConversationLine()).Cast<IConversationLine>().ToArray();
                    for (var i = 0; i < data.Lines.Length; ++i)
                    {
                        data.Lines[i] = ReadUpdateConversationLine(packet, indexes, "Lines", i);
                    }
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[3])
                {
                    data.Actors.ReadUpdateMask(packet);
                }
            }
            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[3])
                {
                    for (var i = 0; i < data.Actors.Count; ++i)
                    {
                        if (data.Actors.UpdateMask[i])
                        {
                            data.Actors[i] = ReadUpdateConversationActor(packet, indexes, "Actors", i);
                        }
                    }
                }
                if (changesMask[4])
                {
                    data.LastLineEndTime = packet.ReadInt32("LastLineEndTime", indexes);
                }
                if (changesMask[5])
                {
                    data.Progress = packet.ReadUInt32("Progress", indexes);
                }
                if (changesMask[6])
                {
                    data.Flags = packet.ReadUInt32("Flags", indexes);
                }
            }
            return data;
        }

        public override IVendorData ReadCreateVendorData(Packet packet, UpdateFieldFlag flags, params object[] indexes)
        {
            var data = new VendorData();
            packet.ResetBitReader();
            data.Flags = packet.ReadInt32("Flags", indexes);
            return data;
        }

        public override IVendorData ReadUpdateVendorData(Packet packet, params object[] indexes)
        {
            var data = new VendorData();
            packet.ResetBitReader();
            var rawChangesMask = new int[1];
            rawChangesMask[0] = (int)packet.ReadBits(2);
            var changesMask = new BitArray(rawChangesMask);

            packet.ResetBitReader();
            if (changesMask[0])
            {
                if (changesMask[1])
                {
                    data.Flags = packet.ReadInt32("Flags", indexes);
                }
            }
            return data;
        }

    }
}
